{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f7e40593",
   "metadata": {},
   "source": [
    "# Employer Project: Kite (Data Cleaning)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad9524d3",
   "metadata": {},
   "source": [
    "# "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "351deb57",
   "metadata": {},
   "source": [
    "### Importing Necessary Libraries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "877cd985",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: openpyxl in c:\\users\\christina.hudaja\\appdata\\local\\anaconda3\\lib\\site-packages (3.0.10)\n",
      "Requirement already satisfied: et_xmlfile in c:\\users\\christina.hudaja\\appdata\\local\\anaconda3\\lib\\site-packages (from openpyxl) (1.1.0)\n",
      "Requirement already satisfied: cryptography in c:\\users\\christina.hudaja\\appdata\\local\\anaconda3\\lib\\site-packages (39.0.1)\n",
      "Requirement already satisfied: cffi>=1.12 in c:\\users\\christina.hudaja\\appdata\\local\\anaconda3\\lib\\site-packages (from cryptography) (1.15.1)\n",
      "Requirement already satisfied: pycparser in c:\\users\\christina.hudaja\\appdata\\local\\anaconda3\\lib\\site-packages (from cffi>=1.12->cryptography) (2.21)\n",
      "Requirement already satisfied: msoffcrypto-tool in c:\\users\\christina.hudaja\\appdata\\local\\anaconda3\\lib\\site-packages (5.0.1)\n",
      "Requirement already satisfied: olefile>=0.46 in c:\\users\\christina.hudaja\\appdata\\local\\anaconda3\\lib\\site-packages (from msoffcrypto-tool) (0.46)\n",
      "Requirement already satisfied: cryptography>=35.0 in c:\\users\\christina.hudaja\\appdata\\local\\anaconda3\\lib\\site-packages (from msoffcrypto-tool) (39.0.1)\n",
      "Requirement already satisfied: cffi>=1.12 in c:\\users\\christina.hudaja\\appdata\\local\\anaconda3\\lib\\site-packages (from cryptography>=35.0->msoffcrypto-tool) (1.15.1)\n",
      "Requirement already satisfied: pycparser in c:\\users\\christina.hudaja\\appdata\\local\\anaconda3\\lib\\site-packages (from cffi>=1.12->cryptography>=35.0->msoffcrypto-tool) (2.21)\n",
      "Requirement already satisfied: haversine in c:\\users\\christina.hudaja\\appdata\\local\\anaconda3\\lib\\site-packages (2.8.0)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime as dt\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "!pip install openpyxl\n",
    "!pip install cryptography\n",
    "\n",
    "!pip install msoffcrypto-tool\n",
    "import msoffcrypto\n",
    "import io\n",
    "\n",
    "!pip install haversine\n",
    "import haversine as hs\n",
    "from haversine import haversine_vector, Unit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1d7db88",
   "metadata": {},
   "source": [
    "# "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bf811a1",
   "metadata": {},
   "source": [
    "##  Customers Sheet"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7067b694",
   "metadata": {},
   "source": [
    "**'Customers' sheet data cleaning methodology:**\n",
    "<br>\n",
    "\n",
    "1. There are no duplicates in Website ID.\n",
    "<br>\n",
    "\n",
    "2. There are 65 customers with empty postcode & country.\n",
    "<br>\n",
    "3. Some inconsistencies observed related to the postcodes:\n",
    "    - UK postcodes are split into an outward and inward code. The official format of an outward codes is 2-4 characters, however, we have seen some with 5 characters. In this case, we have added a space between the 4th and 5th character. For this, we have made the assumption that the 5th character is the initial digit of the inward code.\n",
    "    - An outward code should always start with a letter. There is one code (0X15 6) which started with 0. We have replaced 0 with O, assuming this was a mistake when inputting the data.\n",
    "    - Two postcodes (NE3 1 and TW1 1) had spaces in the beginning of the code. Here, we have removed the spaces.\n",
    "    - The raw postcodes without any space were considered as missing a space, therefore to extract the outward code, we always leave out the last digit of the provided code.\n",
    "    - There are some postcodes with a mix of upper and lower case letters. For these, we convereted all letters to uppercase. <br><br> \n",
    "\n",
    "4. As a result of the steps taken to extract the outward codes (described in point 3 above), we were able to create coordinates (latitude and longitude) for each postcode using the CSV file found through this link: https://www.101computing.net/uk-postcode-distance-calculator/. This proved succesful for all but three of the postcodes (MW18, EI, NQ34 7)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5babcf10",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Decrypting the Excel file to open it in Python\n",
    "# Looking at the Customers sheet\n",
    "file_name = \"kite_orders_data.xlsx\"\n",
    "sheet_name = \"Customers\"\n",
    "password = \"FRMay23\"\n",
    "\n",
    "with open(file_name, \"rb\") as file:\n",
    "    decryptor = msoffcrypto.OfficeFile(file)\n",
    "    decryptor.load_key(password=password)\n",
    "    \n",
    "    decrypted_data = io.BytesIO()\n",
    "    decryptor.decrypt(decrypted_data)\n",
    "    decrypted_data.seek(0)\n",
    "    \n",
    "    # Storing the sheet in a Pandas DataFrame called customers\n",
    "    customers = pd.read_excel(decrypted_data, sheet_name=sheet_name, engine='openpyxl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "41435569",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 18727 entries, 0 to 18726\n",
      "Data columns (total 3 columns):\n",
      " #   Column            Non-Null Count  Dtype \n",
      "---  ------            --------------  ----- \n",
      " 0   WebsiteID         18727 non-null  int64 \n",
      " 1   DeliveryPostCode  18662 non-null  object\n",
      " 2   DeliveryCountry   18662 non-null  object\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 439.0+ KB\n"
     ]
    }
   ],
   "source": [
    "# Looking at info for the customers DataFrame\n",
    "customers.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ff32a5c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(18727, 3)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Identifying the shape of the DataFrame\n",
    "customers.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "67fe5e1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>cust_postcode</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>245</td>\n",
       "      <td>L39 2</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>597</td>\n",
       "      <td>PR3 1</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>863</td>\n",
       "      <td>PE2 9</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2180</td>\n",
       "      <td>LN5 8</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2644</td>\n",
       "      <td>BD10 9</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID cust_postcode         country\n",
       "0         245         L39 2  United Kingdom\n",
       "1         597         PR3 1  United Kingdom\n",
       "2         863         PE2 9  United Kingdom\n",
       "3        2180         LN5 8  United Kingdom\n",
       "4        2644        BD10 9  United Kingdom"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Renaming columns\n",
    "customers2 = pd.DataFrame(customers.rename(columns = {'WebsiteID':'customerID','DeliveryPostCode':'cust_postcode',\n",
    "                                                      'DeliveryCountry':'country'}))\n",
    "# Viewing the DataFrame                                                     \n",
    "customers2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "956f8fb2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 18727 entries, 0 to 18726\n",
      "Data columns (total 3 columns):\n",
      " #   Column         Non-Null Count  Dtype \n",
      "---  ------         --------------  ----- \n",
      " 0   customerID     18727 non-null  object\n",
      " 1   cust_postcode  18662 non-null  object\n",
      " 2   country        18662 non-null  object\n",
      "dtypes: object(3)\n",
      "memory usage: 439.0+ KB\n"
     ]
    }
   ],
   "source": [
    "# Changing the customerID to string data type\n",
    "customers2['customerID'] =  customers2['customerID'].astype(str)\n",
    "\n",
    "# Checking this has worked\n",
    "customers2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7adf943c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>cust_postcode</th>\n",
       "      <th>country</th>\n",
       "      <th>outward1</th>\n",
       "      <th>inward1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>245</td>\n",
       "      <td>L39 2</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>L39</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>597</td>\n",
       "      <td>PR3 1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PR3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>863</td>\n",
       "      <td>PE2 9</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PE2</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2180</td>\n",
       "      <td>LN5 8</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>LN5</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2644</td>\n",
       "      <td>BD10 9</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>BD10</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customerID cust_postcode         country outward1 inward1\n",
       "0        245         L39 2  United Kingdom      L39       2\n",
       "1        597         PR3 1  United Kingdom      PR3       1\n",
       "2        863         PE2 9  United Kingdom      PE2       9\n",
       "3       2180         LN5 8  United Kingdom      LN5       8\n",
       "4       2644        BD10 9  United Kingdom     BD10       9"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Extracting the outward code from postcode by splitting where there is a space\n",
    "customers2[['outward1','inward1']] = customers2.cust_postcode.str.split(expand=True)\n",
    "\n",
    "# Viewing the DataFrame \n",
    "customers2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "99e267a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 18727 entries, 0 to 18726\n",
      "Data columns (total 5 columns):\n",
      " #   Column         Non-Null Count  Dtype \n",
      "---  ------         --------------  ----- \n",
      " 0   customerID     18727 non-null  object\n",
      " 1   cust_postcode  18662 non-null  object\n",
      " 2   country        18662 non-null  object\n",
      " 3   outward1       18662 non-null  object\n",
      " 4   inward1        18094 non-null  object\n",
      "dtypes: object(5)\n",
      "memory usage: 731.6+ KB\n"
     ]
    }
   ],
   "source": [
    "# Viewing the info for this DataFrame with the new columns\n",
    "customers2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "59201d29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customerID         0\n",
       "cust_postcode     65\n",
       "country           65\n",
       "outward1          65\n",
       "inward1          633\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for null values\n",
    "customers2.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "86bb0a34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        3.0\n",
       "1        3.0\n",
       "2        3.0\n",
       "3        3.0\n",
       "4        4.0\n",
       "        ... \n",
       "18722    3.0\n",
       "18723    3.0\n",
       "18724    4.0\n",
       "18725    4.0\n",
       "18726    2.0\n",
       "Name: outward1_len, Length: 18727, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating the length of the extracted outward codes (format should be 2-4 characters)\n",
    "customers2['outward1_len'] = customers2['outward1'].str.len()\n",
    "\n",
    "# Viewing these lengths\n",
    "customers2['outward1_len']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b09ef36a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 4, 2, 5, 0])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replacing blank cells in outward1_len with NaN\n",
    "customers2['outward1_len'].fillna(0,inplace=True)\n",
    "\n",
    "# Changing the data type of outward1_len from float to integer\n",
    "customers2['outward1_len'] = customers2['outward1_len'].astype(int)\n",
    "\n",
    "# Identifying the different lengths of outward codes\n",
    "customers2['outward1_len'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "58773128",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>cust_postcode</th>\n",
       "      <th>country</th>\n",
       "      <th>outward1</th>\n",
       "      <th>inward1</th>\n",
       "      <th>outward1_len</th>\n",
       "      <th>outward2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>245</td>\n",
       "      <td>L39 2</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>L39</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>L39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>597</td>\n",
       "      <td>PR3 1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PR3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>PR3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>863</td>\n",
       "      <td>PE2 9</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PE2</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>PE2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2180</td>\n",
       "      <td>LN5 8</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>LN5</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>LN5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2644</td>\n",
       "      <td>BD10 9</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>BD10</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>BD10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18722</th>\n",
       "      <td>901720</td>\n",
       "      <td>WA8 7</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>WA8</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>WA8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18723</th>\n",
       "      <td>901721</td>\n",
       "      <td>G66 1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>G66</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>G66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18724</th>\n",
       "      <td>901726</td>\n",
       "      <td>GL52 5</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>GL52</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>GL52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18725</th>\n",
       "      <td>901729</td>\n",
       "      <td>KA17 0</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>KA17</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>KA17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18726</th>\n",
       "      <td>901736</td>\n",
       "      <td>E8 2</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>E8</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>E8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18727 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerID cust_postcode         country outward1 inward1  outward1_len  \\\n",
       "0            245         L39 2  United Kingdom      L39       2             3   \n",
       "1            597         PR3 1  United Kingdom      PR3       1             3   \n",
       "2            863         PE2 9  United Kingdom      PE2       9             3   \n",
       "3           2180         LN5 8  United Kingdom      LN5       8             3   \n",
       "4           2644        BD10 9  United Kingdom     BD10       9             4   \n",
       "...          ...           ...             ...      ...     ...           ...   \n",
       "18722     901720         WA8 7  United Kingdom      WA8       7             3   \n",
       "18723     901721         G66 1  United Kingdom      G66       1             3   \n",
       "18724     901726        GL52 5  United Kingdom     GL52       5             4   \n",
       "18725     901729        KA17 0  United Kingdom     KA17       0             4   \n",
       "18726     901736          E8 2  United Kingdom       E8       2             2   \n",
       "\n",
       "      outward2  \n",
       "0          L39  \n",
       "1          PR3  \n",
       "2          PE2  \n",
       "3          LN5  \n",
       "4         BD10  \n",
       "...        ...  \n",
       "18722      WA8  \n",
       "18723      G66  \n",
       "18724     GL52  \n",
       "18725     KA17  \n",
       "18726       E8  \n",
       "\n",
       "[18727 rows x 7 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Extracting only the first 4 characters of the outward codes\n",
    "# (outward codes consist of up to 4 characters only)\n",
    "customers2['outward2'] = customers2['outward1'].str[:4]\n",
    "\n",
    "# Viewing the DataFrame\n",
    "customers2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e5210da8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>cust_postcode</th>\n",
       "      <th>country</th>\n",
       "      <th>outward1</th>\n",
       "      <th>inward1</th>\n",
       "      <th>outward1_len</th>\n",
       "      <th>outward2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>245</td>\n",
       "      <td>L39 2</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>L39</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>L39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>597</td>\n",
       "      <td>PR3 1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PR3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>PR3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>863</td>\n",
       "      <td>PE2 9</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PE2</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>PE2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2180</td>\n",
       "      <td>LN5 8</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>LN5</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>LN5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2644</td>\n",
       "      <td>BD10 9</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>BD10</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>BD10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18722</th>\n",
       "      <td>901720</td>\n",
       "      <td>WA8 7</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>WA8</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>WA8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18723</th>\n",
       "      <td>901721</td>\n",
       "      <td>G66 1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>G66</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>G66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18724</th>\n",
       "      <td>901726</td>\n",
       "      <td>GL52 5</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>GL52</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>GL52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18725</th>\n",
       "      <td>901729</td>\n",
       "      <td>KA17 0</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>KA17</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>KA17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18726</th>\n",
       "      <td>901736</td>\n",
       "      <td>E8 2</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>E8</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>E8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18094 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerID cust_postcode         country outward1 inward1  outward1_len  \\\n",
       "0            245         L39 2  United Kingdom      L39       2             3   \n",
       "1            597         PR3 1  United Kingdom      PR3       1             3   \n",
       "2            863         PE2 9  United Kingdom      PE2       9             3   \n",
       "3           2180         LN5 8  United Kingdom      LN5       8             3   \n",
       "4           2644        BD10 9  United Kingdom     BD10       9             4   \n",
       "...          ...           ...             ...      ...     ...           ...   \n",
       "18722     901720         WA8 7  United Kingdom      WA8       7             3   \n",
       "18723     901721         G66 1  United Kingdom      G66       1             3   \n",
       "18724     901726        GL52 5  United Kingdom     GL52       5             4   \n",
       "18725     901729        KA17 0  United Kingdom     KA17       0             4   \n",
       "18726     901736          E8 2  United Kingdom       E8       2             2   \n",
       "\n",
       "      outward2  \n",
       "0          L39  \n",
       "1          PR3  \n",
       "2          PE2  \n",
       "3          LN5  \n",
       "4         BD10  \n",
       "...        ...  \n",
       "18722      WA8  \n",
       "18723      G66  \n",
       "18724     GL52  \n",
       "18725     KA17  \n",
       "18726       E8  \n",
       "\n",
       "[18094 rows x 7 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating a subset consisting of postcodes with at least 1 digit of inward code\n",
    "group1 = customers2[customers2['inward1'].notnull()]\n",
    "\n",
    "# Viewing this subset\n",
    "group1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8b1e483a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\3025385139.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  group1['outward3'] = group1['outward2'].str.upper()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>cust_postcode</th>\n",
       "      <th>country</th>\n",
       "      <th>outward1</th>\n",
       "      <th>inward1</th>\n",
       "      <th>outward1_len</th>\n",
       "      <th>outward2</th>\n",
       "      <th>outward3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>245</td>\n",
       "      <td>L39 2</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>L39</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>L39</td>\n",
       "      <td>L39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>597</td>\n",
       "      <td>PR3 1</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PR3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>PR3</td>\n",
       "      <td>PR3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>863</td>\n",
       "      <td>PE2 9</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PE2</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>PE2</td>\n",
       "      <td>PE2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2180</td>\n",
       "      <td>LN5 8</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>LN5</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>LN5</td>\n",
       "      <td>LN5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2644</td>\n",
       "      <td>BD10 9</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>BD10</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>BD10</td>\n",
       "      <td>BD10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customerID cust_postcode         country outward1 inward1  outward1_len  \\\n",
       "0        245         L39 2  United Kingdom      L39       2             3   \n",
       "1        597         PR3 1  United Kingdom      PR3       1             3   \n",
       "2        863         PE2 9  United Kingdom      PE2       9             3   \n",
       "3       2180         LN5 8  United Kingdom      LN5       8             3   \n",
       "4       2644        BD10 9  United Kingdom     BD10       9             4   \n",
       "\n",
       "  outward2 outward3  \n",
       "0      L39      L39  \n",
       "1      PR3      PR3  \n",
       "2      PE2      PE2  \n",
       "3      LN5      LN5  \n",
       "4     BD10     BD10  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Making the outward codes in outward2 uppercase and storing in outward3 \n",
    "group1['outward3'] = group1['outward2'].str.upper()\n",
    "\n",
    "# Checking this has worked\n",
    "group1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e5e6bf6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>cust_postcode</th>\n",
       "      <th>country</th>\n",
       "      <th>outward1</th>\n",
       "      <th>inward1</th>\n",
       "      <th>outward1_len</th>\n",
       "      <th>outward2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>12259</td>\n",
       "      <td>W128</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>W128</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>W128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>14435</td>\n",
       "      <td>SG86</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>SG86</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>SG86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>30924</td>\n",
       "      <td>SM44</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>SM44</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>SM44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>31232</td>\n",
       "      <td>GL205</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>GL205</td>\n",
       "      <td>None</td>\n",
       "      <td>5</td>\n",
       "      <td>GL20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>39285</td>\n",
       "      <td>HU114</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>HU114</td>\n",
       "      <td>None</td>\n",
       "      <td>5</td>\n",
       "      <td>HU11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15528</th>\n",
       "      <td>875326</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15680</th>\n",
       "      <td>879752</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15845</th>\n",
       "      <td>885820</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18449</th>\n",
       "      <td>901313</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18471</th>\n",
       "      <td>901339</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>633 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerID cust_postcode         country outward1 inward1  outward1_len  \\\n",
       "29         12259          W128  United Kingdom     W128    None             4   \n",
       "35         14435          SG86  United Kingdom     SG86    None             4   \n",
       "97         30924          SM44  United Kingdom     SM44    None             4   \n",
       "103        31232         GL205  United Kingdom    GL205    None             5   \n",
       "149        39285         HU114  United Kingdom    HU114    None             5   \n",
       "...          ...           ...             ...      ...     ...           ...   \n",
       "15528     875326           NaN             NaN      NaN     NaN             0   \n",
       "15680     879752           NaN             NaN      NaN     NaN             0   \n",
       "15845     885820           NaN             NaN      NaN     NaN             0   \n",
       "18449     901313           NaN             NaN      NaN     NaN             0   \n",
       "18471     901339           NaN             NaN      NaN     NaN             0   \n",
       "\n",
       "      outward2  \n",
       "29        W128  \n",
       "35        SG86  \n",
       "97        SM44  \n",
       "103       GL20  \n",
       "149       HU11  \n",
       "...        ...  \n",
       "15528      NaN  \n",
       "15680      NaN  \n",
       "15845      NaN  \n",
       "18449      NaN  \n",
       "18471      NaN  \n",
       "\n",
       "[633 rows x 7 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating a subset consisting of postcodes with NO inward code\n",
    "group2 = customers2[customers2['inward1'].isnull()]\n",
    "\n",
    "# Viewing this subset\n",
    "group2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0b7b76c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 5, 3, 0, 2])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the unique values for outward1_len in this subset\n",
    "group2['outward1_len'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "260f7a43",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\221123964.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  group2['outward3'] = group2['outward1_len'] - 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>cust_postcode</th>\n",
       "      <th>country</th>\n",
       "      <th>outward1</th>\n",
       "      <th>inward1</th>\n",
       "      <th>outward1_len</th>\n",
       "      <th>outward2</th>\n",
       "      <th>outward3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12259</td>\n",
       "      <td>W128</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>W128</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>W128</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14435</td>\n",
       "      <td>SG86</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>SG86</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>SG86</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30924</td>\n",
       "      <td>SM44</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>SM44</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>SM44</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>31232</td>\n",
       "      <td>GL205</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>GL205</td>\n",
       "      <td>None</td>\n",
       "      <td>5</td>\n",
       "      <td>GL20</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>39285</td>\n",
       "      <td>HU114</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>HU114</td>\n",
       "      <td>None</td>\n",
       "      <td>5</td>\n",
       "      <td>HU11</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customerID cust_postcode         country outward1 inward1  outward1_len  \\\n",
       "0      12259          W128  United Kingdom     W128    None             4   \n",
       "1      14435          SG86  United Kingdom     SG86    None             4   \n",
       "2      30924          SM44  United Kingdom     SM44    None             4   \n",
       "3      31232         GL205  United Kingdom    GL205    None             5   \n",
       "4      39285         HU114  United Kingdom    HU114    None             5   \n",
       "\n",
       "  outward2  outward3  \n",
       "0     W128         3  \n",
       "1     SG86         3  \n",
       "2     SM44         3  \n",
       "3     GL20         4  \n",
       "4     HU11         4  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Resetting the index of the group2 DataFrame\n",
    "group2.reset_index(drop=True, inplace=True)\n",
    "\n",
    "# Creating a new column to store the number of characters we want from outward2 \n",
    "group2['outward3'] = group2['outward1_len'] - 1\n",
    "\n",
    "# Checking this has worked\n",
    "group2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d1b7dc89",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\2255490184.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  group2['outward3'][x] = str(group2['outward2'][x])[:y]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>cust_postcode</th>\n",
       "      <th>country</th>\n",
       "      <th>outward1</th>\n",
       "      <th>inward1</th>\n",
       "      <th>outward1_len</th>\n",
       "      <th>outward2</th>\n",
       "      <th>outward3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12259</td>\n",
       "      <td>W128</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>W128</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>W128</td>\n",
       "      <td>W12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14435</td>\n",
       "      <td>SG86</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>SG86</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>SG86</td>\n",
       "      <td>SG8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30924</td>\n",
       "      <td>SM44</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>SM44</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>SM44</td>\n",
       "      <td>SM4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>31232</td>\n",
       "      <td>GL205</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>GL205</td>\n",
       "      <td>None</td>\n",
       "      <td>5</td>\n",
       "      <td>GL20</td>\n",
       "      <td>GL20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>39285</td>\n",
       "      <td>HU114</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>HU114</td>\n",
       "      <td>None</td>\n",
       "      <td>5</td>\n",
       "      <td>HU11</td>\n",
       "      <td>HU11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customerID cust_postcode         country outward1 inward1  outward1_len  \\\n",
       "0      12259          W128  United Kingdom     W128    None             4   \n",
       "1      14435          SG86  United Kingdom     SG86    None             4   \n",
       "2      30924          SM44  United Kingdom     SM44    None             4   \n",
       "3      31232         GL205  United Kingdom    GL205    None             5   \n",
       "4      39285         HU114  United Kingdom    HU114    None             5   \n",
       "\n",
       "  outward2 outward3  \n",
       "0     W128      W12  \n",
       "1     SG86      SG8  \n",
       "2     SM44      SM4  \n",
       "3     GL20     GL20  \n",
       "4     HU11     HU11  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# For-loop to extract the desired number of characters from outward2\n",
    "# Storing these in the outward3 column\n",
    "for x in range(len(group2['outward2'])):\n",
    "    y = int(group2['outward1_len'][x] - 1)\n",
    "    group2['outward3'][x] = str(group2['outward2'][x])[:y]\n",
    "    \n",
    "# Checking this has worked\n",
    "group2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "97ca9d2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\4154466160.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  group2['outward4']=group2['outward3'].str.upper()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>cust_postcode</th>\n",
       "      <th>country</th>\n",
       "      <th>outward1</th>\n",
       "      <th>inward1</th>\n",
       "      <th>outward1_len</th>\n",
       "      <th>outward2</th>\n",
       "      <th>outward3</th>\n",
       "      <th>outward4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12259</td>\n",
       "      <td>W128</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>W128</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>W128</td>\n",
       "      <td>W12</td>\n",
       "      <td>W12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14435</td>\n",
       "      <td>SG86</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>SG86</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>SG86</td>\n",
       "      <td>SG8</td>\n",
       "      <td>SG8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30924</td>\n",
       "      <td>SM44</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>SM44</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>SM44</td>\n",
       "      <td>SM4</td>\n",
       "      <td>SM4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>31232</td>\n",
       "      <td>GL205</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>GL205</td>\n",
       "      <td>None</td>\n",
       "      <td>5</td>\n",
       "      <td>GL20</td>\n",
       "      <td>GL20</td>\n",
       "      <td>GL20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>39285</td>\n",
       "      <td>HU114</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>HU114</td>\n",
       "      <td>None</td>\n",
       "      <td>5</td>\n",
       "      <td>HU11</td>\n",
       "      <td>HU11</td>\n",
       "      <td>HU11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customerID cust_postcode         country outward1 inward1  outward1_len  \\\n",
       "0      12259          W128  United Kingdom     W128    None             4   \n",
       "1      14435          SG86  United Kingdom     SG86    None             4   \n",
       "2      30924          SM44  United Kingdom     SM44    None             4   \n",
       "3      31232         GL205  United Kingdom    GL205    None             5   \n",
       "4      39285         HU114  United Kingdom    HU114    None             5   \n",
       "\n",
       "  outward2 outward3 outward4  \n",
       "0     W128      W12      W12  \n",
       "1     SG86      SG8      SG8  \n",
       "2     SM44      SM4      SM4  \n",
       "3     GL20     GL20     GL20  \n",
       "4     HU11     HU11     HU11  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Making the outward codes in outward3 uppercase and storing in outward4\n",
    "group2['outward4']=group2['outward3'].str.upper()\n",
    "\n",
    "# Checking this has worked\n",
    "group2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9ec82e95",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\1730050835.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  group1_final.rename(columns = {'outward3':'outward_code'}, inplace=True)\n"
     ]
    }
   ],
   "source": [
    "# Selecting relevant columns to store in the final group1 DataFrame\n",
    "group1_final = group1[['customerID','country','outward3']]\n",
    "\n",
    "# Renamimg columns for this DataFrame\n",
    "group1_final.rename(columns = {'outward3':'outward_code'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0f629d9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\2702254180.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  group2_final.rename(columns = {'outward4':'outward_code'},inplace=True)\n"
     ]
    }
   ],
   "source": [
    "# Selecting relevant columns to store in the final group2 DataFrame\n",
    "group2_final = group2[['customerID','country','outward4']]\n",
    "\n",
    "# Renamimg columns for this DataFrame\n",
    "group2_final.rename(columns = {'outward4':'outward_code'},inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "64ec1959",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>country</th>\n",
       "      <th>outward_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>245</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>L39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>597</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PR3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>863</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PE2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2180</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>LN5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2644</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>BD10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customerID         country outward_code\n",
       "0        245  United Kingdom          L39\n",
       "1        597  United Kingdom          PR3\n",
       "2        863  United Kingdom          PE2\n",
       "3       2180  United Kingdom          LN5\n",
       "4       2644  United Kingdom         BD10"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Stacking the final DataFrames for group1 and group2\n",
    "customers_cleaned = pd.concat([group1_final, group2_final])\n",
    "\n",
    "# Viewing this DataFrame\n",
    "customers_cleaned.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e8aca6d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sorting out inconsitencies in the DataFrame:\n",
    "# Outward code always starts with a letter, replace 0 with O.\n",
    "# NE3 and TW1 contain a space in the beggining of the code, remove space.\n",
    "customers_cleaned['outward_code'] = customers_cleaned['outward_code'].replace(['0X15',' NE3',' TW1'],['OX15','NE3','TW1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ed40f89d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 18727 entries, 0 to 632\n",
      "Data columns (total 3 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   customerID    18727 non-null  object\n",
      " 1   country       18662 non-null  object\n",
      " 2   outward_code  18727 non-null  object\n",
      "dtypes: object(3)\n",
      "memory usage: 585.2+ KB\n"
     ]
    }
   ],
   "source": [
    "# Viewing the info for this cleaned DataFrame\n",
    "customers_cleaned.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7dba0a83",
   "metadata": {},
   "source": [
    "Now we want to identify coordinates for the postcodes. For this, we will utilise the following CSV file:\n",
    "***list of longitudes and latitudes based on outward codes***\n",
    "https://www.101computing.net/uk-postcode-distance-calculator/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "fe61990e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>outcode</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>AB10</td>\n",
       "      <td>57.131086</td>\n",
       "      <td>-2.122482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>AB11</td>\n",
       "      <td>57.131210</td>\n",
       "      <td>-2.082261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>AB12</td>\n",
       "      <td>57.098381</td>\n",
       "      <td>-2.172400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>AB13</td>\n",
       "      <td>57.108000</td>\n",
       "      <td>-2.237000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>AB14</td>\n",
       "      <td>57.101000</td>\n",
       "      <td>-2.270000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id outcode   latitude  longitude\n",
       "0   1    AB10  57.131086  -2.122482\n",
       "1   2    AB11  57.131210  -2.082261\n",
       "2   3    AB12  57.098381  -2.172400\n",
       "3   4    AB13  57.108000  -2.237000\n",
       "4   5    AB14  57.101000  -2.270000"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reading the Excel file of coordinate information into a Pandas DataFrame\n",
    "long_lat = pd.read_csv('UK-Postcodes.csv')\n",
    "\n",
    "# Viewing the DataFrame\n",
    "long_lat.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8c54cec2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>country</th>\n",
       "      <th>outward_code</th>\n",
       "      <th>id</th>\n",
       "      <th>outcode</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>245</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>L39</td>\n",
       "      <td>1404.0</td>\n",
       "      <td>L39</td>\n",
       "      <td>53.560045</td>\n",
       "      <td>-2.906784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>597</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PR3</td>\n",
       "      <td>2174.0</td>\n",
       "      <td>PR3</td>\n",
       "      <td>53.869000</td>\n",
       "      <td>-2.716000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>863</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PE2</td>\n",
       "      <td>2028.0</td>\n",
       "      <td>PE2</td>\n",
       "      <td>52.574173</td>\n",
       "      <td>-0.262489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2180</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>LN5</td>\n",
       "      <td>1554.0</td>\n",
       "      <td>LN5</td>\n",
       "      <td>53.156171</td>\n",
       "      <td>-0.583975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2644</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>BD10</td>\n",
       "      <td>156.0</td>\n",
       "      <td>BD10</td>\n",
       "      <td>53.827504</td>\n",
       "      <td>-1.724543</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customerID         country outward_code      id outcode   latitude  \\\n",
       "0        245  United Kingdom          L39  1404.0     L39  53.560045   \n",
       "1        597  United Kingdom          PR3  2174.0     PR3  53.869000   \n",
       "2        863  United Kingdom          PE2  2028.0     PE2  52.574173   \n",
       "3       2180  United Kingdom          LN5  1554.0     LN5  53.156171   \n",
       "4       2644  United Kingdom         BD10   156.0    BD10  53.827504   \n",
       "\n",
       "   longitude  \n",
       "0  -2.906784  \n",
       "1  -2.716000  \n",
       "2  -0.262489  \n",
       "3  -0.583975  \n",
       "4  -1.724543  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merging the long-lat and customers_cleaned DataFrames into a new one\n",
    "# Carrying out a left join to get a latitude and longitiude for each of our postcodes\n",
    "cust_loc = pd.merge(customers_cleaned, long_lat, \n",
    "                    left_on = 'outward_code',\n",
    "                    right_on = 'outcode',\n",
    "                    how = 'left')\n",
    "\n",
    "# Viewing this new DataFrame\n",
    "cust_loc.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "2ff9370a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>country</th>\n",
       "      <th>outward_code</th>\n",
       "      <th>id</th>\n",
       "      <th>outcode</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>coor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>245</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>L39</td>\n",
       "      <td>1404.0</td>\n",
       "      <td>L39</td>\n",
       "      <td>53.560045</td>\n",
       "      <td>-2.906784</td>\n",
       "      <td>(53.560045, -2.906784)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>597</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PR3</td>\n",
       "      <td>2174.0</td>\n",
       "      <td>PR3</td>\n",
       "      <td>53.869000</td>\n",
       "      <td>-2.716000</td>\n",
       "      <td>(53.869, -2.716)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>863</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PE2</td>\n",
       "      <td>2028.0</td>\n",
       "      <td>PE2</td>\n",
       "      <td>52.574173</td>\n",
       "      <td>-0.262489</td>\n",
       "      <td>(52.574173, -0.262489)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2180</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>LN5</td>\n",
       "      <td>1554.0</td>\n",
       "      <td>LN5</td>\n",
       "      <td>53.156171</td>\n",
       "      <td>-0.583975</td>\n",
       "      <td>(53.156171, -0.583975)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2644</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>BD10</td>\n",
       "      <td>156.0</td>\n",
       "      <td>BD10</td>\n",
       "      <td>53.827504</td>\n",
       "      <td>-1.724543</td>\n",
       "      <td>(53.827504, -1.724543)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customerID         country outward_code      id outcode   latitude  \\\n",
       "0        245  United Kingdom          L39  1404.0     L39  53.560045   \n",
       "1        597  United Kingdom          PR3  2174.0     PR3  53.869000   \n",
       "2        863  United Kingdom          PE2  2028.0     PE2  52.574173   \n",
       "3       2180  United Kingdom          LN5  1554.0     LN5  53.156171   \n",
       "4       2644  United Kingdom         BD10   156.0    BD10  53.827504   \n",
       "\n",
       "   longitude                    coor  \n",
       "0  -2.906784  (53.560045, -2.906784)  \n",
       "1  -2.716000        (53.869, -2.716)  \n",
       "2  -0.262489  (52.574173, -0.262489)  \n",
       "3  -0.583975  (53.156171, -0.583975)  \n",
       "4  -1.724543  (53.827504, -1.724543)  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating a new column to provide coordinates as required for Haversine.\n",
    "cust_loc['coor'] = list(zip(cust_loc['latitude'], cust_loc['longitude']))\n",
    "\n",
    "# Checking this has worked\n",
    "cust_loc.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7ad688dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>country</th>\n",
       "      <th>outward_code</th>\n",
       "      <th>coor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>245</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>L39</td>\n",
       "      <td>(53.560045, -2.906784)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>597</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PR3</td>\n",
       "      <td>(53.869, -2.716)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>863</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PE2</td>\n",
       "      <td>(52.574173, -0.262489)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2180</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>LN5</td>\n",
       "      <td>(53.156171, -0.583975)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2644</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>BD10</td>\n",
       "      <td>(53.827504, -1.724543)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customerID         country outward_code                    coor\n",
       "0        245  United Kingdom          L39  (53.560045, -2.906784)\n",
       "1        597  United Kingdom          PR3        (53.869, -2.716)\n",
       "2        863  United Kingdom          PE2  (52.574173, -0.262489)\n",
       "3       2180  United Kingdom          LN5  (53.156171, -0.583975)\n",
       "4       2644  United Kingdom         BD10  (53.827504, -1.724543)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dropping the irrelevant columns\n",
    "cust_loc.drop(['id','outcode','longitude','latitude'],axis=1,inplace=True)\n",
    "\n",
    "# Viewing the DataFrame\n",
    "cust_loc.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5b24462f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking for missing values\n",
    "cust_loc['coor'].isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ac70e1e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method Series.isna of 0        (53.560045, -2.906784)\n",
       "1              (53.869, -2.716)\n",
       "2        (52.574173, -0.262489)\n",
       "3        (53.156171, -0.583975)\n",
       "4        (53.827504, -1.724543)\n",
       "                  ...          \n",
       "18722                (nan, nan)\n",
       "18723                (nan, nan)\n",
       "18724                (nan, nan)\n",
       "18725                (nan, nan)\n",
       "18726                (nan, nan)\n",
       "Name: coor, Length: 18727, dtype: object>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking for missing coordinates\n",
    "cust_loc['coor'].isna"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "2ca23d47",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exporting the cust_loc DataFrame to a CSV file\n",
    "cust_loc.to_csv('cust_loc.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "83269ec5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Distribution_Centres</th>\n",
       "      <th>kite_outward</th>\n",
       "      <th>kite_inward</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>North East &amp; Scotland</td>\n",
       "      <td>NE10</td>\n",
       "      <td>8YG</td>\n",
       "      <td>54.946321</td>\n",
       "      <td>-1.552178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>North West</td>\n",
       "      <td>OL11</td>\n",
       "      <td>2PU</td>\n",
       "      <td>53.606000</td>\n",
       "      <td>-2.174000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Yorkshire</td>\n",
       "      <td>S65</td>\n",
       "      <td>3SH</td>\n",
       "      <td>53.444150</td>\n",
       "      <td>-1.303736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Midlands</td>\n",
       "      <td>CV4</td>\n",
       "      <td>9AJ</td>\n",
       "      <td>52.390339</td>\n",
       "      <td>-1.560660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>South West, Thames Valley &amp; South Wales</td>\n",
       "      <td>SN3</td>\n",
       "      <td>4DE</td>\n",
       "      <td>51.569886</td>\n",
       "      <td>-1.745900</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Distribution_Centres kite_outward kite_inward  \\\n",
       "0                    North East & Scotland         NE10         8YG   \n",
       "1                               North West         OL11         2PU   \n",
       "2                                Yorkshire          S65         3SH   \n",
       "3                                 Midlands          CV4         9AJ   \n",
       "4  South West, Thames Valley & South Wales          SN3         4DE   \n",
       "\n",
       "    latitude  longitude  \n",
       "0  54.946321  -1.552178  \n",
       "1  53.606000  -2.174000  \n",
       "2  53.444150  -1.303736  \n",
       "3  52.390339  -1.560660  \n",
       "4  51.569886  -1.745900  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Loading the CSV file listing Kite's 8 distribution centres and coordinates\n",
    "kite_loc = pd.read_csv('kitepostcode.csv')\n",
    "\n",
    "# Viewing the DataFrame\n",
    "kite_loc.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6ef5d312",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Distribution_Centres</th>\n",
       "      <th>kite_outward</th>\n",
       "      <th>kite_inward</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>coor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>North East &amp; Scotland</td>\n",
       "      <td>NE10</td>\n",
       "      <td>8YG</td>\n",
       "      <td>54.946321</td>\n",
       "      <td>-1.552178</td>\n",
       "      <td>(54.946321, -1.552178)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>North West</td>\n",
       "      <td>OL11</td>\n",
       "      <td>2PU</td>\n",
       "      <td>53.606000</td>\n",
       "      <td>-2.174000</td>\n",
       "      <td>(53.606, -2.174)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Yorkshire</td>\n",
       "      <td>S65</td>\n",
       "      <td>3SH</td>\n",
       "      <td>53.444150</td>\n",
       "      <td>-1.303736</td>\n",
       "      <td>(53.44415, -1.303736)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Midlands</td>\n",
       "      <td>CV4</td>\n",
       "      <td>9AJ</td>\n",
       "      <td>52.390339</td>\n",
       "      <td>-1.560660</td>\n",
       "      <td>(52.390339, -1.56066)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>South West, Thames Valley &amp; South Wales</td>\n",
       "      <td>SN3</td>\n",
       "      <td>4DE</td>\n",
       "      <td>51.569886</td>\n",
       "      <td>-1.745900</td>\n",
       "      <td>(51.569886, -1.7459)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Distribution_Centres kite_outward kite_inward  \\\n",
       "0                    North East & Scotland         NE10         8YG   \n",
       "1                               North West         OL11         2PU   \n",
       "2                                Yorkshire          S65         3SH   \n",
       "3                                 Midlands          CV4         9AJ   \n",
       "4  South West, Thames Valley & South Wales          SN3         4DE   \n",
       "\n",
       "    latitude  longitude                    coor  \n",
       "0  54.946321  -1.552178  (54.946321, -1.552178)  \n",
       "1  53.606000  -2.174000        (53.606, -2.174)  \n",
       "2  53.444150  -1.303736   (53.44415, -1.303736)  \n",
       "3  52.390339  -1.560660   (52.390339, -1.56066)  \n",
       "4  51.569886  -1.745900    (51.569886, -1.7459)  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a new column to provide coordinates as required for Haversine\n",
    "kite_loc['coor'] = list(zip(kite_loc['latitude'],kite_loc['longitude']))\n",
    "\n",
    "# Viewing the DataFrame\n",
    "kite_loc.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5cab70e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Distribution_Centres</th>\n",
       "      <th>kite_outward</th>\n",
       "      <th>coor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>North East &amp; Scotland</td>\n",
       "      <td>NE10</td>\n",
       "      <td>(54.946321, -1.552178)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>North West</td>\n",
       "      <td>OL11</td>\n",
       "      <td>(53.606, -2.174)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Yorkshire</td>\n",
       "      <td>S65</td>\n",
       "      <td>(53.44415, -1.303736)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Midlands</td>\n",
       "      <td>CV4</td>\n",
       "      <td>(52.390339, -1.56066)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>South West, Thames Valley &amp; South Wales</td>\n",
       "      <td>SN3</td>\n",
       "      <td>(51.569886, -1.7459)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Distribution_Centres kite_outward  \\\n",
       "0                    North East & Scotland         NE10   \n",
       "1                               North West         OL11   \n",
       "2                                Yorkshire          S65   \n",
       "3                                 Midlands          CV4   \n",
       "4  South West, Thames Valley & South Wales          SN3   \n",
       "\n",
       "                     coor  \n",
       "0  (54.946321, -1.552178)  \n",
       "1        (53.606, -2.174)  \n",
       "2   (53.44415, -1.303736)  \n",
       "3   (52.390339, -1.56066)  \n",
       "4    (51.569886, -1.7459)  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dropping irrelevant columns\n",
    "kite_loc.drop(['latitude','kite_inward','longitude'], axis=1, inplace=True)\n",
    "\n",
    "# Viewing the DataFrame\n",
    "kite_loc.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0262c17",
   "metadata": {},
   "source": [
    "### Calculating the distance of customers' location from each of Kite's distribution centers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "8bf80dab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defining a function to calculate the distance between two locations \n",
    "# loc1 = customers location\n",
    "# loc2 = Kite's North East & Scotland distribution center\n",
    "\n",
    "def distance_from(loc1,loc2): \n",
    "    dist=hs.haversine(loc1,loc2,unit=Unit.MILES)\n",
    "    return round(dist,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "714c6c0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Running a for loop which will parse customers location one by one to distance from function \n",
    "for _,row in kite_loc.iterrows():\n",
    "    cust_loc[row.Distribution_Centres]=cust_loc['coor'].apply(lambda x: distance_from(row.coor,x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "9671fa4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>country</th>\n",
       "      <th>outward_code</th>\n",
       "      <th>coor</th>\n",
       "      <th>North East &amp; Scotland</th>\n",
       "      <th>North West</th>\n",
       "      <th>Yorkshire</th>\n",
       "      <th>Midlands</th>\n",
       "      <th>South West, Thames Valley &amp; South Wales</th>\n",
       "      <th>South Coast</th>\n",
       "      <th>North London &amp; East Anglia</th>\n",
       "      <th>South East</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>245</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>L39</td>\n",
       "      <td>(53.560045, -2.906784)</td>\n",
       "      <td>110.29</td>\n",
       "      <td>30.22</td>\n",
       "      <td>66.36</td>\n",
       "      <td>98.32</td>\n",
       "      <td>145.89</td>\n",
       "      <td>204.95</td>\n",
       "      <td>156.69</td>\n",
       "      <td>216.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>597</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PR3</td>\n",
       "      <td>(53.869, -2.716)</td>\n",
       "      <td>87.92</td>\n",
       "      <td>28.65</td>\n",
       "      <td>64.85</td>\n",
       "      <td>112.83</td>\n",
       "      <td>163.96</td>\n",
       "      <td>222.09</td>\n",
       "      <td>166.97</td>\n",
       "      <td>226.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>863</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>PE2</td>\n",
       "      <td>(52.574173, -0.262489)</td>\n",
       "      <td>172.15</td>\n",
       "      <td>106.64</td>\n",
       "      <td>74.07</td>\n",
       "      <td>56.08</td>\n",
       "      <td>93.72</td>\n",
       "      <td>126.19</td>\n",
       "      <td>41.43</td>\n",
       "      <td>94.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2180</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>LN5</td>\n",
       "      <td>(53.156171, -0.583975)</td>\n",
       "      <td>129.77</td>\n",
       "      <td>72.53</td>\n",
       "      <td>35.77</td>\n",
       "      <td>66.83</td>\n",
       "      <td>120.06</td>\n",
       "      <td>162.92</td>\n",
       "      <td>82.99</td>\n",
       "      <td>137.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2644</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>BD10</td>\n",
       "      <td>(53.827504, -1.724543)</td>\n",
       "      <td>77.61</td>\n",
       "      <td>23.92</td>\n",
       "      <td>31.60</td>\n",
       "      <td>99.53</td>\n",
       "      <td>155.99</td>\n",
       "      <td>209.87</td>\n",
       "      <td>142.42</td>\n",
       "      <td>200.17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customerID         country outward_code                    coor  \\\n",
       "0        245  United Kingdom          L39  (53.560045, -2.906784)   \n",
       "1        597  United Kingdom          PR3        (53.869, -2.716)   \n",
       "2        863  United Kingdom          PE2  (52.574173, -0.262489)   \n",
       "3       2180  United Kingdom          LN5  (53.156171, -0.583975)   \n",
       "4       2644  United Kingdom         BD10  (53.827504, -1.724543)   \n",
       "\n",
       "   North East & Scotland  North West  Yorkshire  Midlands  \\\n",
       "0                 110.29       30.22      66.36     98.32   \n",
       "1                  87.92       28.65      64.85    112.83   \n",
       "2                 172.15      106.64      74.07     56.08   \n",
       "3                 129.77       72.53      35.77     66.83   \n",
       "4                  77.61       23.92      31.60     99.53   \n",
       "\n",
       "   South West, Thames Valley & South Wales  South Coast  \\\n",
       "0                                   145.89       204.95   \n",
       "1                                   163.96       222.09   \n",
       "2                                    93.72       126.19   \n",
       "3                                   120.06       162.92   \n",
       "4                                   155.99       209.87   \n",
       "\n",
       "   North London & East Anglia  South East  \n",
       "0                      156.69      216.59  \n",
       "1                      166.97      226.61  \n",
       "2                       41.43       94.95  \n",
       "3                       82.99      137.01  \n",
       "4                      142.42      200.17  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Viewing the DataFrame\n",
    "cust_loc.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2987a4d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>outward_code</th>\n",
       "      <th>North East &amp; Scotland</th>\n",
       "      <th>North West</th>\n",
       "      <th>Yorkshire</th>\n",
       "      <th>Midlands</th>\n",
       "      <th>South West, Thames Valley &amp; South Wales</th>\n",
       "      <th>South Coast</th>\n",
       "      <th>North London &amp; East Anglia</th>\n",
       "      <th>South East</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>245</td>\n",
       "      <td>L39</td>\n",
       "      <td>110.29</td>\n",
       "      <td>30.22</td>\n",
       "      <td>66.36</td>\n",
       "      <td>98.32</td>\n",
       "      <td>145.89</td>\n",
       "      <td>204.95</td>\n",
       "      <td>156.69</td>\n",
       "      <td>216.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>597</td>\n",
       "      <td>PR3</td>\n",
       "      <td>87.92</td>\n",
       "      <td>28.65</td>\n",
       "      <td>64.85</td>\n",
       "      <td>112.83</td>\n",
       "      <td>163.96</td>\n",
       "      <td>222.09</td>\n",
       "      <td>166.97</td>\n",
       "      <td>226.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>863</td>\n",
       "      <td>PE2</td>\n",
       "      <td>172.15</td>\n",
       "      <td>106.64</td>\n",
       "      <td>74.07</td>\n",
       "      <td>56.08</td>\n",
       "      <td>93.72</td>\n",
       "      <td>126.19</td>\n",
       "      <td>41.43</td>\n",
       "      <td>94.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2180</td>\n",
       "      <td>LN5</td>\n",
       "      <td>129.77</td>\n",
       "      <td>72.53</td>\n",
       "      <td>35.77</td>\n",
       "      <td>66.83</td>\n",
       "      <td>120.06</td>\n",
       "      <td>162.92</td>\n",
       "      <td>82.99</td>\n",
       "      <td>137.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2644</td>\n",
       "      <td>BD10</td>\n",
       "      <td>77.61</td>\n",
       "      <td>23.92</td>\n",
       "      <td>31.60</td>\n",
       "      <td>99.53</td>\n",
       "      <td>155.99</td>\n",
       "      <td>209.87</td>\n",
       "      <td>142.42</td>\n",
       "      <td>200.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18722</th>\n",
       "      <td>875326</td>\n",
       "      <td>NA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18723</th>\n",
       "      <td>879752</td>\n",
       "      <td>NA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18724</th>\n",
       "      <td>885820</td>\n",
       "      <td>NA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18725</th>\n",
       "      <td>901313</td>\n",
       "      <td>NA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18726</th>\n",
       "      <td>901339</td>\n",
       "      <td>NA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18727 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerID outward_code  North East & Scotland  North West  Yorkshire  \\\n",
       "0            245          L39                 110.29       30.22      66.36   \n",
       "1            597          PR3                  87.92       28.65      64.85   \n",
       "2            863          PE2                 172.15      106.64      74.07   \n",
       "3           2180          LN5                 129.77       72.53      35.77   \n",
       "4           2644         BD10                  77.61       23.92      31.60   \n",
       "...          ...          ...                    ...         ...        ...   \n",
       "18722     875326           NA                    NaN         NaN        NaN   \n",
       "18723     879752           NA                    NaN         NaN        NaN   \n",
       "18724     885820           NA                    NaN         NaN        NaN   \n",
       "18725     901313           NA                    NaN         NaN        NaN   \n",
       "18726     901339           NA                    NaN         NaN        NaN   \n",
       "\n",
       "       Midlands  South West, Thames Valley & South Wales  South Coast  \\\n",
       "0         98.32                                   145.89       204.95   \n",
       "1        112.83                                   163.96       222.09   \n",
       "2         56.08                                    93.72       126.19   \n",
       "3         66.83                                   120.06       162.92   \n",
       "4         99.53                                   155.99       209.87   \n",
       "...         ...                                      ...          ...   \n",
       "18722       NaN                                      NaN          NaN   \n",
       "18723       NaN                                      NaN          NaN   \n",
       "18724       NaN                                      NaN          NaN   \n",
       "18725       NaN                                      NaN          NaN   \n",
       "18726       NaN                                      NaN          NaN   \n",
       "\n",
       "       North London & East Anglia  South East  \n",
       "0                          156.69      216.59  \n",
       "1                          166.97      226.61  \n",
       "2                           41.43       94.95  \n",
       "3                           82.99      137.01  \n",
       "4                          142.42      200.17  \n",
       "...                           ...         ...  \n",
       "18722                         NaN         NaN  \n",
       "18723                         NaN         NaN  \n",
       "18724                         NaN         NaN  \n",
       "18725                         NaN         NaN  \n",
       "18726                         NaN         NaN  \n",
       "\n",
       "[18727 rows x 10 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dropping irrelevant columns\n",
    "cust_loc2 = cust_loc.drop(columns=['country', 'coor'])\n",
    "\n",
    "# Viewing the DataFrame\n",
    "cust_loc2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6c75c256",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>outward_code</th>\n",
       "      <th>customerID</th>\n",
       "      <th>dist_centres</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>L39</td>\n",
       "      <td>245</td>\n",
       "      <td>North East &amp; Scotland</td>\n",
       "      <td>110.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PR3</td>\n",
       "      <td>597</td>\n",
       "      <td>North East &amp; Scotland</td>\n",
       "      <td>87.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PE2</td>\n",
       "      <td>863</td>\n",
       "      <td>North East &amp; Scotland</td>\n",
       "      <td>172.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>LN5</td>\n",
       "      <td>2180</td>\n",
       "      <td>North East &amp; Scotland</td>\n",
       "      <td>129.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BD10</td>\n",
       "      <td>2644</td>\n",
       "      <td>North East &amp; Scotland</td>\n",
       "      <td>77.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149811</th>\n",
       "      <td>NA</td>\n",
       "      <td>875326</td>\n",
       "      <td>South East</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149812</th>\n",
       "      <td>NA</td>\n",
       "      <td>879752</td>\n",
       "      <td>South East</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149813</th>\n",
       "      <td>NA</td>\n",
       "      <td>885820</td>\n",
       "      <td>South East</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149814</th>\n",
       "      <td>NA</td>\n",
       "      <td>901313</td>\n",
       "      <td>South East</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149815</th>\n",
       "      <td>NA</td>\n",
       "      <td>901339</td>\n",
       "      <td>South East</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>149816 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       outward_code customerID           dist_centres  distance\n",
       "0               L39        245  North East & Scotland    110.29\n",
       "1               PR3        597  North East & Scotland     87.92\n",
       "2               PE2        863  North East & Scotland    172.15\n",
       "3               LN5       2180  North East & Scotland    129.77\n",
       "4              BD10       2644  North East & Scotland     77.61\n",
       "...             ...        ...                    ...       ...\n",
       "149811           NA     875326             South East       NaN\n",
       "149812           NA     879752             South East       NaN\n",
       "149813           NA     885820             South East       NaN\n",
       "149814           NA     901313             South East       NaN\n",
       "149815           NA     901339             South East       NaN\n",
       "\n",
       "[149816 rows x 4 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Melting the DataFrame\n",
    "cust_kite = cust_loc2.melt(id_vars = ['outward_code','customerID'],\n",
    "                           var_name = 'dist_centres',\n",
    "                           value_name = 'distance')\n",
    "\n",
    "# Checking this has worked\n",
    "cust_kite"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "0f234311",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>outward_code</th>\n",
       "      <th>customerID</th>\n",
       "      <th>dist_centres</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DL8</td>\n",
       "      <td>2926</td>\n",
       "      <td>North East &amp; Scotland</td>\n",
       "      <td>46.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>NE24</td>\n",
       "      <td>6068</td>\n",
       "      <td>North East &amp; Scotland</td>\n",
       "      <td>12.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>DL8</td>\n",
       "      <td>24990</td>\n",
       "      <td>North East &amp; Scotland</td>\n",
       "      <td>46.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>264</th>\n",
       "      <td>TS6</td>\n",
       "      <td>55290</td>\n",
       "      <td>North East &amp; Scotland</td>\n",
       "      <td>30.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306</th>\n",
       "      <td>DH4</td>\n",
       "      <td>62942</td>\n",
       "      <td>North East &amp; Scotland</td>\n",
       "      <td>7.40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    outward_code customerID           dist_centres  distance\n",
       "8            DL8       2926  North East & Scotland     46.10\n",
       "13          NE24       6068  North East & Scotland     12.75\n",
       "62           DL8      24990  North East & Scotland     46.10\n",
       "264          TS6      55290  North East & Scotland     30.53\n",
       "306          DH4      62942  North East & Scotland      7.40"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filtering the DataFrame to locations within a 50 miles radius\n",
    "cust_kite_50m = cust_kite[cust_kite['distance'] <= 50]\n",
    "\n",
    "# Viewing the DataFrame\n",
    "cust_kite_50m.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "c34d0b41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18727\n",
      "15279\n"
     ]
    }
   ],
   "source": [
    "# Checking the count of unique customerID and WebsiteID\n",
    "print(cust_kite['customerID'].nunique())\n",
    "print(cust_kite_50m['customerID'].nunique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "b93acafc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  customerID_50\n",
      "0          2926\n",
      "1          6068\n",
      "2         24990\n",
      "3         55290\n",
      "4         62942\n",
      "customerID_50    15279\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Determining a unique list of customer IDs within the radius of 50 M of one of the distribution centres\n",
    "in_50mi = pd.DataFrame(cust_kite_50m['customerID'].unique().tolist())\n",
    "\n",
    "# Renaming columns for this DataFrame\n",
    "in_50mi.rename(columns = {0:'customerID_50'},inplace=True)\n",
    "\n",
    "# Viewing the DataFrame\n",
    "print(in_50mi.head())\n",
    "\n",
    "# Checking the number of unique customer IDs in this DataFrame\n",
    "print(in_50mi.nunique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ecd33638",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   outward_code customerID                             dist_centres  distance  \\\n",
      "48         LA11       2782                    North East & Scotland     73.97   \n",
      "49         LA11       2782                               North West     52.75   \n",
      "50         LA11       2782                                Yorkshire     85.45   \n",
      "51         LA11       2782                                 Midlands    138.93   \n",
      "52         LA11       2782  South West, Thames Valley & South Wales    190.16   \n",
      "\n",
      "   customerID_50  \n",
      "48           NaN  \n",
      "49           NaN  \n",
      "50           NaN  \n",
      "51           NaN  \n",
      "52           NaN  \n",
      "outward_code      697\n",
      "customerID       3448\n",
      "dist_centres        8\n",
      "distance         5094\n",
      "customerID_50       0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Customers who are outside the 50 M radius of one of the distribution centers\n",
    "out_50mi = pd.merge(cust_kite, in_50mi,\n",
    "                    left_on = 'customerID',\n",
    "                    right_on = 'customerID_50',\n",
    "                    how = 'outer')\n",
    "\n",
    "# Filtering this DataFrame to list customer IDs which are not located within a 50 miles radius\n",
    "# of one of Kite's distribution centres.\n",
    "out_50mi = pd.DataFrame(out_50mi[out_50mi['customerID_50'].isnull()])\n",
    "\n",
    "# Viewing the DataFrame\n",
    "print(out_50mi.head())\n",
    "\n",
    "# Checking the number of unique customer IDs in this DataFrame\n",
    "print(out_50mi.nunique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "25bf3293",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18727"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking that the number of unique customer IDs in both DataFrames add up to\n",
    "# the total number of unique customer IDs\n",
    "in_50mi['customerID_50'].nunique() + out_50mi['customerID'].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a67dc2c",
   "metadata": {},
   "source": [
    "# "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "335fb43d",
   "metadata": {},
   "source": [
    "##  Order Details Sheet"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c635c9f6",
   "metadata": {},
   "source": [
    "**'Order Details' sheet data cleaning methodology:**\n",
    "<br>\n",
    "\n",
    "1. We checked data types and found no issues.\n",
    "<br>\n",
    "\n",
    "2. We checked for duplicates and found 10. The duplicates were viewed and cross checked against the ‘Order’ data set. For the duplicated rows, the total value of the order was looked at relative to the components of the ‘Order Details’. This revealed that there were no ‘true’ duplicates in the data, with those rows showing identical entries both existing with the order.\n",
    "<br>\n",
    "3. We identified null values in the ‘LineWeight’ and the ‘CubicMPerUnit’ columns. For the ‘LineWeight’ column, we noted that this was based on the number of ‘Packs’ multiplied by the ‘PackWeight’. We used this equation to replace the missing values.\n",
    "<br>\n",
    "4. For the missing values in the ‘CubicMPerUnit’ column, we took a two-pronged approach. First,  we removed rows where ‘PalletQuantity’ was equal to zero, as these were almost entirely sample or custom products and were a very small subset of the overall Order Details data set (1.4%).  Second, for the remaining null values, we replaced them using on a formula based on the assumption of a pallet size of 1.2m3. We used this along with the ‘PalletQuantity’ to back out a value for the ‘CubicMPerUnit’.\n",
    "<br>\n",
    "5. We checked for the descriptive statistics columns of the numerical columns to check for potential outliers. There was one significant outlier in the ‘Pallet_per_line’ column. The outlier was identified and removed from the data set. While the data point may be valid, we felt that as a single data point among over 60,000 rows of data it was not representative of orders typically delivered and therefore should not be included in analysis as it may skew insights and calculations, in turn potentially leading to inaccurate conclusions.\n",
    "<br>\n",
    "6. We renamed some columns to simplify them. \n",
    "<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "bca2b11d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Decrypting the Excel file to open it in Python\n",
    "# Looking at the Order Details sheet\n",
    "file_name = \"kite_orders_data.xlsx\"\n",
    "sheet_name = \"Order Details\"\n",
    "password = \"FRMay23\"\n",
    "\n",
    "with open(file_name, \"rb\") as file:\n",
    "    decryptor = msoffcrypto.OfficeFile(file)\n",
    "    decryptor.load_key(password=password)\n",
    "    decrypted_data = io.BytesIO()\n",
    "    decryptor.decrypt(decrypted_data)\n",
    "    decrypted_data.seek(0)\n",
    "\n",
    "    # Storing the sheet in a Pandas DataFrame called order_details\n",
    "    orders_details = pd.read_excel(decrypted_data, sheet_name=sheet_name, engine='openpyxl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "5ab65edc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>PartNumber</th>\n",
       "      <th>Description</th>\n",
       "      <th>Packs</th>\n",
       "      <th>PackPrice</th>\n",
       "      <th>UnitsPerPack</th>\n",
       "      <th>PackWeight</th>\n",
       "      <th>LineWeight</th>\n",
       "      <th>PalletQuantity</th>\n",
       "      <th>CubicMPerUnit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CDW241818M</td>\n",
       "      <td>Double wall boxes - 24x18x18 inches (610x457x4...</td>\n",
       "      <td>1</td>\n",
       "      <td>52.44</td>\n",
       "      <td>20</td>\n",
       "      <td>20.98</td>\n",
       "      <td>20.98</td>\n",
       "      <td>140</td>\n",
       "      <td>0.009683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW090606M-P30</td>\n",
       "      <td>Single wall cardboard boxes - 9x6x6 inches (22...</td>\n",
       "      <td>1</td>\n",
       "      <td>7.20</td>\n",
       "      <td>30</td>\n",
       "      <td>2.11</td>\n",
       "      <td>2.11</td>\n",
       "      <td>3600</td>\n",
       "      <td>0.000435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW120909M</td>\n",
       "      <td>Single wall cardboard boxes - 12x9x9 inches (3...</td>\n",
       "      <td>1</td>\n",
       "      <td>10.38</td>\n",
       "      <td>30</td>\n",
       "      <td>5.04</td>\n",
       "      <td>5.04</td>\n",
       "      <td>1800</td>\n",
       "      <td>0.000910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW120906M-P30</td>\n",
       "      <td>Single wall cardboard boxes - 12x9x6 inches (3...</td>\n",
       "      <td>1</td>\n",
       "      <td>8.08</td>\n",
       "      <td>25</td>\n",
       "      <td>3.65</td>\n",
       "      <td>3.65</td>\n",
       "      <td>2100</td>\n",
       "      <td>0.000911</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CDW181212M</td>\n",
       "      <td>Double wall boxes - 18x12x12 inches (457x305x3...</td>\n",
       "      <td>1</td>\n",
       "      <td>24.95</td>\n",
       "      <td>20</td>\n",
       "      <td>9.02</td>\n",
       "      <td>9.02</td>\n",
       "      <td>560</td>\n",
       "      <td>0.004687</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderID      PartNumber                                        Description  \\\n",
       "0  2275137      CDW241818M  Double wall boxes - 24x18x18 inches (610x457x4...   \n",
       "1  2275137  CSW090606M-P30  Single wall cardboard boxes - 9x6x6 inches (22...   \n",
       "2  2275137      CSW120909M  Single wall cardboard boxes - 12x9x9 inches (3...   \n",
       "3  2275137  CSW120906M-P30  Single wall cardboard boxes - 12x9x6 inches (3...   \n",
       "4  2275137      CDW181212M  Double wall boxes - 18x12x12 inches (457x305x3...   \n",
       "\n",
       "   Packs  PackPrice  UnitsPerPack  PackWeight  LineWeight  PalletQuantity  \\\n",
       "0      1      52.44            20       20.98       20.98             140   \n",
       "1      1       7.20            30        2.11        2.11            3600   \n",
       "2      1      10.38            30        5.04        5.04            1800   \n",
       "3      1       8.08            25        3.65        3.65            2100   \n",
       "4      1      24.95            20        9.02        9.02             560   \n",
       "\n",
       "   CubicMPerUnit  \n",
       "0       0.009683  \n",
       "1       0.000435  \n",
       "2       0.000910  \n",
       "3       0.000911  \n",
       "4       0.004687  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Viewing the order_details DataFrame\n",
    "orders_details.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "2bc3c442",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60818, 10)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Determining the shape of the DataFrame\n",
    "orders_details.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "cca5ece7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderID              0\n",
       "PartNumber           0\n",
       "Description          0\n",
       "Packs                0\n",
       "PackPrice            0\n",
       "UnitsPerPack         0\n",
       "PackWeight           0\n",
       "LineWeight         134\n",
       "PalletQuantity       0\n",
       "CubicMPerUnit     3182\n",
       "dtype: int64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking for any missing values\n",
    "orders_details.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48d91df4",
   "metadata": {},
   "source": [
    "There are 134 missing (NULL) values in the LineWeight column and 3182 in the CubicMPerUnit column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "d4b28125",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of duplicates: 10\n"
     ]
    }
   ],
   "source": [
    "# Checking for duplicates\n",
    "duplicates = orders_details.duplicated()\n",
    "print(\"Number of duplicates:\", duplicates.sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da9db666",
   "metadata": {},
   "source": [
    "There are 10 duplicates. We need to view the duplicates in order to ascertain whether they are in fact 'true' duplicates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "074ed446",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       OrderID          PartNumber  \\\n",
      "4599   2277059           CDW201212   \n",
      "8807   2278762          CDW241818M   \n",
      "18432  2282608           CSW141414   \n",
      "32640  2288357           CDW181824   \n",
      "38370  2290632          CDW161616M   \n",
      "40124  2291347  TPW048066A-1C-L-P1   \n",
      "40245  2291403  TPW048066A-1C-L-P1   \n",
      "55277  2297249           CDW101010   \n",
      "58908  2298728          CDW161616M   \n",
      "59828  2299116                 AK5   \n",
      "\n",
      "                                             Description  Packs  PackPrice  \\\n",
      "4599   Double wall boxes - 20x12x12 inches (508x305x3...      5      20.86   \n",
      "8807   Double wall boxes - 24x18x18 inches (610x457x4...      1      41.12   \n",
      "18432  Single wall cardboard boxes - 14x14x14 inches ...      3      22.62   \n",
      "32640  Double wall boxes - 18x18x24 inches (457x457x6...      1      20.69   \n",
      "38370  Double wall boxes - 16x16x16 inches (406x406x4...      1      28.10   \n",
      "40124  Custom printed tape 48mm x 66m - white acrylic...      1     190.80   \n",
      "40245  Custom printed tape 48mm x 66m - white acrylic...      1     190.80   \n",
      "55277  Double wall boxes - 10x10x10 inches (254x254x2...      4      11.65   \n",
      "58908  Double wall boxes - 16x16x16 inches (406x406x4...      2      28.10   \n",
      "59828  Jiffy AirKraft bubble lined envelopes, size 5 ...      5       9.07   \n",
      "\n",
      "       UnitsPerPack  PackWeight  LineWeight  PalletQuantity  CubicMPerUnit  \n",
      "4599             20        9.60       48.00             280       0.002479  \n",
      "8807             20       20.98       20.98             140       0.009683  \n",
      "18432            30        7.29       21.87             600       0.002570  \n",
      "32640            10       12.20       12.20             110       0.012144  \n",
      "38370            20       12.64       12.64             140       0.006589  \n",
      "40124            72       10.37       10.37            3780            NaN  \n",
      "40245            72       10.37       10.37            3780            NaN  \n",
      "55277            20        5.10       20.40             480       0.002635  \n",
      "58908            20       12.64       25.28             140       0.006589  \n",
      "59828            50        1.21        6.05            1350       0.000450  \n"
     ]
    }
   ],
   "source": [
    "# Viewing the duplicates\n",
    "duplicate_rows = orders_details[duplicates]\n",
    "print(duplicate_rows)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e08d9ce8",
   "metadata": {},
   "source": [
    "The ten duplicates were cross checked against the 'Orders' data set. For the duplicated rows, the total value of the order was looked at relative to the components in the 'Orders Details'. This revealed that there were no 'true' duplicates in the data, with those rows showing identical products both existing within an order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "eba47a3a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 60818 entries, 0 to 60817\n",
      "Data columns (total 10 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   OrderID         60818 non-null  int64  \n",
      " 1   PartNumber      60818 non-null  object \n",
      " 2   Description     60818 non-null  object \n",
      " 3   Packs           60818 non-null  int64  \n",
      " 4   PackPrice       60818 non-null  float64\n",
      " 5   UnitsPerPack    60818 non-null  int64  \n",
      " 6   PackWeight      60818 non-null  float64\n",
      " 7   LineWeight      60684 non-null  float64\n",
      " 8   PalletQuantity  60818 non-null  int64  \n",
      " 9   CubicMPerUnit   57636 non-null  float64\n",
      "dtypes: float64(4), int64(4), object(2)\n",
      "memory usage: 4.6+ MB\n"
     ]
    }
   ],
   "source": [
    "# Exploring the metadata of the DataFrame\n",
    "orders_details.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e0c73dd",
   "metadata": {},
   "source": [
    "All the data types are formatted correctly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "565a704c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>Packs</th>\n",
       "      <th>PackPrice</th>\n",
       "      <th>UnitsPerPack</th>\n",
       "      <th>PackWeight</th>\n",
       "      <th>LineWeight</th>\n",
       "      <th>PalletQuantity</th>\n",
       "      <th>CubicMPerUnit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6.081800e+04</td>\n",
       "      <td>60818.000000</td>\n",
       "      <td>60818.000000</td>\n",
       "      <td>60818.000000</td>\n",
       "      <td>60818.000000</td>\n",
       "      <td>60684.000000</td>\n",
       "      <td>6.081800e+04</td>\n",
       "      <td>57636.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.287397e+06</td>\n",
       "      <td>6.147983</td>\n",
       "      <td>27.634708</td>\n",
       "      <td>84.603144</td>\n",
       "      <td>6.629667</td>\n",
       "      <td>29.862601</td>\n",
       "      <td>2.314166e+04</td>\n",
       "      <td>0.032742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7.015417e+03</td>\n",
       "      <td>45.072311</td>\n",
       "      <td>76.533757</td>\n",
       "      <td>230.386829</td>\n",
       "      <td>20.126841</td>\n",
       "      <td>87.795549</td>\n",
       "      <td>9.483581e+04</td>\n",
       "      <td>0.109412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.275137e+06</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.281361e+06</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>10.140000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.850000</td>\n",
       "      <td>3.920000</td>\n",
       "      <td>2.250000e+02</td>\n",
       "      <td>0.000352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.287444e+06</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>18.410000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>1.200000e+03</td>\n",
       "      <td>0.001062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.293487e+06</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>30.660000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>8.750000</td>\n",
       "      <td>23.700000</td>\n",
       "      <td>3.780000e+03</td>\n",
       "      <td>0.005580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.299521e+06</td>\n",
       "      <td>6200.000000</td>\n",
       "      <td>4995.000000</td>\n",
       "      <td>10350.000000</td>\n",
       "      <td>759.000000</td>\n",
       "      <td>5308.800000</td>\n",
       "      <td>1.350000e+06</td>\n",
       "      <td>1.921920</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            OrderID         Packs     PackPrice  UnitsPerPack    PackWeight  \\\n",
       "count  6.081800e+04  60818.000000  60818.000000  60818.000000  60818.000000   \n",
       "mean   2.287397e+06      6.147983     27.634708     84.603144      6.629667   \n",
       "std    7.015417e+03     45.072311     76.533757    230.386829     20.126841   \n",
       "min    2.275137e+06      1.000000      0.000000      1.000000      0.000000   \n",
       "25%    2.281361e+06      1.000000     10.140000      6.000000      1.850000   \n",
       "50%    2.287444e+06      2.000000     18.410000     20.000000      4.500000   \n",
       "75%    2.293487e+06      5.000000     30.660000     50.000000      8.750000   \n",
       "max    2.299521e+06   6200.000000   4995.000000  10350.000000    759.000000   \n",
       "\n",
       "         LineWeight  PalletQuantity  CubicMPerUnit  \n",
       "count  60684.000000    6.081800e+04   57636.000000  \n",
       "mean      29.862601    2.314166e+04       0.032742  \n",
       "std       87.795549    9.483581e+04       0.109412  \n",
       "min        0.010000    0.000000e+00       0.000000  \n",
       "25%        3.920000    2.250000e+02       0.000352  \n",
       "50%        9.500000    1.200000e+03       0.001062  \n",
       "75%       23.700000    3.780000e+03       0.005580  \n",
       "max     5308.800000    1.350000e+06       1.921920  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Printing the descriptive statistics\n",
    "orders_details.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c40597cf",
   "metadata": {},
   "source": [
    "#### Replace null values in LineWeight column"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5837d181",
   "metadata": {},
   "source": [
    "There were 134 missing (NULL) values in the LineWeight column. The LineWeight is Packs * PackWeight. We can therefore eliminate the null values by defining a function to calculate the value based on the formula for the LineWeight."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "44bb2915",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replacing 134 null values in LineWeight column\n",
    "# based on multiplication of Packs and PackWeight. \n",
    "\n",
    "# Defining a function to calculate the value based on Packs and PackWeight\n",
    "def calculate_value(row):\n",
    "    if pd.isnull(row['LineWeight']):\n",
    "        return row['Packs'] * row['PackWeight']\n",
    "    else:\n",
    "        return row['LineWeight']\n",
    "\n",
    "# Applying the function to update the null values in LineWeight\n",
    "orders_details['LineWeight'] = orders_details.apply(calculate_value, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "01230f24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderID              0\n",
       "PartNumber           0\n",
       "Description          0\n",
       "Packs                0\n",
       "PackPrice            0\n",
       "UnitsPerPack         0\n",
       "PackWeight           0\n",
       "LineWeight           0\n",
       "PalletQuantity       0\n",
       "CubicMPerUnit     3182\n",
       "dtype: int64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the null values in LineWeight have been replaced \n",
    "orders_details.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbae7314",
   "metadata": {},
   "source": [
    "The 134 null values in the LineWeight column have now been replaced using the underlying formula and there are no outstanding missing values in the column. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1de70c4d",
   "metadata": {},
   "source": [
    "#### Delete rows where PalletQuantity is zero"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fdfaf07",
   "metadata": {},
   "source": [
    "The decision was made to remove rows (n=875) where PalletQuantity was equal to zero, as these were almost entirely sample or custom products. They represent a very small proportion of the data, just 1.4% of total orders."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "0360ab35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 59943 entries, 0 to 60817\n",
      "Data columns (total 10 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   OrderID         59943 non-null  int64  \n",
      " 1   PartNumber      59943 non-null  object \n",
      " 2   Description     59943 non-null  object \n",
      " 3   Packs           59943 non-null  int64  \n",
      " 4   PackPrice       59943 non-null  float64\n",
      " 5   UnitsPerPack    59943 non-null  int64  \n",
      " 6   PackWeight      59943 non-null  float64\n",
      " 7   LineWeight      59943 non-null  float64\n",
      " 8   PalletQuantity  59943 non-null  int64  \n",
      " 9   CubicMPerUnit   56818 non-null  float64\n",
      "dtypes: float64(4), int64(4), object(2)\n",
      "memory usage: 5.0+ MB\n"
     ]
    }
   ],
   "source": [
    "# Decision made to remove rows (n=875) where PalletQuantity = 0.\n",
    "# These are mainly sample or custom products. \n",
    "# Further calculations on orders and truck sizes will be based on pallet. \n",
    "\n",
    "orders_details = orders_details.drop(orders_details[orders_details['PalletQuantity'] == 0].index)\n",
    "\n",
    "orders_details.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "504e8de4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>PartNumber</th>\n",
       "      <th>Description</th>\n",
       "      <th>Packs</th>\n",
       "      <th>PackPrice</th>\n",
       "      <th>UnitsPerPack</th>\n",
       "      <th>PackWeight</th>\n",
       "      <th>LineWeight</th>\n",
       "      <th>PalletQuantity</th>\n",
       "      <th>CubicMPerUnit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CDW241818M</td>\n",
       "      <td>Double wall boxes - 24x18x18 inches (610x457x4...</td>\n",
       "      <td>1</td>\n",
       "      <td>52.44</td>\n",
       "      <td>20</td>\n",
       "      <td>20.98</td>\n",
       "      <td>20.98</td>\n",
       "      <td>140</td>\n",
       "      <td>0.009683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW090606M-P30</td>\n",
       "      <td>Single wall cardboard boxes - 9x6x6 inches (22...</td>\n",
       "      <td>1</td>\n",
       "      <td>7.20</td>\n",
       "      <td>30</td>\n",
       "      <td>2.11</td>\n",
       "      <td>2.11</td>\n",
       "      <td>3600</td>\n",
       "      <td>0.000435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW120909M</td>\n",
       "      <td>Single wall cardboard boxes - 12x9x9 inches (3...</td>\n",
       "      <td>1</td>\n",
       "      <td>10.38</td>\n",
       "      <td>30</td>\n",
       "      <td>5.04</td>\n",
       "      <td>5.04</td>\n",
       "      <td>1800</td>\n",
       "      <td>0.000910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW120906M-P30</td>\n",
       "      <td>Single wall cardboard boxes - 12x9x6 inches (3...</td>\n",
       "      <td>1</td>\n",
       "      <td>8.08</td>\n",
       "      <td>25</td>\n",
       "      <td>3.65</td>\n",
       "      <td>3.65</td>\n",
       "      <td>2100</td>\n",
       "      <td>0.000911</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CDW181212M</td>\n",
       "      <td>Double wall boxes - 18x12x12 inches (457x305x3...</td>\n",
       "      <td>1</td>\n",
       "      <td>24.95</td>\n",
       "      <td>20</td>\n",
       "      <td>9.02</td>\n",
       "      <td>9.02</td>\n",
       "      <td>560</td>\n",
       "      <td>0.004687</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderID      PartNumber                                        Description  \\\n",
       "0  2275137      CDW241818M  Double wall boxes - 24x18x18 inches (610x457x4...   \n",
       "1  2275137  CSW090606M-P30  Single wall cardboard boxes - 9x6x6 inches (22...   \n",
       "2  2275137      CSW120909M  Single wall cardboard boxes - 12x9x9 inches (3...   \n",
       "3  2275137  CSW120906M-P30  Single wall cardboard boxes - 12x9x6 inches (3...   \n",
       "4  2275137      CDW181212M  Double wall boxes - 18x12x12 inches (457x305x3...   \n",
       "\n",
       "   Packs  PackPrice  UnitsPerPack  PackWeight  LineWeight  PalletQuantity  \\\n",
       "0      1      52.44            20       20.98       20.98             140   \n",
       "1      1       7.20            30        2.11        2.11            3600   \n",
       "2      1      10.38            30        5.04        5.04            1800   \n",
       "3      1       8.08            25        3.65        3.65            2100   \n",
       "4      1      24.95            20        9.02        9.02             560   \n",
       "\n",
       "   CubicMPerUnit  \n",
       "0       0.009683  \n",
       "1       0.000435  \n",
       "2       0.000910  \n",
       "3       0.000911  \n",
       "4       0.004687  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Viewing the DataFrame\n",
    "orders_details.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb315a17",
   "metadata": {},
   "source": [
    "This has removed some but not all of the null values in the CubicMPerUnit column. Examine the remaining null values in that column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "1fdbe81d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderID              0\n",
       "PartNumber           0\n",
       "Description          0\n",
       "Packs                0\n",
       "PackPrice            0\n",
       "UnitsPerPack         0\n",
       "PackWeight           0\n",
       "LineWeight           0\n",
       "PalletQuantity       0\n",
       "CubicMPerUnit     3125\n",
       "dtype: int64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking remaining null values\n",
    "orders_details.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d5afef9",
   "metadata": {},
   "source": [
    "There are still 3125 remaining null values in the column."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82ec2a03",
   "metadata": {},
   "source": [
    "#### Replace null values in CubicMPerUnit column"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b12628f",
   "metadata": {},
   "source": [
    "In order to deal with the remaining 3125 null values, a pallet capacity of 1.2m3 was used to replace them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "44eba357",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>PartNumber</th>\n",
       "      <th>Description</th>\n",
       "      <th>Packs</th>\n",
       "      <th>PackPrice</th>\n",
       "      <th>UnitsPerPack</th>\n",
       "      <th>PackWeight</th>\n",
       "      <th>LineWeight</th>\n",
       "      <th>PalletQuantity</th>\n",
       "      <th>CubicMPerUnit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CDW241818M</td>\n",
       "      <td>Double wall boxes - 24x18x18 inches (610x457x4...</td>\n",
       "      <td>1</td>\n",
       "      <td>52.44</td>\n",
       "      <td>20</td>\n",
       "      <td>20.98</td>\n",
       "      <td>20.98</td>\n",
       "      <td>140</td>\n",
       "      <td>0.009683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW090606M-P30</td>\n",
       "      <td>Single wall cardboard boxes - 9x6x6 inches (22...</td>\n",
       "      <td>1</td>\n",
       "      <td>7.20</td>\n",
       "      <td>30</td>\n",
       "      <td>2.11</td>\n",
       "      <td>2.11</td>\n",
       "      <td>3600</td>\n",
       "      <td>0.000435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW120909M</td>\n",
       "      <td>Single wall cardboard boxes - 12x9x9 inches (3...</td>\n",
       "      <td>1</td>\n",
       "      <td>10.38</td>\n",
       "      <td>30</td>\n",
       "      <td>5.04</td>\n",
       "      <td>5.04</td>\n",
       "      <td>1800</td>\n",
       "      <td>0.000910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW120906M-P30</td>\n",
       "      <td>Single wall cardboard boxes - 12x9x6 inches (3...</td>\n",
       "      <td>1</td>\n",
       "      <td>8.08</td>\n",
       "      <td>25</td>\n",
       "      <td>3.65</td>\n",
       "      <td>3.65</td>\n",
       "      <td>2100</td>\n",
       "      <td>0.000911</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CDW181212M</td>\n",
       "      <td>Double wall boxes - 18x12x12 inches (457x305x3...</td>\n",
       "      <td>1</td>\n",
       "      <td>24.95</td>\n",
       "      <td>20</td>\n",
       "      <td>9.02</td>\n",
       "      <td>9.02</td>\n",
       "      <td>560</td>\n",
       "      <td>0.004687</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderID      PartNumber                                        Description  \\\n",
       "0  2275137      CDW241818M  Double wall boxes - 24x18x18 inches (610x457x4...   \n",
       "1  2275137  CSW090606M-P30  Single wall cardboard boxes - 9x6x6 inches (22...   \n",
       "2  2275137      CSW120909M  Single wall cardboard boxes - 12x9x9 inches (3...   \n",
       "3  2275137  CSW120906M-P30  Single wall cardboard boxes - 12x9x6 inches (3...   \n",
       "4  2275137      CDW181212M  Double wall boxes - 18x12x12 inches (457x305x3...   \n",
       "\n",
       "   Packs  PackPrice  UnitsPerPack  PackWeight  LineWeight  PalletQuantity  \\\n",
       "0      1      52.44            20       20.98       20.98             140   \n",
       "1      1       7.20            30        2.11        2.11            3600   \n",
       "2      1      10.38            30        5.04        5.04            1800   \n",
       "3      1       8.08            25        3.65        3.65            2100   \n",
       "4      1      24.95            20        9.02        9.02             560   \n",
       "\n",
       "   CubicMPerUnit  \n",
       "0       0.009683  \n",
       "1       0.000435  \n",
       "2       0.000910  \n",
       "3       0.000911  \n",
       "4       0.004687  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace n=3,125 Null values in CubicMPerUnit column. \n",
    "# Based on calculation that a pallet  = 1.2m3\n",
    "# PalletQuantity = units needed to fill 1 pallet.\n",
    "# CubicMPerUnit = (1 pallet/palletquantity) * 1.2. \n",
    "\n",
    "orders_details.loc[orders_details['CubicMPerUnit'].isnull(), 'CubicMPerUnit'] = 1 / orders_details['PalletQuantity'] * 1.2\n",
    "\n",
    "orders_details.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "80443551",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderID           0\n",
       "PartNumber        0\n",
       "Description       0\n",
       "Packs             0\n",
       "PackPrice         0\n",
       "UnitsPerPack      0\n",
       "PackWeight        0\n",
       "LineWeight        0\n",
       "PalletQuantity    0\n",
       "CubicMPerUnit     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking null values have been replaced\n",
    "orders_details.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86a0d06c",
   "metadata": {},
   "source": [
    "The remaining null values have been replaced."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "b22182d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 59943 entries, 0 to 60817\n",
      "Data columns (total 10 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   OrderID         59943 non-null  int64  \n",
      " 1   PartNumber      59943 non-null  object \n",
      " 2   Description     59943 non-null  object \n",
      " 3   Packs           59943 non-null  int64  \n",
      " 4   PackPrice       59943 non-null  float64\n",
      " 5   UnitsPerPack    59943 non-null  int64  \n",
      " 6   PackWeight      59943 non-null  float64\n",
      " 7   LineWeight      59943 non-null  float64\n",
      " 8   PalletQuantity  59943 non-null  int64  \n",
      " 9   CubicMPerUnit   59943 non-null  float64\n",
      "dtypes: float64(4), int64(4), object(2)\n",
      "memory usage: 7.0+ MB\n"
     ]
    }
   ],
   "source": [
    "# Viewing the info for this DataFrame\n",
    "orders_details.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84e96fab",
   "metadata": {},
   "source": [
    "#### Add a new Pallet_per_line column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "70fa9534",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>PartNumber</th>\n",
       "      <th>Description</th>\n",
       "      <th>Packs</th>\n",
       "      <th>PackPrice</th>\n",
       "      <th>UnitsPerPack</th>\n",
       "      <th>PackWeight</th>\n",
       "      <th>LineWeight</th>\n",
       "      <th>PalletQuantity</th>\n",
       "      <th>CubicMPerUnit</th>\n",
       "      <th>Pallet_per_line</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CDW241818M</td>\n",
       "      <td>Double wall boxes - 24x18x18 inches (610x457x4...</td>\n",
       "      <td>1</td>\n",
       "      <td>52.44</td>\n",
       "      <td>20</td>\n",
       "      <td>20.98</td>\n",
       "      <td>20.98</td>\n",
       "      <td>140</td>\n",
       "      <td>0.009683</td>\n",
       "      <td>0.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW090606M-P30</td>\n",
       "      <td>Single wall cardboard boxes - 9x6x6 inches (22...</td>\n",
       "      <td>1</td>\n",
       "      <td>7.20</td>\n",
       "      <td>30</td>\n",
       "      <td>2.11</td>\n",
       "      <td>2.11</td>\n",
       "      <td>3600</td>\n",
       "      <td>0.000435</td>\n",
       "      <td>0.008333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW120909M</td>\n",
       "      <td>Single wall cardboard boxes - 12x9x9 inches (3...</td>\n",
       "      <td>1</td>\n",
       "      <td>10.38</td>\n",
       "      <td>30</td>\n",
       "      <td>5.04</td>\n",
       "      <td>5.04</td>\n",
       "      <td>1800</td>\n",
       "      <td>0.000910</td>\n",
       "      <td>0.016667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW120906M-P30</td>\n",
       "      <td>Single wall cardboard boxes - 12x9x6 inches (3...</td>\n",
       "      <td>1</td>\n",
       "      <td>8.08</td>\n",
       "      <td>25</td>\n",
       "      <td>3.65</td>\n",
       "      <td>3.65</td>\n",
       "      <td>2100</td>\n",
       "      <td>0.000911</td>\n",
       "      <td>0.011905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CDW181212M</td>\n",
       "      <td>Double wall boxes - 18x12x12 inches (457x305x3...</td>\n",
       "      <td>1</td>\n",
       "      <td>24.95</td>\n",
       "      <td>20</td>\n",
       "      <td>9.02</td>\n",
       "      <td>9.02</td>\n",
       "      <td>560</td>\n",
       "      <td>0.004687</td>\n",
       "      <td>0.035714</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderID      PartNumber                                        Description  \\\n",
       "0  2275137      CDW241818M  Double wall boxes - 24x18x18 inches (610x457x4...   \n",
       "1  2275137  CSW090606M-P30  Single wall cardboard boxes - 9x6x6 inches (22...   \n",
       "2  2275137      CSW120909M  Single wall cardboard boxes - 12x9x9 inches (3...   \n",
       "3  2275137  CSW120906M-P30  Single wall cardboard boxes - 12x9x6 inches (3...   \n",
       "4  2275137      CDW181212M  Double wall boxes - 18x12x12 inches (457x305x3...   \n",
       "\n",
       "   Packs  PackPrice  UnitsPerPack  PackWeight  LineWeight  PalletQuantity  \\\n",
       "0      1      52.44            20       20.98       20.98             140   \n",
       "1      1       7.20            30        2.11        2.11            3600   \n",
       "2      1      10.38            30        5.04        5.04            1800   \n",
       "3      1       8.08            25        3.65        3.65            2100   \n",
       "4      1      24.95            20        9.02        9.02             560   \n",
       "\n",
       "   CubicMPerUnit  Pallet_per_line  \n",
       "0       0.009683         0.142857  \n",
       "1       0.000435         0.008333  \n",
       "2       0.000910         0.016667  \n",
       "3       0.000911         0.011905  \n",
       "4       0.004687         0.035714  "
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adding a new Pallet_per_line column based on a calculation. \n",
    "# Calculates total pallets needed for the product line and not for 1 unit. \n",
    "\n",
    "orders_details['Pallet_per_line'] = (orders_details['Packs'] \n",
    "                                        * orders_details['UnitsPerPack']) / orders_details['PalletQuantity']\n",
    "\n",
    "orders_details.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a9aa63d",
   "metadata": {},
   "source": [
    "#### Add a new Volume_per_line(m3) column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "3a8e2704",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>PartNumber</th>\n",
       "      <th>Description</th>\n",
       "      <th>Packs</th>\n",
       "      <th>PackPrice</th>\n",
       "      <th>UnitsPerPack</th>\n",
       "      <th>PackWeight</th>\n",
       "      <th>LineWeight</th>\n",
       "      <th>PalletQuantity</th>\n",
       "      <th>CubicMPerUnit</th>\n",
       "      <th>Pallet_per_line</th>\n",
       "      <th>Volume_per_line_m3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CDW241818M</td>\n",
       "      <td>Double wall boxes - 24x18x18 inches (610x457x4...</td>\n",
       "      <td>1</td>\n",
       "      <td>52.44</td>\n",
       "      <td>20</td>\n",
       "      <td>20.98</td>\n",
       "      <td>20.98</td>\n",
       "      <td>140</td>\n",
       "      <td>0.009683</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.193660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW090606M-P30</td>\n",
       "      <td>Single wall cardboard boxes - 9x6x6 inches (22...</td>\n",
       "      <td>1</td>\n",
       "      <td>7.20</td>\n",
       "      <td>30</td>\n",
       "      <td>2.11</td>\n",
       "      <td>2.11</td>\n",
       "      <td>3600</td>\n",
       "      <td>0.000435</td>\n",
       "      <td>0.008333</td>\n",
       "      <td>0.013050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW120909M</td>\n",
       "      <td>Single wall cardboard boxes - 12x9x9 inches (3...</td>\n",
       "      <td>1</td>\n",
       "      <td>10.38</td>\n",
       "      <td>30</td>\n",
       "      <td>5.04</td>\n",
       "      <td>5.04</td>\n",
       "      <td>1800</td>\n",
       "      <td>0.000910</td>\n",
       "      <td>0.016667</td>\n",
       "      <td>0.027300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW120906M-P30</td>\n",
       "      <td>Single wall cardboard boxes - 12x9x6 inches (3...</td>\n",
       "      <td>1</td>\n",
       "      <td>8.08</td>\n",
       "      <td>25</td>\n",
       "      <td>3.65</td>\n",
       "      <td>3.65</td>\n",
       "      <td>2100</td>\n",
       "      <td>0.000911</td>\n",
       "      <td>0.011905</td>\n",
       "      <td>0.022775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CDW181212M</td>\n",
       "      <td>Double wall boxes - 18x12x12 inches (457x305x3...</td>\n",
       "      <td>1</td>\n",
       "      <td>24.95</td>\n",
       "      <td>20</td>\n",
       "      <td>9.02</td>\n",
       "      <td>9.02</td>\n",
       "      <td>560</td>\n",
       "      <td>0.004687</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.093740</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderID      PartNumber                                        Description  \\\n",
       "0  2275137      CDW241818M  Double wall boxes - 24x18x18 inches (610x457x4...   \n",
       "1  2275137  CSW090606M-P30  Single wall cardboard boxes - 9x6x6 inches (22...   \n",
       "2  2275137      CSW120909M  Single wall cardboard boxes - 12x9x9 inches (3...   \n",
       "3  2275137  CSW120906M-P30  Single wall cardboard boxes - 12x9x6 inches (3...   \n",
       "4  2275137      CDW181212M  Double wall boxes - 18x12x12 inches (457x305x3...   \n",
       "\n",
       "   Packs  PackPrice  UnitsPerPack  PackWeight  LineWeight  PalletQuantity  \\\n",
       "0      1      52.44            20       20.98       20.98             140   \n",
       "1      1       7.20            30        2.11        2.11            3600   \n",
       "2      1      10.38            30        5.04        5.04            1800   \n",
       "3      1       8.08            25        3.65        3.65            2100   \n",
       "4      1      24.95            20        9.02        9.02             560   \n",
       "\n",
       "   CubicMPerUnit  Pallet_per_line  Volume_per_line_m3  \n",
       "0       0.009683         0.142857            0.193660  \n",
       "1       0.000435         0.008333            0.013050  \n",
       "2       0.000910         0.016667            0.027300  \n",
       "3       0.000911         0.011905            0.022775  \n",
       "4       0.004687         0.035714            0.093740  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adding a new volume_per_line(m3) column based on a calculation. \n",
    "# Calculates the cubic m3 for the entire product line and not for 1 unit. \n",
    "\n",
    "orders_details['Volume_per_line_m3'] = orders_details['Packs'] * orders_details['UnitsPerPack'] * orders_details['CubicMPerUnit']\n",
    "\n",
    "orders_details.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d35c1ea3",
   "metadata": {},
   "source": [
    "#### Outlier analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "440f25c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>Packs</th>\n",
       "      <th>PackPrice</th>\n",
       "      <th>UnitsPerPack</th>\n",
       "      <th>PackWeight</th>\n",
       "      <th>LineWeight</th>\n",
       "      <th>PalletQuantity</th>\n",
       "      <th>CubicMPerUnit</th>\n",
       "      <th>Pallet_per_line</th>\n",
       "      <th>Volume_per_line_m3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5.994300e+04</td>\n",
       "      <td>59943.000000</td>\n",
       "      <td>59943.000000</td>\n",
       "      <td>59943.000000</td>\n",
       "      <td>59943.000000</td>\n",
       "      <td>59943.000000</td>\n",
       "      <td>5.994300e+04</td>\n",
       "      <td>59943.000000</td>\n",
       "      <td>59943.000000</td>\n",
       "      <td>59943.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.287393e+06</td>\n",
       "      <td>5.766895</td>\n",
       "      <td>28.001103</td>\n",
       "      <td>85.731945</td>\n",
       "      <td>6.721441</td>\n",
       "      <td>30.113368</td>\n",
       "      <td>2.347947e+04</td>\n",
       "      <td>0.031789</td>\n",
       "      <td>0.194059</td>\n",
       "      <td>0.287737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7.009919e+03</td>\n",
       "      <td>17.770857</td>\n",
       "      <td>76.958218</td>\n",
       "      <td>231.774048</td>\n",
       "      <td>20.258651</td>\n",
       "      <td>87.868764</td>\n",
       "      <td>9.548396e+04</td>\n",
       "      <td>0.109503</td>\n",
       "      <td>0.909095</td>\n",
       "      <td>1.231425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.275137e+06</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000001</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.281374e+06</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>10.380000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.400000e+02</td>\n",
       "      <td>0.000317</td>\n",
       "      <td>0.015152</td>\n",
       "      <td>0.020000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.287442e+06</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>18.760000</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>4.620000</td>\n",
       "      <td>9.600000</td>\n",
       "      <td>1.300000e+03</td>\n",
       "      <td>0.000916</td>\n",
       "      <td>0.046875</td>\n",
       "      <td>0.059440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.293476e+06</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>30.840000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>3.780000e+03</td>\n",
       "      <td>0.005437</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.203480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.299521e+06</td>\n",
       "      <td>1200.000000</td>\n",
       "      <td>4995.000000</td>\n",
       "      <td>10350.000000</td>\n",
       "      <td>759.000000</td>\n",
       "      <td>5308.800000</td>\n",
       "      <td>1.350000e+06</td>\n",
       "      <td>1.921920</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>216.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            OrderID         Packs     PackPrice  UnitsPerPack    PackWeight  \\\n",
       "count  5.994300e+04  59943.000000  59943.000000  59943.000000  59943.000000   \n",
       "mean   2.287393e+06      5.766895     28.001103     85.731945      6.721441   \n",
       "std    7.009919e+03     17.770857     76.958218    231.774048     20.258651   \n",
       "min    2.275137e+06      1.000000      0.000000      1.000000      0.000000   \n",
       "25%    2.281374e+06      1.000000     10.380000      6.000000      2.000000   \n",
       "50%    2.287442e+06      2.000000     18.760000     24.000000      4.620000   \n",
       "75%    2.293476e+06      5.000000     30.840000     50.000000      9.000000   \n",
       "max    2.299521e+06   1200.000000   4995.000000  10350.000000    759.000000   \n",
       "\n",
       "         LineWeight  PalletQuantity  CubicMPerUnit  Pallet_per_line  \\\n",
       "count  59943.000000    5.994300e+04   59943.000000     59943.000000   \n",
       "mean      30.113368    2.347947e+04       0.031789         0.194059   \n",
       "std       87.868764    9.548396e+04       0.109503         0.909095   \n",
       "min        0.000000    1.000000e+00       0.000000         0.000001   \n",
       "25%        4.000000    2.400000e+02       0.000317         0.015152   \n",
       "50%        9.600000    1.300000e+03       0.000916         0.046875   \n",
       "75%       24.000000    3.780000e+03       0.005437         0.142857   \n",
       "max     5308.800000    1.350000e+06       1.921920       180.000000   \n",
       "\n",
       "       Volume_per_line_m3  \n",
       "count        59943.000000  \n",
       "mean             0.287737  \n",
       "std              1.231425  \n",
       "min              0.000000  \n",
       "25%              0.020000  \n",
       "50%              0.059440  \n",
       "75%              0.203480  \n",
       "max            216.000000  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the descriptive statistics of the numerical columns\n",
    "# Identifying potential outliers based on the 75% and max values \n",
    "orders_details.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "f785bbdf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Viewing outliers for Pallet_per_line.\n",
    "# Descriptive statistics identifies other columns with potential outliers based on 75% and max values.\n",
    "# However, Pallet_per_product will be mainly used for this analysis. \n",
    "# Outliers in other columns not seen as an issue. \n",
    "\n",
    "# Create a boxplot to visualise the outliers. \n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.boxplot(orders_details['Pallet_per_line'])\n",
    "\n",
    "# Displaying the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "effe27c5",
   "metadata": {},
   "source": [
    "The chart shows one significant outlier in the data set. Next, we need to identify the outlier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "7ae987e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Highest outlier for 'Pallet_per_line': 180.0\n"
     ]
    }
   ],
   "source": [
    "# Determining the biggest outlier \n",
    "q1 = orders_details['Pallet_per_line'].quantile(0.25)\n",
    "q3 = orders_details['Pallet_per_line'].quantile(0.75)\n",
    "\n",
    "# Calculating the IQR\n",
    "iqr = q3 - q1\n",
    "\n",
    "# Calculating the upper threshold\n",
    "upper_threshold = q3 + iqr\n",
    "\n",
    "# Identifying the highest outlier\n",
    "highest_outlier = orders_details['Pallet_per_line'][orders_details['Pallet_per_line'] > upper_threshold].max()\n",
    "\n",
    "# Displaying the highest outlier\n",
    "print(\"Highest outlier for 'Pallet_per_line':\", highest_outlier)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fd6b988",
   "metadata": {},
   "source": [
    "The outlier has now been identified and can be removed from the data set. If it is not representative of the orders typically delivered then it should not be included in the fleet and freight analysis as it may skew insights and lead to inaccurate conclusions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32e36616",
   "metadata": {},
   "source": [
    "#### Remove outlier from Pallet_per_line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "1b0e5051",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing outliers from Pallet_per_line with value of 180\n",
    "orders_details = orders_details.drop(orders_details[orders_details['Pallet_per_line'] == 180].index)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "896a3fa8",
   "metadata": {},
   "source": [
    "Check that the outlier has indeed been removed by viewing the data set using a boxplot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "0662c303",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a boxplot with outlier removed \n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.boxplot(orders_details['Pallet_per_line'])\n",
    "\n",
    "# Displaying the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cd4820a",
   "metadata": {},
   "source": [
    "The boxplot shows that the outlier has now been removed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "93be9615",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 59942 entries, 0 to 60817\n",
      "Data columns (total 12 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   OrderID             59942 non-null  int64  \n",
      " 1   PartNumber          59942 non-null  object \n",
      " 2   Description         59942 non-null  object \n",
      " 3   Packs               59942 non-null  int64  \n",
      " 4   PackPrice           59942 non-null  float64\n",
      " 5   UnitsPerPack        59942 non-null  int64  \n",
      " 6   PackWeight          59942 non-null  float64\n",
      " 7   LineWeight          59942 non-null  float64\n",
      " 8   PalletQuantity      59942 non-null  int64  \n",
      " 9   CubicMPerUnit       59942 non-null  float64\n",
      " 10  Pallet_per_line     59942 non-null  float64\n",
      " 11  Volume_per_line_m3  59942 non-null  float64\n",
      "dtypes: float64(6), int64(4), object(2)\n",
      "memory usage: 5.9+ MB\n"
     ]
    }
   ],
   "source": [
    "# Checking the metadata \n",
    "orders_details.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd18db68",
   "metadata": {},
   "source": [
    "#### Rename columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cdc22e7",
   "metadata": {},
   "source": [
    "Some of the column names can be simplified and clarified."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "dcdd8305",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>Part_number</th>\n",
       "      <th>Description</th>\n",
       "      <th>Packs</th>\n",
       "      <th>Price_per_pack</th>\n",
       "      <th>Units_per_pack</th>\n",
       "      <th>Weight_per_pack</th>\n",
       "      <th>Weight_per_line</th>\n",
       "      <th>Units_per_pallet</th>\n",
       "      <th>Volume_per_unit</th>\n",
       "      <th>Pallet_per_line</th>\n",
       "      <th>Volume_per_line_m3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CDW241818M</td>\n",
       "      <td>Double wall boxes - 24x18x18 inches (610x457x4...</td>\n",
       "      <td>1</td>\n",
       "      <td>52.44</td>\n",
       "      <td>20</td>\n",
       "      <td>20.98</td>\n",
       "      <td>20.98</td>\n",
       "      <td>140</td>\n",
       "      <td>0.009683</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.193660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW090606M-P30</td>\n",
       "      <td>Single wall cardboard boxes - 9x6x6 inches (22...</td>\n",
       "      <td>1</td>\n",
       "      <td>7.20</td>\n",
       "      <td>30</td>\n",
       "      <td>2.11</td>\n",
       "      <td>2.11</td>\n",
       "      <td>3600</td>\n",
       "      <td>0.000435</td>\n",
       "      <td>0.008333</td>\n",
       "      <td>0.013050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW120909M</td>\n",
       "      <td>Single wall cardboard boxes - 12x9x9 inches (3...</td>\n",
       "      <td>1</td>\n",
       "      <td>10.38</td>\n",
       "      <td>30</td>\n",
       "      <td>5.04</td>\n",
       "      <td>5.04</td>\n",
       "      <td>1800</td>\n",
       "      <td>0.000910</td>\n",
       "      <td>0.016667</td>\n",
       "      <td>0.027300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CSW120906M-P30</td>\n",
       "      <td>Single wall cardboard boxes - 12x9x6 inches (3...</td>\n",
       "      <td>1</td>\n",
       "      <td>8.08</td>\n",
       "      <td>25</td>\n",
       "      <td>3.65</td>\n",
       "      <td>3.65</td>\n",
       "      <td>2100</td>\n",
       "      <td>0.000911</td>\n",
       "      <td>0.011905</td>\n",
       "      <td>0.022775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2275137</td>\n",
       "      <td>CDW181212M</td>\n",
       "      <td>Double wall boxes - 18x12x12 inches (457x305x3...</td>\n",
       "      <td>1</td>\n",
       "      <td>24.95</td>\n",
       "      <td>20</td>\n",
       "      <td>9.02</td>\n",
       "      <td>9.02</td>\n",
       "      <td>560</td>\n",
       "      <td>0.004687</td>\n",
       "      <td>0.035714</td>\n",
       "      <td>0.093740</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderID     Part_number                                        Description  \\\n",
       "0  2275137      CDW241818M  Double wall boxes - 24x18x18 inches (610x457x4...   \n",
       "1  2275137  CSW090606M-P30  Single wall cardboard boxes - 9x6x6 inches (22...   \n",
       "2  2275137      CSW120909M  Single wall cardboard boxes - 12x9x9 inches (3...   \n",
       "3  2275137  CSW120906M-P30  Single wall cardboard boxes - 12x9x6 inches (3...   \n",
       "4  2275137      CDW181212M  Double wall boxes - 18x12x12 inches (457x305x3...   \n",
       "\n",
       "   Packs  Price_per_pack  Units_per_pack  Weight_per_pack  Weight_per_line  \\\n",
       "0      1           52.44              20            20.98            20.98   \n",
       "1      1            7.20              30             2.11             2.11   \n",
       "2      1           10.38              30             5.04             5.04   \n",
       "3      1            8.08              25             3.65             3.65   \n",
       "4      1           24.95              20             9.02             9.02   \n",
       "\n",
       "   Units_per_pallet  Volume_per_unit  Pallet_per_line  Volume_per_line_m3  \n",
       "0               140         0.009683         0.142857            0.193660  \n",
       "1              3600         0.000435         0.008333            0.013050  \n",
       "2              1800         0.000910         0.016667            0.027300  \n",
       "3              2100         0.000911         0.011905            0.022775  \n",
       "4               560         0.004687         0.035714            0.093740  "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Renaming column names\n",
    "orders_details.rename(columns={'PartNumber': 'Part_number', 'PackPrice': 'Price_per_pack', \n",
    "                               'UnitsPerPack': 'Units_per_pack', 'PackWeight': 'Weight_per_pack',\n",
    "                               'LineWeight': 'Weight_per_line', 'PalletQuantity': 'Units_per_pallet',\n",
    "                               'CubicMPerUnit': 'Volume_per_unit'}, inplace=True)\n",
    "\n",
    "# Checking this has worked\n",
    "orders_details.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "281eb5b2",
   "metadata": {},
   "source": [
    "#### Changing Data Types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "85c9005d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderID                object\n",
       "Part_number            object\n",
       "Description            object\n",
       "Packs                   int64\n",
       "Price_per_pack        float64\n",
       "Units_per_pack          int64\n",
       "Weight_per_pack       float64\n",
       "Weight_per_line       float64\n",
       "Units_per_pallet        int64\n",
       "Volume_per_unit       float64\n",
       "Pallet_per_line       float64\n",
       "Volume_per_line_m3    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Converting OrderID to string data type\n",
    "orders_details['OrderID'] = orders_details['OrderID'].astype(str)\n",
    "\n",
    "# Checking this has worked\n",
    "orders_details.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3861703d",
   "metadata": {},
   "source": [
    "# "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11a2eb54",
   "metadata": {},
   "source": [
    "##  Orders Sheet"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a92e0da5",
   "metadata": {},
   "source": [
    "**'Orders' sheet data cleaning methodology:**\n",
    "1. We renamed some columns to simplify them - 'StatusName': 'OrderStatus', 'PaymentOptionName': 'PaymentOption', 'DespatchedCourier': 'Courier'. We converted the format of the dates to d/m/y to be consistent across the data set.\n",
    "<br>\n",
    "\n",
    "2. We removed all rows with an order status of 'Deleted'.\n",
    "<br>\n",
    "3. We identified null values in the DeliveryCost and DateDespatched columns. We removed all null values in the DelieveryCost column. We replaced the null values in the DateDespatched column with 24th April 2023 when the order status was 'Dispatched', otherwise we removed the null values. \n",
    "<br>\n",
    "4. We checked and found no duplicates. \n",
    "<br>\n",
    "5. We checked for outliners in the order value and delivery costs - there are outliners but we felt we should keep them as they are valid data points, and probably represent some very large orders.\n",
    "<br>\n",
    "6. We checked the figures in the subtotal and grandtotal columns by performing the calculations (based on the metadata) and found a few figures that appear to be erroneous. \n",
    "\n",
    "**Summary of initial findings:**\n",
    "1. Seasonality in orders placed/despatched: number of orders placed and despatch goes down from Monday to Friday. Very few orders during weekends. \n",
    "<br>\n",
    "\n",
    "2. The majority of orders are despatched on the same day the order comes in. Some orders took as long as 24 days to be despatched however. This is obviously not ideal and should be investigated. Was a delayed payment from the customer something to do with this? Perhaps a certain courier was to blame?\n",
    "<br>\n",
    "3. There are some exceptionally high delivery costs and order values that are worth further investigation. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "1f8f3867",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Decrypting the Excel file to open it in Python\n",
    "# Looking at the Orders sheet\n",
    "file_name = \"kite_orders_data.xlsx\"\n",
    "sheet_name = \"Orders\"\n",
    "password = \"FRMay23\" \n",
    "\n",
    "with open(file_name, \"rb\") as file:\n",
    "    decryptor = msoffcrypto.OfficeFile(file)\n",
    "    decryptor.load_key(password=password)\n",
    "\n",
    "    decrypted_data = io.BytesIO()\n",
    "    decryptor.decrypt(decrypted_data)\n",
    "    decrypted_data.seek(0)\n",
    "\n",
    "    # Storing the sheet in a Pandas DataFrame called orders_df\n",
    "    orders_df = pd.read_excel(decrypted_data, sheet_name=sheet_name, engine='openpyxl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "7159be5b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>StatusName</th>\n",
       "      <th>StatusId</th>\n",
       "      <th>PaymentOptionName</th>\n",
       "      <th>PaymentType</th>\n",
       "      <th>DespatchedCourier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>VAT</th>\n",
       "      <th>SubTotal</th>\n",
       "      <th>GrandTotal</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2275137</td>\n",
       "      <td>852084</td>\n",
       "      <td>2023-03-27 00:04:48.773</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>1</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>103.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>20.62</td>\n",
       "      <td>103.05</td>\n",
       "      <td>123.67</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>19.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2275138</td>\n",
       "      <td>673961</td>\n",
       "      <td>2023-03-27 00:21:12.657</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>On Account</td>\n",
       "      <td>3</td>\n",
       "      <td>MFS</td>\n",
       "      <td>480.86</td>\n",
       "      <td>0.00</td>\n",
       "      <td>96.18</td>\n",
       "      <td>480.86</td>\n",
       "      <td>577.04</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>76.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2275139</td>\n",
       "      <td>679319</td>\n",
       "      <td>2023-03-27 00:22:25.530</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>125.28</td>\n",
       "      <td>0.00</td>\n",
       "      <td>25.05</td>\n",
       "      <td>125.28</td>\n",
       "      <td>150.33</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>22.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2275140</td>\n",
       "      <td>819078</td>\n",
       "      <td>2023-03-27 00:54:04.783</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>1</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>21.26</td>\n",
       "      <td>7.22</td>\n",
       "      <td>5.69</td>\n",
       "      <td>21.26</td>\n",
       "      <td>34.17</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>6.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2275141</td>\n",
       "      <td>692729</td>\n",
       "      <td>2023-03-27 00:56:08.917</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>1</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>127.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>25.57</td>\n",
       "      <td>127.88</td>\n",
       "      <td>153.45</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>11.19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderID  WebsiteID               OrderDate  StatusName  StatusId  \\\n",
       "0  2275137     852084 2023-03-27 00:04:48.773  Dispatched         6   \n",
       "1  2275138     673961 2023-03-27 00:21:12.657  Dispatched         6   \n",
       "2  2275139     679319 2023-03-27 00:22:25.530  Dispatched         6   \n",
       "3  2275140     819078 2023-03-27 00:54:04.783  Dispatched         6   \n",
       "4  2275141     692729 2023-03-27 00:56:08.917  Dispatched         6   \n",
       "\n",
       "  PaymentOptionName  PaymentType DespatchedCourier  ProductsExVAT  \\\n",
       "0            Paypal            1        DX Freight         103.05   \n",
       "1        On Account            3               MFS         480.86   \n",
       "2   Payment Gateway            2        DX Freight         125.28   \n",
       "3            Paypal            1        DX Express          21.26   \n",
       "4            Paypal            1        DX Express         127.88   \n",
       "\n",
       "   DeliveryExVAT    VAT  SubTotal  GrandTotal DateDespatched  DeliveryCost  \n",
       "0           0.00  20.62    103.05      123.67     2023-03-27         19.17  \n",
       "1           0.00  96.18    480.86      577.04     2023-03-27         76.73  \n",
       "2           0.00  25.05    125.28      150.33     2023-03-27         22.67  \n",
       "3           7.22   5.69     21.26       34.17     2023-03-27          6.81  \n",
       "4           0.00  25.57    127.88      153.45     2023-03-27         11.19  "
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Viewing the data to ensure the file has been succesfully imported \n",
    "orders_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ce8b7dc",
   "metadata": {},
   "source": [
    "Data is succesfully imported, we may begin the cleaning process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "3ef47cd8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(24385, 15)\n",
      "OrderID                       int64\n",
      "WebsiteID                     int64\n",
      "OrderDate            datetime64[ns]\n",
      "StatusName                   object\n",
      "StatusId                      int64\n",
      "PaymentOptionName            object\n",
      "PaymentType                   int64\n",
      "DespatchedCourier            object\n",
      "ProductsExVAT               float64\n",
      "DeliveryExVAT               float64\n",
      "VAT                         float64\n",
      "SubTotal                    float64\n",
      "GrandTotal                  float64\n",
      "DateDespatched       datetime64[ns]\n",
      "DeliveryCost                float64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Determining the shape of the data set and the data types \n",
    "print(orders_df.shape)\n",
    "print(orders_df.dtypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ded68dd1",
   "metadata": {},
   "source": [
    "All the data types are formatted correctly. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "f12949c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   OrderID  WebsiteID               OrderDate      Status  StatusId  \\\n",
      "0  2275137     852084 2023-03-27 00:04:48.773  Dispatched         6   \n",
      "1  2275138     673961 2023-03-27 00:21:12.657  Dispatched         6   \n",
      "2  2275139     679319 2023-03-27 00:22:25.530  Dispatched         6   \n",
      "3  2275140     819078 2023-03-27 00:54:04.783  Dispatched         6   \n",
      "4  2275141     692729 2023-03-27 00:56:08.917  Dispatched         6   \n",
      "\n",
      "     PaymentOption  PaymentType     Courier  ProductsExVAT  DeliveryExVAT  \\\n",
      "0           Paypal            1  DX Freight         103.05           0.00   \n",
      "1       On Account            3         MFS         480.86           0.00   \n",
      "2  Payment Gateway            2  DX Freight         125.28           0.00   \n",
      "3           Paypal            1  DX Express          21.26           7.22   \n",
      "4           Paypal            1  DX Express         127.88           0.00   \n",
      "\n",
      "     VAT  SubTotal  GrandTotal DateDespatched  DeliveryCost  \n",
      "0  20.62    103.05      123.67     2023-03-27         19.17  \n",
      "1  96.18    480.86      577.04     2023-03-27         76.73  \n",
      "2  25.05    125.28      150.33     2023-03-27         22.67  \n",
      "3   5.69     21.26       34.17     2023-03-27          6.81  \n",
      "4  25.57    127.88      153.45     2023-03-27         11.19  \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "OrderID                    int64\n",
       "WebsiteID                  int64\n",
       "OrderDate         datetime64[ns]\n",
       "Status                    object\n",
       "StatusId                   int64\n",
       "PaymentOption             object\n",
       "PaymentType                int64\n",
       "Courier                   object\n",
       "ProductsExVAT            float64\n",
       "DeliveryExVAT            float64\n",
       "VAT                      float64\n",
       "SubTotal                 float64\n",
       "GrandTotal               float64\n",
       "DateDespatched    datetime64[ns]\n",
       "DeliveryCost             float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Simplifying selected column names\n",
    "orders_df.rename(columns={'StatusName': 'Status', 'PaymentOptionName': 'PaymentOption', \n",
    "                          'DespatchedCourier': 'Courier'}, inplace=True)\n",
    "\n",
    "# Converting the formats of the two dates\n",
    "orders_df['OrderDate'] = pd.to_datetime(orders_df['OrderDate'], format='%d/%m/%Y')\n",
    "orders_df['DateDespatched'] = pd.to_datetime(orders_df['DateDespatched'], format='%d/%m/%Y')\n",
    "\n",
    "# Checking this has worked\n",
    "print(orders_df.head())\n",
    "orders_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "e933d229",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for duplicates in the dataset \n",
    "orders_df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "812ef648",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Dispatched' 'Deleted' 'Proforma Unpaid' 'Processing'\n",
      " 'Prepay Payment Pending']\n",
      "['Paypal' 'On Account' 'Payment Gateway' 'Sample'\n",
      " 'Cheque, BACS or pro-forma']\n",
      "['DX Freight' 'MFS' 'DX Express' 'Split' 'Direct']\n"
     ]
    }
   ],
   "source": [
    "# Inspecting the categorical varaibles\n",
    "print(orders_df['Status'].unique())\n",
    "print(orders_df['PaymentOption'].unique())\n",
    "print(orders_df['Courier'].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2935dca",
   "metadata": {},
   "source": [
    "Here, we can see that Deleted is an option for the order status. Let's remove these orders from the data set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "fbaf2221",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Dispatched', 'Proforma Unpaid', 'Processing',\n",
       "       'Prepay Payment Pending'], dtype=object)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Removing rows with Status 'Deleted'\n",
    "orders_df = orders_df[~orders_df['Status'].str.contains('Deleted')]\n",
    "\n",
    "# Checking this has worked\n",
    "orders_df['Status'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "84a1e35b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderID             0\n",
       "WebsiteID           0\n",
       "OrderDate           0\n",
       "Status              0\n",
       "StatusId            0\n",
       "PaymentOption       0\n",
       "PaymentType         0\n",
       "Courier             0\n",
       "ProductsExVAT       0\n",
       "DeliveryExVAT       0\n",
       "VAT                 0\n",
       "SubTotal            0\n",
       "GrandTotal          0\n",
       "DateDespatched    306\n",
       "DeliveryCost      120\n",
       "dtype: int64"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking whether there are any null values \n",
    "orders_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "b5869f53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderID             0\n",
       "WebsiteID           0\n",
       "OrderDate           0\n",
       "Status              0\n",
       "StatusId            0\n",
       "PaymentOption       0\n",
       "PaymentType         0\n",
       "Courier             0\n",
       "ProductsExVAT       0\n",
       "DeliveryExVAT       0\n",
       "VAT                 0\n",
       "SubTotal            0\n",
       "GrandTotal          0\n",
       "DateDespatched    186\n",
       "DeliveryCost        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove rows with null values in 'DeliveryCost'\n",
    "orders_df = orders_df.dropna(subset = ['DeliveryCost'])\n",
    "\n",
    "# Checking this has worked\n",
    "orders_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "0e67e8e2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Processing', 'Dispatched'], dtype=object)"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Identifying the status of these orders with null values in DateDespatched\n",
    "orders_df[orders_df['DateDespatched'].isnull()]['Status'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "a74a0e83",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Dispatched'], dtype=object)"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Removing the rows with status 'Processing' and null values in DateDespatched\n",
    "orders_df = orders_df[~((orders_df['DateDespatched'].isnull()) & (orders_df['Status'] == 'Processing'))]\n",
    "\n",
    "# Checking this has worked\n",
    "orders_df[orders_df['DateDespatched'].isnull()]['Status'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "51e7fa5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderID           0\n",
       "WebsiteID         0\n",
       "OrderDate         0\n",
       "Status            0\n",
       "StatusId          0\n",
       "PaymentOption     0\n",
       "PaymentType       0\n",
       "Courier           0\n",
       "ProductsExVAT     0\n",
       "DeliveryExVAT     0\n",
       "VAT               0\n",
       "SubTotal          0\n",
       "GrandTotal        0\n",
       "DateDespatched    5\n",
       "DeliveryCost      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking again if there are any more null values \n",
    "orders_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24d9f05d",
   "metadata": {},
   "source": [
    "Here, we can see that there are 5 null values still in the DateDespatched column. Having spoken to Kite, we understand these should be 24th April 2023. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "6b097ce6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderID           0\n",
       "WebsiteID         0\n",
       "OrderDate         0\n",
       "Status            0\n",
       "StatusId          0\n",
       "PaymentOption     0\n",
       "PaymentType       0\n",
       "Courier           0\n",
       "ProductsExVAT     0\n",
       "DeliveryExVAT     0\n",
       "VAT               0\n",
       "SubTotal          0\n",
       "GrandTotal        0\n",
       "DateDespatched    0\n",
       "DeliveryCost      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replacing the remaining null values with 24th April 2023\n",
    "orders_df['DateDespatched'].fillna(dt.datetime(2023, 4, 24), inplace = True)\n",
    "\n",
    "# Checking for the number of null values now\n",
    "orders_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "69aff567",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OrderID                    int64\n",
      "WebsiteID                  int64\n",
      "OrderDate         datetime64[ns]\n",
      "Status                    object\n",
      "StatusId                   int64\n",
      "PaymentOption             object\n",
      "PaymentType                int64\n",
      "Courier                   object\n",
      "ProductsExVAT            float64\n",
      "DeliveryExVAT            float64\n",
      "VAT                      float64\n",
      "SubTotal                 float64\n",
      "GrandTotal               float64\n",
      "DateDespatched    datetime64[ns]\n",
      "DeliveryCost             float64\n",
      "dtype: object\n",
      "Cleaned dataset shape: (23414, 15)\n"
     ]
    }
   ],
   "source": [
    "# Checking the data types of the cleaned data set\n",
    "print(orders_df.dtypes)\n",
    "\n",
    "# Checking the new shape of the cleaned data set\n",
    "print(\"Cleaned dataset shape:\", orders_df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "c4d59573",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderID                   object\n",
       "WebsiteID                 object\n",
       "OrderDate         datetime64[ns]\n",
       "Status                    object\n",
       "StatusId                   int64\n",
       "PaymentOption             object\n",
       "PaymentType                int64\n",
       "Courier                   object\n",
       "ProductsExVAT            float64\n",
       "DeliveryExVAT            float64\n",
       "VAT                      float64\n",
       "SubTotal                 float64\n",
       "GrandTotal               float64\n",
       "DateDespatched    datetime64[ns]\n",
       "DeliveryCost             float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Converting OrderID and WebsiteID to string\n",
    "orders_df['OrderID'] = orders_df['OrderID'].astype(str)\n",
    "orders_df['WebsiteID'] = orders_df['WebsiteID'].astype(str)\n",
    "\n",
    "# Checking this has worked\n",
    "orders_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "23a5b09b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Status</th>\n",
       "      <th>StatusId</th>\n",
       "      <th>PaymentOption</th>\n",
       "      <th>PaymentType</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>VAT</th>\n",
       "      <th>SubTotal</th>\n",
       "      <th>GrandTotal</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2275137</td>\n",
       "      <td>852084</td>\n",
       "      <td>2023-03-27 00:04:48.773</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>1</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>103.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>20.62</td>\n",
       "      <td>103.05</td>\n",
       "      <td>123.67</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>19.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2275138</td>\n",
       "      <td>673961</td>\n",
       "      <td>2023-03-27 00:21:12.657</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>On Account</td>\n",
       "      <td>3</td>\n",
       "      <td>MFS</td>\n",
       "      <td>480.86</td>\n",
       "      <td>0.00</td>\n",
       "      <td>96.18</td>\n",
       "      <td>480.86</td>\n",
       "      <td>577.04</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>76.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2275139</td>\n",
       "      <td>679319</td>\n",
       "      <td>2023-03-27 00:22:25.530</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>125.28</td>\n",
       "      <td>0.00</td>\n",
       "      <td>25.05</td>\n",
       "      <td>125.28</td>\n",
       "      <td>150.33</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>22.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2275140</td>\n",
       "      <td>819078</td>\n",
       "      <td>2023-03-27 00:54:04.783</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>1</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>21.26</td>\n",
       "      <td>7.22</td>\n",
       "      <td>5.69</td>\n",
       "      <td>21.26</td>\n",
       "      <td>34.17</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>6.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2275141</td>\n",
       "      <td>692729</td>\n",
       "      <td>2023-03-27 00:56:08.917</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>1</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>127.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>25.57</td>\n",
       "      <td>127.88</td>\n",
       "      <td>153.45</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>11.19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderID WebsiteID               OrderDate      Status  StatusId  \\\n",
       "0  2275137    852084 2023-03-27 00:04:48.773  Dispatched         6   \n",
       "1  2275138    673961 2023-03-27 00:21:12.657  Dispatched         6   \n",
       "2  2275139    679319 2023-03-27 00:22:25.530  Dispatched         6   \n",
       "3  2275140    819078 2023-03-27 00:54:04.783  Dispatched         6   \n",
       "4  2275141    692729 2023-03-27 00:56:08.917  Dispatched         6   \n",
       "\n",
       "     PaymentOption  PaymentType     Courier  ProductsExVAT  DeliveryExVAT  \\\n",
       "0           Paypal            1  DX Freight         103.05           0.00   \n",
       "1       On Account            3         MFS         480.86           0.00   \n",
       "2  Payment Gateway            2  DX Freight         125.28           0.00   \n",
       "3           Paypal            1  DX Express          21.26           7.22   \n",
       "4           Paypal            1  DX Express         127.88           0.00   \n",
       "\n",
       "     VAT  SubTotal  GrandTotal DateDespatched  DeliveryCost  \n",
       "0  20.62    103.05      123.67     2023-03-27         19.17  \n",
       "1  96.18    480.86      577.04     2023-03-27         76.73  \n",
       "2  25.05    125.28      150.33     2023-03-27         22.67  \n",
       "3   5.69     21.26       34.17     2023-03-27          6.81  \n",
       "4  25.57    127.88      153.45     2023-03-27         11.19  "
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Giving the cleaned data set a more appropriate name\n",
    "orders_cleaned = orders_df\n",
    "\n",
    "# Viewing this DataFrame]\n",
    "orders_cleaned.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c0f5a1b",
   "metadata": {},
   "source": [
    "Now we have cleaned the data, we may perform some inital analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a546ce63",
   "metadata": {},
   "source": [
    "### Inspecting DateDespatched \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "5eed7e79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Orders were despatched between 2023-03-27 00:00:00 and 2023-04-24 00:00:00\n"
     ]
    }
   ],
   "source": [
    "# Determining the minimum and maximum dates in DateDespatched\n",
    "print(\"Orders were despatched between\", orders_cleaned['DateDespatched'].min(), \"and\", orders_cleaned['DateDespatched'].max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "e74869d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualise despatchs by date \n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Count the number of orders despatched each day\n",
    "daily_orders = orders_cleaned['DateDespatched'].value_counts().sort_index()\n",
    "daily_orders.index = pd.to_datetime(daily_orders.index)\n",
    "daily_orders = daily_orders.sort_index(ascending=True)\n",
    "\n",
    "# Create a bar plot to visualise any pattern in orders\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.bar(daily_orders.index, daily_orders)\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Number of Orders Despatched')\n",
    "plt.title('Number of Orders Despatched Each Day')\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d8b72d6",
   "metadata": {},
   "source": [
    "It appears that there is seasonality in the number of orders despatched per day. There are almost no orders being despatched on weekends and bank holidays."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "77f7e689",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Checking the efficiency of their warehouse - measured by the number of days taken between ordering and despatching\n",
    "# Create a column to store the number of days it takes between an order being made and being despatched\n",
    "orders_cleaned['OrderedDespatched'] = orders_cleaned['DateDespatched'].dt.date - orders_cleaned['OrderDate'].dt.date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "a882df58",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    0\n",
      "1    0\n",
      "2    0\n",
      "3    0\n",
      "4    0\n",
      "Name: OrderedDespatched, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Convert this to just a number\n",
    "orders_cleaned['OrderedDespatched'] = orders_cleaned['OrderedDespatched'].dt.days\n",
    "\n",
    "# Checking if this has worked\n",
    "print(orders_cleaned['OrderedDespatched'].head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "ae65c285",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a countplot to show the number of orders for each number of days taken to despatch\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.countplot(x='OrderedDespatched', data=orders_cleaned)\n",
    "plt.xlabel('Days Taken to Despatch')\n",
    "plt.ylabel('Number of Orders')\n",
    "plt.title('Number of Days Taken to Despatch')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55d7b029",
   "metadata": {},
   "source": [
    "The majority of orders took 0 days to be despatched ie. same-day-delivery. Some orders took as long as 24 days to be despatched however. This is obviously not ideal and should be investigated. Was a delayed payment from the customer something to do with this? Perhaps a certain courier was to blame?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3e8dd32",
   "metadata": {},
   "source": [
    "### Inspecting OrderID and WebsiteID \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "46cf219b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of orders in this data set is:  23414\n",
      "The number of customers in this data set is:  18440\n"
     ]
    }
   ],
   "source": [
    "# Checking the number of orders in this data set\n",
    "print(\"The number of orders in this data set is: \", len(orders_cleaned['OrderID'].unique()))\n",
    "\n",
    "# Checking the number of customers in this data set\n",
    "print(\"The number of customers in this data set is: \",len(orders_cleaned['WebsiteID'].unique()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b746c62",
   "metadata": {},
   "source": [
    "This tells us that some customers have ordered more than once."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51a320b2",
   "metadata": {},
   "source": [
    "### Inspecting OrderDate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "cc6d14ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Orders were scheduled between 2023-03-27 00:04:48.773000 and 2023-04-22 23:56:53.570000\n"
     ]
    }
   ],
   "source": [
    "# Determining the minimum and maximum dates in the orders DataFrame \n",
    "print(\"Orders were scheduled between\", orders_cleaned['OrderDate'].min(), \"and\", orders_cleaned['OrderDate'].max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "9b3eaeea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a histogram to show the number of orders each day\n",
    "ax = sns.histplot(orders_cleaned['OrderDate'])\n",
    "\n",
    "# Adding axes labels to the plot\n",
    "ax.set(xlabel = 'Date', \n",
    "       ylabel = 'Number of Orders')\n",
    "\n",
    "# Adding a title to the plot\n",
    "# Making the title bold and increasing the font size\n",
    "plt.title('Number of Orders Between 27th March and 22nd April 2023', \n",
    "          weight = 'bold')\\\n",
    ".set_fontsize('20')\n",
    "\n",
    "# Rotating the labels on the x-axis to make them more readable\n",
    "plt.xticks(rotation = 45)\n",
    "\n",
    "# Showing the plot\n",
    "plt.show(ax)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79ee108b",
   "metadata": {},
   "source": [
    "It appears that there is some seasonality in the number of orders per day. There definitely seems to be less orders during the weekend. The unusually low number of orders on the 7th and 10th of April correspond to the UK Easter bank holidays."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "957bd861",
   "metadata": {},
   "source": [
    "### Inspecting Courier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "d0111574",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a histplot to show the number of orders for each courier\n",
    "ax = sns.histplot(orders_cleaned['Courier'])\n",
    "\n",
    "# Adding axes labels to the plot\n",
    "ax.set(xlabel = 'Courier', \n",
    "       ylabel = 'Number of Orders')\n",
    "\n",
    "# Adding a title to the plot\n",
    "# Making the title bold and increasing the font size\n",
    "plt.title('Number of Orders for Each Courier', \n",
    "          weight = 'bold')\\\n",
    ".set_fontsize('20')\n",
    "\n",
    "# Showing the plot\n",
    "plt.show(ax)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8271b45a",
   "metadata": {},
   "source": [
    "DX Freight and DX Express Courier are the top two couriers by number of orders. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7304f77",
   "metadata": {},
   "source": [
    "### Inspecting the Distribution of ProductsExVAT and DeliveryCost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "30d88d85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    23414.000000\n",
       "mean       229.175505\n",
       "std        370.685601\n",
       "min          0.000000\n",
       "25%         57.450000\n",
       "50%        125.110000\n",
       "75%        253.797500\n",
       "max      11450.400000\n",
       "Name: ProductsExVAT, dtype: float64"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Looking at the descriptive statistics for ProductsExVAT\n",
    "orders_cleaned['ProductsExVAT'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "706091ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a boxplot to show the distribution of ProductsExVAT\n",
    "ax = sns.boxplot(x = orders_cleaned['ProductsExVAT'])\n",
    "\n",
    "# Adding axes labels to the plot\n",
    "ax.set(xlabel = 'Value (£)')\n",
    "\n",
    "# Adding a title to the plot\n",
    "# Making the title bold and increasing the font size\n",
    "plt.title('Distribution of the Value of the Products Ordered Excluding VAT', \n",
    "          weight = 'bold')\\\n",
    ".set_fontsize('20')\n",
    "\n",
    "# Showing the plot\n",
    "plt.show(ax)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52f701f4",
   "metadata": {},
   "source": [
    " Lots of outliers of the products ordered excluding VAT - We could delete them but then the data would not be representative. Thoughts?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "02313a63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    23414.000000\n",
       "mean        24.954456\n",
       "std         38.174166\n",
       "min          0.000000\n",
       "25%          6.800000\n",
       "50%         13.020000\n",
       "75%         31.210000\n",
       "max       1297.270000\n",
       "Name: DeliveryCost, dtype: float64"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Looking at the descriptive statistics for DeliveryCost\n",
    "orders_cleaned['DeliveryCost'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "5c24a770",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Filter the dataset to exclude placeholder value of -1\n",
    "filtered_orders = orders_cleaned[orders_cleaned['DeliveryCost'] != -1]\n",
    "\n",
    "# Creating a boxplot to show the distribution of DeliveryCost in the filtered dataset\n",
    "ax = sns.boxplot(x = filtered_orders['DeliveryCost'])\n",
    "\n",
    "# Adding axes labels to the plot\n",
    "ax.set(xlabel = 'Cost (£)')\n",
    "\n",
    "# Adding a title to the plot\n",
    "# Making the title bold and increasing the font size\n",
    "plt.title('Distribution of the Cost to Kite Packaging for Delivering the Order (Filtered Data)', \n",
    "          weight = 'bold')\\\n",
    ".set_fontsize('20')\n",
    "\n",
    "# Showing the plot\n",
    "plt.show(ax)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfbb131b",
   "metadata": {},
   "source": [
    "There are many outliers. How should we deal with them? - These outliers represent valid data points so we may need to keep them - perhaps transform the data in future analysis?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f08d4b34",
   "metadata": {},
   "source": [
    "### Inspecting SubTotal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "1d230193",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    103.05\n",
       "1    480.86\n",
       "2    125.28\n",
       "3     28.48\n",
       "4    127.88\n",
       "dtype: float64"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating a variable to store the calculated sub totals according to the metadata:\n",
    "# SubTotal = ProductsExVAT + DeliveryExVAT\n",
    "SubTotalTest = orders_cleaned['ProductsExVAT'] + orders_cleaned['DeliveryExVAT']\n",
    "\n",
    "# Checking that this has worked\n",
    "SubTotalTest.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "b30cf349",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Status</th>\n",
       "      <th>StatusId</th>\n",
       "      <th>PaymentOption</th>\n",
       "      <th>PaymentType</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>VAT</th>\n",
       "      <th>SubTotal</th>\n",
       "      <th>GrandTotal</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>OrderedDespatched</th>\n",
       "      <th>SubTotalError</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2275140</td>\n",
       "      <td>819078</td>\n",
       "      <td>2023-03-27 00:54:04.783</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>1</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>21.26</td>\n",
       "      <td>7.22</td>\n",
       "      <td>5.69</td>\n",
       "      <td>21.26</td>\n",
       "      <td>34.17</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>6.81</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2275143</td>\n",
       "      <td>809450</td>\n",
       "      <td>2023-03-27 01:45:13.837</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>179.67</td>\n",
       "      <td>19.99</td>\n",
       "      <td>39.94</td>\n",
       "      <td>179.67</td>\n",
       "      <td>239.60</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>10.25</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2275145</td>\n",
       "      <td>897079</td>\n",
       "      <td>2023-03-27 02:08:32.563</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>1</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>35.08</td>\n",
       "      <td>7.22</td>\n",
       "      <td>8.46</td>\n",
       "      <td>35.08</td>\n",
       "      <td>50.76</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>6.81</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2275146</td>\n",
       "      <td>897080</td>\n",
       "      <td>2023-03-27 02:16:47.437</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>18.36</td>\n",
       "      <td>7.22</td>\n",
       "      <td>5.11</td>\n",
       "      <td>18.36</td>\n",
       "      <td>30.69</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>6.81</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2275148</td>\n",
       "      <td>897081</td>\n",
       "      <td>2023-03-27 03:05:24.317</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>39.22</td>\n",
       "      <td>15.51</td>\n",
       "      <td>10.94</td>\n",
       "      <td>39.22</td>\n",
       "      <td>65.67</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>13.85</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24378</th>\n",
       "      <td>2299515</td>\n",
       "      <td>772392</td>\n",
       "      <td>2023-04-22 22:05:58.720</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>28.35</td>\n",
       "      <td>7.17</td>\n",
       "      <td>7.10</td>\n",
       "      <td>28.35</td>\n",
       "      <td>42.62</td>\n",
       "      <td>2023-04-24</td>\n",
       "      <td>6.76</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24379</th>\n",
       "      <td>2299516</td>\n",
       "      <td>807311</td>\n",
       "      <td>2023-04-22 22:41:25.630</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>1</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>94.12</td>\n",
       "      <td>7.17</td>\n",
       "      <td>20.25</td>\n",
       "      <td>94.12</td>\n",
       "      <td>121.54</td>\n",
       "      <td>2023-04-24</td>\n",
       "      <td>6.76</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24380</th>\n",
       "      <td>2299517</td>\n",
       "      <td>901729</td>\n",
       "      <td>2023-04-22 22:41:37.903</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>40.54</td>\n",
       "      <td>7.17</td>\n",
       "      <td>9.54</td>\n",
       "      <td>40.54</td>\n",
       "      <td>57.25</td>\n",
       "      <td>2023-04-24</td>\n",
       "      <td>6.76</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24381</th>\n",
       "      <td>2299518</td>\n",
       "      <td>860494</td>\n",
       "      <td>2023-04-22 23:08:00.187</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>48.24</td>\n",
       "      <td>7.17</td>\n",
       "      <td>11.08</td>\n",
       "      <td>48.24</td>\n",
       "      <td>66.49</td>\n",
       "      <td>2023-04-24</td>\n",
       "      <td>6.76</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24382</th>\n",
       "      <td>2299519</td>\n",
       "      <td>890264</td>\n",
       "      <td>2023-04-22 23:11:00.150</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>49.35</td>\n",
       "      <td>7.17</td>\n",
       "      <td>11.30</td>\n",
       "      <td>49.35</td>\n",
       "      <td>67.82</td>\n",
       "      <td>2023-04-24</td>\n",
       "      <td>6.76</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9602 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       OrderID WebsiteID               OrderDate      Status  StatusId  \\\n",
       "3      2275140    819078 2023-03-27 00:54:04.783  Dispatched         6   \n",
       "6      2275143    809450 2023-03-27 01:45:13.837  Dispatched         6   \n",
       "8      2275145    897079 2023-03-27 02:08:32.563  Dispatched         6   \n",
       "9      2275146    897080 2023-03-27 02:16:47.437  Dispatched         6   \n",
       "11     2275148    897081 2023-03-27 03:05:24.317  Dispatched         6   \n",
       "...        ...       ...                     ...         ...       ...   \n",
       "24378  2299515    772392 2023-04-22 22:05:58.720  Dispatched         6   \n",
       "24379  2299516    807311 2023-04-22 22:41:25.630  Dispatched         6   \n",
       "24380  2299517    901729 2023-04-22 22:41:37.903  Dispatched         6   \n",
       "24381  2299518    860494 2023-04-22 23:08:00.187  Dispatched         6   \n",
       "24382  2299519    890264 2023-04-22 23:11:00.150  Dispatched         6   \n",
       "\n",
       "         PaymentOption  PaymentType     Courier  ProductsExVAT  DeliveryExVAT  \\\n",
       "3               Paypal            1  DX Express          21.26           7.22   \n",
       "6      Payment Gateway            2  DX Express         179.67          19.99   \n",
       "8               Paypal            1  DX Express          35.08           7.22   \n",
       "9      Payment Gateway            2  DX Express          18.36           7.22   \n",
       "11     Payment Gateway            2  DX Freight          39.22          15.51   \n",
       "...                ...          ...         ...            ...            ...   \n",
       "24378  Payment Gateway            2  DX Express          28.35           7.17   \n",
       "24379           Paypal            1  DX Express          94.12           7.17   \n",
       "24380  Payment Gateway            2  DX Express          40.54           7.17   \n",
       "24381  Payment Gateway            2  DX Express          48.24           7.17   \n",
       "24382  Payment Gateway            2  DX Express          49.35           7.17   \n",
       "\n",
       "         VAT  SubTotal  GrandTotal DateDespatched  DeliveryCost  \\\n",
       "3       5.69     21.26       34.17     2023-03-27          6.81   \n",
       "6      39.94    179.67      239.60     2023-03-27         10.25   \n",
       "8       8.46     35.08       50.76     2023-03-27          6.81   \n",
       "9       5.11     18.36       30.69     2023-03-27          6.81   \n",
       "11     10.94     39.22       65.67     2023-03-27         13.85   \n",
       "...      ...       ...         ...            ...           ...   \n",
       "24378   7.10     28.35       42.62     2023-04-24          6.76   \n",
       "24379  20.25     94.12      121.54     2023-04-24          6.76   \n",
       "24380   9.54     40.54       57.25     2023-04-24          6.76   \n",
       "24381  11.08     48.24       66.49     2023-04-24          6.76   \n",
       "24382  11.30     49.35       67.82     2023-04-24          6.76   \n",
       "\n",
       "       OrderedDespatched  SubTotalError  \n",
       "3                      0           True  \n",
       "6                      0           True  \n",
       "8                      0           True  \n",
       "9                      0           True  \n",
       "11                     0           True  \n",
       "...                  ...            ...  \n",
       "24378                  2           True  \n",
       "24379                  2           True  \n",
       "24380                  2           True  \n",
       "24381                  2           True  \n",
       "24382                  2           True  \n",
       "\n",
       "[9602 rows x 17 columns]"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating a column to indicate whether there has been an error in calculating the sub total\n",
    "orders_cleaned['SubTotalError'] = SubTotalTest - orders_cleaned['SubTotal'] != 0\n",
    "\n",
    "# Viewing the rows where there has been an error \n",
    "orders_cleaned[orders_cleaned['SubTotalError'] == True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "08c6639f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    23414.000000\n",
      "mean         4.899322\n",
      "std          9.409058\n",
      "min          0.000000\n",
      "25%          0.000000\n",
      "50%          0.000000\n",
      "75%          7.210000\n",
      "max        662.460000\n",
      "Name: SubTotalDifference, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Inspect the difference between SubTotalTest and Subtotal \n",
    "\n",
    "# Calculate the differences between SubTotalTest and SubTotal\n",
    "orders_cleaned['SubTotalDifference'] = SubTotalTest - orders_cleaned['SubTotal']\n",
    "\n",
    "# Explore the distribution of differences\n",
    "print(orders_cleaned['SubTotalDifference'].describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "86145377",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualise the distribution of differences using a histogram\n",
    "sns.histplot(orders_cleaned['SubTotalDifference'])\n",
    "plt.title('Distribution of SubTotal Differences')\n",
    "plt.xlabel('Difference')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84531589",
   "metadata": {},
   "source": [
    "Looks like there is a mean difference of  4.893510 - these are most likely rounding errors or just minor data entry errors. However, there are a few big outlier such as the maximum difference value in the 'SubTotalDifference' column, which is 662.46. Should we delete these big errors?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ae8eb35",
   "metadata": {},
   "source": [
    "### Inspecting GrandTotal\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "e7f8cfa3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    123.67\n",
       "1    577.04\n",
       "2    150.33\n",
       "3     34.17\n",
       "4    153.45\n",
       "dtype: float64"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating a variable to store the calculated grand totals according to the metadata:\n",
    "# GrandTotal = ProductsExVAT + DeliveryExVAT + VAT\n",
    "GrandTotalTest = orders_cleaned['ProductsExVAT'] + orders_cleaned['DeliveryExVAT'] + orders_cleaned['VAT']\n",
    "\n",
    "# Checking that this has worked\n",
    "GrandTotalTest.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "02338f71",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Status</th>\n",
       "      <th>StatusId</th>\n",
       "      <th>PaymentOption</th>\n",
       "      <th>PaymentType</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>VAT</th>\n",
       "      <th>SubTotal</th>\n",
       "      <th>GrandTotal</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>OrderedDespatched</th>\n",
       "      <th>SubTotalError</th>\n",
       "      <th>SubTotalDifference</th>\n",
       "      <th>GrandTotalError</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2275142</td>\n",
       "      <td>709988</td>\n",
       "      <td>2023-03-27 01:28:45.690</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>107.62</td>\n",
       "      <td>0.00</td>\n",
       "      <td>21.52</td>\n",
       "      <td>107.62</td>\n",
       "      <td>129.14</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>15.80</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.00</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2275146</td>\n",
       "      <td>897080</td>\n",
       "      <td>2023-03-27 02:16:47.437</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>18.36</td>\n",
       "      <td>7.22</td>\n",
       "      <td>5.11</td>\n",
       "      <td>18.36</td>\n",
       "      <td>30.69</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>6.81</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>7.22</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2275149</td>\n",
       "      <td>852914</td>\n",
       "      <td>2023-03-27 05:50:28.027</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>40.78</td>\n",
       "      <td>7.23</td>\n",
       "      <td>9.61</td>\n",
       "      <td>40.78</td>\n",
       "      <td>57.62</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>6.81</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>7.23</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2275150</td>\n",
       "      <td>826472</td>\n",
       "      <td>2023-03-27 05:53:36.000</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>164.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>32.98</td>\n",
       "      <td>164.88</td>\n",
       "      <td>197.86</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>26.16</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.00</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2275151</td>\n",
       "      <td>693017</td>\n",
       "      <td>2023-03-27 06:24:06.597</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>206.45</td>\n",
       "      <td>0.00</td>\n",
       "      <td>41.29</td>\n",
       "      <td>206.45</td>\n",
       "      <td>247.74</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>31.60</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.00</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24377</th>\n",
       "      <td>2299514</td>\n",
       "      <td>736532</td>\n",
       "      <td>2023-04-22 21:54:37.273</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>87.40</td>\n",
       "      <td>39.56</td>\n",
       "      <td>25.39</td>\n",
       "      <td>87.40</td>\n",
       "      <td>152.35</td>\n",
       "      <td>2023-04-24</td>\n",
       "      <td>17.47</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>39.56</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24378</th>\n",
       "      <td>2299515</td>\n",
       "      <td>772392</td>\n",
       "      <td>2023-04-22 22:05:58.720</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>28.35</td>\n",
       "      <td>7.17</td>\n",
       "      <td>7.10</td>\n",
       "      <td>28.35</td>\n",
       "      <td>42.62</td>\n",
       "      <td>2023-04-24</td>\n",
       "      <td>6.76</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>7.17</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24381</th>\n",
       "      <td>2299518</td>\n",
       "      <td>860494</td>\n",
       "      <td>2023-04-22 23:08:00.187</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>48.24</td>\n",
       "      <td>7.17</td>\n",
       "      <td>11.08</td>\n",
       "      <td>48.24</td>\n",
       "      <td>66.49</td>\n",
       "      <td>2023-04-24</td>\n",
       "      <td>6.76</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>7.17</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24382</th>\n",
       "      <td>2299519</td>\n",
       "      <td>890264</td>\n",
       "      <td>2023-04-22 23:11:00.150</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>49.35</td>\n",
       "      <td>7.17</td>\n",
       "      <td>11.30</td>\n",
       "      <td>49.35</td>\n",
       "      <td>67.82</td>\n",
       "      <td>2023-04-24</td>\n",
       "      <td>6.76</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>7.17</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24383</th>\n",
       "      <td>2299520</td>\n",
       "      <td>901726</td>\n",
       "      <td>2023-04-22 23:51:40.473</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>1</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>100.09</td>\n",
       "      <td>0.00</td>\n",
       "      <td>20.01</td>\n",
       "      <td>100.09</td>\n",
       "      <td>120.10</td>\n",
       "      <td>2023-04-24</td>\n",
       "      <td>18.63</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>0.00</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5974 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       OrderID WebsiteID               OrderDate      Status  StatusId  \\\n",
       "5      2275142    709988 2023-03-27 01:28:45.690  Dispatched         6   \n",
       "9      2275146    897080 2023-03-27 02:16:47.437  Dispatched         6   \n",
       "12     2275149    852914 2023-03-27 05:50:28.027  Dispatched         6   \n",
       "13     2275150    826472 2023-03-27 05:53:36.000  Dispatched         6   \n",
       "14     2275151    693017 2023-03-27 06:24:06.597  Dispatched         6   \n",
       "...        ...       ...                     ...         ...       ...   \n",
       "24377  2299514    736532 2023-04-22 21:54:37.273  Dispatched         6   \n",
       "24378  2299515    772392 2023-04-22 22:05:58.720  Dispatched         6   \n",
       "24381  2299518    860494 2023-04-22 23:08:00.187  Dispatched         6   \n",
       "24382  2299519    890264 2023-04-22 23:11:00.150  Dispatched         6   \n",
       "24383  2299520    901726 2023-04-22 23:51:40.473  Dispatched         6   \n",
       "\n",
       "         PaymentOption  PaymentType     Courier  ProductsExVAT  DeliveryExVAT  \\\n",
       "5      Payment Gateway            2  DX Freight         107.62           0.00   \n",
       "9      Payment Gateway            2  DX Express          18.36           7.22   \n",
       "12     Payment Gateway            2  DX Express          40.78           7.23   \n",
       "13     Payment Gateway            2  DX Freight         164.88           0.00   \n",
       "14     Payment Gateway            2  DX Freight         206.45           0.00   \n",
       "...                ...          ...         ...            ...            ...   \n",
       "24377  Payment Gateway            2  DX Freight          87.40          39.56   \n",
       "24378  Payment Gateway            2  DX Express          28.35           7.17   \n",
       "24381  Payment Gateway            2  DX Express          48.24           7.17   \n",
       "24382  Payment Gateway            2  DX Express          49.35           7.17   \n",
       "24383           Paypal            1  DX Freight         100.09           0.00   \n",
       "\n",
       "         VAT  SubTotal  GrandTotal DateDespatched  DeliveryCost  \\\n",
       "5      21.52    107.62      129.14     2023-03-27         15.80   \n",
       "9       5.11     18.36       30.69     2023-03-27          6.81   \n",
       "12      9.61     40.78       57.62     2023-03-27          6.81   \n",
       "13     32.98    164.88      197.86     2023-03-27         26.16   \n",
       "14     41.29    206.45      247.74     2023-03-27         31.60   \n",
       "...      ...       ...         ...            ...           ...   \n",
       "24377  25.39     87.40      152.35     2023-04-24         17.47   \n",
       "24378   7.10     28.35       42.62     2023-04-24          6.76   \n",
       "24381  11.08     48.24       66.49     2023-04-24          6.76   \n",
       "24382  11.30     49.35       67.82     2023-04-24          6.76   \n",
       "24383  20.01    100.09      120.10     2023-04-24         18.63   \n",
       "\n",
       "       OrderedDespatched  SubTotalError  SubTotalDifference  GrandTotalError  \n",
       "5                      0          False                0.00             True  \n",
       "9                      0           True                7.22             True  \n",
       "12                     0           True                7.23             True  \n",
       "13                     0          False                0.00             True  \n",
       "14                     0          False                0.00             True  \n",
       "...                  ...            ...                 ...              ...  \n",
       "24377                  2           True               39.56             True  \n",
       "24378                  2           True                7.17             True  \n",
       "24381                  2           True                7.17             True  \n",
       "24382                  2           True                7.17             True  \n",
       "24383                  2          False                0.00             True  \n",
       "\n",
       "[5974 rows x 19 columns]"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating a column to indicate whether there has been an error in calculating the grand total\n",
    "orders_cleaned['GrandTotalError'] = GrandTotalTest - orders_cleaned['GrandTotal'] != 0\n",
    "\n",
    "# Viewing the rows where there has been an error \n",
    "orders_cleaned[orders_cleaned['GrandTotalError'] == True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "b83b206a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    2.341400e+04\n",
      "mean     5.536658e-01\n",
      "std      1.090590e+01\n",
      "min     -9.094947e-13\n",
      "25%      0.000000e+00\n",
      "50%      0.000000e+00\n",
      "75%      0.000000e+00\n",
      "max      9.282000e+02\n",
      "Name: GrandTotalDifference, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Lets explore the difference between the calculated and given grand totals \n",
    "\n",
    "# Creating a column to store the differences between the calculated and given GrandTotal\n",
    "orders_cleaned['GrandTotalDifference'] = GrandTotalTest - orders_cleaned['GrandTotal']\n",
    "\n",
    "# Explore the distribution of differences\n",
    "print(orders_cleaned['GrandTotalDifference'].describe())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "5a93dd76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualise the difference with a histogram \n",
    "\n",
    "plt.hist(orders_cleaned['GrandTotalDifference'], bins=50, range=(-20, 1000))\n",
    "plt.xlabel('Difference between Calculated and Given GrandTotal')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Distribution of GrandTotalDifference')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a15f9de",
   "metadata": {},
   "source": [
    "The majority of the data is not that different hence the low mean However, there is a large maximum value of 968.7.We will need to investigate and remove this data \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "600551e6",
   "metadata": {},
   "source": [
    "# "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32d29098",
   "metadata": {},
   "source": [
    "## Joining the Cleaned DataFrames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "fdc6c537",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Status</th>\n",
       "      <th>StatusId</th>\n",
       "      <th>PaymentOption</th>\n",
       "      <th>PaymentType</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>...</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>OrderedDespatched</th>\n",
       "      <th>SubTotalError</th>\n",
       "      <th>SubTotalDifference</th>\n",
       "      <th>GrandTotalError</th>\n",
       "      <th>GrandTotalDifference</th>\n",
       "      <th>customerID</th>\n",
       "      <th>country</th>\n",
       "      <th>outward_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2275137</td>\n",
       "      <td>852084</td>\n",
       "      <td>2023-03-27 00:04:48.773</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>1</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>103.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>19.17</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.00</td>\n",
       "      <td>False</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>852084</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>CA2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2284674</td>\n",
       "      <td>852084</td>\n",
       "      <td>2023-04-04 22:40:19.970</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>114.99</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>2023-04-05</td>\n",
       "      <td>8.04</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>0.00</td>\n",
       "      <td>False</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>852084</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>CA2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2275138</td>\n",
       "      <td>673961</td>\n",
       "      <td>2023-03-27 00:21:12.657</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>On Account</td>\n",
       "      <td>3</td>\n",
       "      <td>MFS</td>\n",
       "      <td>480.86</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>76.73</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.00</td>\n",
       "      <td>False</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>673961</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>M8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2284238</td>\n",
       "      <td>673961</td>\n",
       "      <td>2023-04-04 14:49:32.570</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>On Account</td>\n",
       "      <td>3</td>\n",
       "      <td>MFS</td>\n",
       "      <td>539.84</td>\n",
       "      <td>19.99</td>\n",
       "      <td>...</td>\n",
       "      <td>2023-04-04</td>\n",
       "      <td>83.60</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>19.99</td>\n",
       "      <td>True</td>\n",
       "      <td>1.136868e-13</td>\n",
       "      <td>673961</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>M8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2275139</td>\n",
       "      <td>679319</td>\n",
       "      <td>2023-03-27 00:22:25.530</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>6</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>2</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>125.28</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>22.67</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.00</td>\n",
       "      <td>False</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>679319</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>SK8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderID WebsiteID               OrderDate      Status  StatusId  \\\n",
       "0  2275137    852084 2023-03-27 00:04:48.773  Dispatched         6   \n",
       "1  2284674    852084 2023-04-04 22:40:19.970  Dispatched         6   \n",
       "2  2275138    673961 2023-03-27 00:21:12.657  Dispatched         6   \n",
       "3  2284238    673961 2023-04-04 14:49:32.570  Dispatched         6   \n",
       "4  2275139    679319 2023-03-27 00:22:25.530  Dispatched         6   \n",
       "\n",
       "     PaymentOption  PaymentType     Courier  ProductsExVAT  DeliveryExVAT  \\\n",
       "0           Paypal            1  DX Freight         103.05           0.00   \n",
       "1  Payment Gateway            2  DX Express         114.99           0.00   \n",
       "2       On Account            3         MFS         480.86           0.00   \n",
       "3       On Account            3         MFS         539.84          19.99   \n",
       "4  Payment Gateway            2  DX Freight         125.28           0.00   \n",
       "\n",
       "   ...  DateDespatched  DeliveryCost  OrderedDespatched SubTotalError  \\\n",
       "0  ...      2023-03-27         19.17                  0         False   \n",
       "1  ...      2023-04-05          8.04                  1         False   \n",
       "2  ...      2023-03-27         76.73                  0         False   \n",
       "3  ...      2023-04-04         83.60                  0          True   \n",
       "4  ...      2023-03-27         22.67                  0         False   \n",
       "\n",
       "   SubTotalDifference  GrandTotalError  GrandTotalDifference  customerID  \\\n",
       "0                0.00            False          0.000000e+00      852084   \n",
       "1                0.00            False          0.000000e+00      852084   \n",
       "2                0.00            False          0.000000e+00      673961   \n",
       "3               19.99             True          1.136868e-13      673961   \n",
       "4                0.00            False          0.000000e+00      679319   \n",
       "\n",
       "          country  outward_code  \n",
       "0  United Kingdom           CA2  \n",
       "1  United Kingdom           CA2  \n",
       "2  United Kingdom            M8  \n",
       "3  United Kingdom            M8  \n",
       "4  United Kingdom           SK8  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merging the orders_cleaned and customers_cleaned DataFrames\n",
    "orders_customers = pd.merge(orders_cleaned, customers_cleaned,\n",
    "                            left_on = 'WebsiteID',\n",
    "                            right_on = 'customerID',\n",
    "                            how = 'inner')\n",
    "                            \n",
    "# Viewing this merged DataFrame\n",
    "orders_customers.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "e38dd99a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Status</th>\n",
       "      <th>PaymentOption</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>country</th>\n",
       "      <th>outward_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2275137</td>\n",
       "      <td>852084</td>\n",
       "      <td>2023-03-27 00:04:48.773</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>103.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>19.17</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>CA2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2284674</td>\n",
       "      <td>852084</td>\n",
       "      <td>2023-04-04 22:40:19.970</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>114.99</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-05</td>\n",
       "      <td>8.04</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>CA2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2275138</td>\n",
       "      <td>673961</td>\n",
       "      <td>2023-03-27 00:21:12.657</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>MFS</td>\n",
       "      <td>480.86</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>76.73</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>M8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2284238</td>\n",
       "      <td>673961</td>\n",
       "      <td>2023-04-04 14:49:32.570</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>MFS</td>\n",
       "      <td>539.84</td>\n",
       "      <td>19.99</td>\n",
       "      <td>2023-04-04</td>\n",
       "      <td>83.60</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>M8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2275139</td>\n",
       "      <td>679319</td>\n",
       "      <td>2023-03-27 00:22:25.530</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>125.28</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>22.67</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>SK8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderID WebsiteID               OrderDate      Status    PaymentOption  \\\n",
       "0  2275137    852084 2023-03-27 00:04:48.773  Dispatched           Paypal   \n",
       "1  2284674    852084 2023-04-04 22:40:19.970  Dispatched  Payment Gateway   \n",
       "2  2275138    673961 2023-03-27 00:21:12.657  Dispatched       On Account   \n",
       "3  2284238    673961 2023-04-04 14:49:32.570  Dispatched       On Account   \n",
       "4  2275139    679319 2023-03-27 00:22:25.530  Dispatched  Payment Gateway   \n",
       "\n",
       "      Courier  ProductsExVAT  DeliveryExVAT DateDespatched  DeliveryCost  \\\n",
       "0  DX Freight         103.05           0.00     2023-03-27         19.17   \n",
       "1  DX Express         114.99           0.00     2023-04-05          8.04   \n",
       "2         MFS         480.86           0.00     2023-03-27         76.73   \n",
       "3         MFS         539.84          19.99     2023-04-04         83.60   \n",
       "4  DX Freight         125.28           0.00     2023-03-27         22.67   \n",
       "\n",
       "          country outward_code  \n",
       "0  United Kingdom          CA2  \n",
       "1  United Kingdom          CA2  \n",
       "2  United Kingdom           M8  \n",
       "3  United Kingdom           M8  \n",
       "4  United Kingdom          SK8  "
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Removing unnecessary columns from the merged DataFrame\n",
    "orders_customers.drop(['StatusId','PaymentType','customerID','VAT','SubTotal','GrandTotal',\n",
    "                                 'SubTotalError','SubTotalDifference','GrandTotalError','GrandTotalDifference',\n",
    "                                 'OrderedDespatched'], axis = 1, inplace = True)\n",
    "\n",
    "# Checking this has worked\n",
    "orders_customers.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "c6d8a88d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\2195370554.py:2: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  grouped = orders_details.groupby('OrderID')['Weight_per_line','Volume_per_line_m3','Pallet_per_line'].sum()\n"
     ]
    }
   ],
   "source": [
    "# Grouping the orders_details DataFrame by OrderID\n",
    "grouped = orders_details.groupby('OrderID')['Weight_per_line','Volume_per_line_m3','Pallet_per_line'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "0be70d08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Status</th>\n",
       "      <th>PaymentOption</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>country</th>\n",
       "      <th>outward_code</th>\n",
       "      <th>Weight_per_line</th>\n",
       "      <th>Volume_per_line_m3</th>\n",
       "      <th>Pallet_per_line</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2275137</td>\n",
       "      <td>852084</td>\n",
       "      <td>2023-03-27 00:04:48.773</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>103.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>19.17</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>CA2</td>\n",
       "      <td>40.80</td>\n",
       "      <td>0.350525</td>\n",
       "      <td>0.215476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2284674</td>\n",
       "      <td>852084</td>\n",
       "      <td>2023-04-04 22:40:19.970</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>114.99</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-05</td>\n",
       "      <td>8.04</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>CA2</td>\n",
       "      <td>23.69</td>\n",
       "      <td>0.094652</td>\n",
       "      <td>0.064633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2275138</td>\n",
       "      <td>673961</td>\n",
       "      <td>2023-03-27 00:21:12.657</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>MFS</td>\n",
       "      <td>480.86</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>76.73</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>M8</td>\n",
       "      <td>172.67</td>\n",
       "      <td>2.080320</td>\n",
       "      <td>1.190000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2284238</td>\n",
       "      <td>673961</td>\n",
       "      <td>2023-04-04 14:49:32.570</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>MFS</td>\n",
       "      <td>539.84</td>\n",
       "      <td>19.99</td>\n",
       "      <td>2023-04-04</td>\n",
       "      <td>83.60</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>M8</td>\n",
       "      <td>318.61</td>\n",
       "      <td>2.761120</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2275139</td>\n",
       "      <td>679319</td>\n",
       "      <td>2023-03-27 00:22:25.530</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>125.28</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>22.67</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>SK8</td>\n",
       "      <td>49.92</td>\n",
       "      <td>0.302700</td>\n",
       "      <td>0.241667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderID WebsiteID               OrderDate      Status    PaymentOption  \\\n",
       "0  2275137    852084 2023-03-27 00:04:48.773  Dispatched           Paypal   \n",
       "1  2284674    852084 2023-04-04 22:40:19.970  Dispatched  Payment Gateway   \n",
       "2  2275138    673961 2023-03-27 00:21:12.657  Dispatched       On Account   \n",
       "3  2284238    673961 2023-04-04 14:49:32.570  Dispatched       On Account   \n",
       "4  2275139    679319 2023-03-27 00:22:25.530  Dispatched  Payment Gateway   \n",
       "\n",
       "      Courier  ProductsExVAT  DeliveryExVAT DateDespatched  DeliveryCost  \\\n",
       "0  DX Freight         103.05           0.00     2023-03-27         19.17   \n",
       "1  DX Express         114.99           0.00     2023-04-05          8.04   \n",
       "2         MFS         480.86           0.00     2023-03-27         76.73   \n",
       "3         MFS         539.84          19.99     2023-04-04         83.60   \n",
       "4  DX Freight         125.28           0.00     2023-03-27         22.67   \n",
       "\n",
       "          country outward_code  Weight_per_line  Volume_per_line_m3  \\\n",
       "0  United Kingdom          CA2            40.80            0.350525   \n",
       "1  United Kingdom          CA2            23.69            0.094652   \n",
       "2  United Kingdom           M8           172.67            2.080320   \n",
       "3  United Kingdom           M8           318.61            2.761120   \n",
       "4  United Kingdom          SK8            49.92            0.302700   \n",
       "\n",
       "   Pallet_per_line  \n",
       "0         0.215476  \n",
       "1         0.064633  \n",
       "2         1.190000  \n",
       "3         2.000000  \n",
       "4         0.241667  "
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merging the orders_customers and grouped DataFrames\n",
    "all_joined = pd.merge(orders_customers, grouped,\n",
    "                      on = 'OrderID',\n",
    "                      how = 'inner')\n",
    "\n",
    "# Viewing this merged DataFrame\n",
    "all_joined.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "7c6d8d1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(22991, 15)"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the shape of this DataFrame\n",
    "all_joined.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "8630bbc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exporting this to an XLSX file\n",
    "all_joined.to_excel('all_joined.xlsx')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e36e37b",
   "metadata": {},
   "source": [
    "# "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ffac065",
   "metadata": {},
   "source": [
    "## Data Cleaning of the Joined DataFrame "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee42da3e",
   "metadata": {},
   "source": [
    "### Extracting customers within 50 miles radius of Midlands (Coventry) from  cust_kite_50m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "2f4edb11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>outward_code</th>\n",
       "      <th>customerID</th>\n",
       "      <th>dist_centres</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>56199</th>\n",
       "      <td>DY6</td>\n",
       "      <td>7700</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>26.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56202</th>\n",
       "      <td>OX18</td>\n",
       "      <td>9759</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>43.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56212</th>\n",
       "      <td>CV5</td>\n",
       "      <td>13038</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>2.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56218</th>\n",
       "      <td>WS15</td>\n",
       "      <td>15160</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>29.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56221</th>\n",
       "      <td>MK1</td>\n",
       "      <td>16152</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>44.21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      outward_code customerID dist_centres  distance\n",
       "56199          DY6       7700     Midlands     26.84\n",
       "56202         OX18       9759     Midlands     43.04\n",
       "56212          CV5      13038     Midlands      2.34\n",
       "56218         WS15      15160     Midlands     29.80\n",
       "56221          MK1      16152     Midlands     44.21"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filtering the DataFrame to include only customers within 50 miles from Midlands\n",
    "cust_coventry_50m = cust_kite_50m[cust_kite_50m ['dist_centres'] == 'Midlands' ]\n",
    "\n",
    "# Viewing this filtered DataFrame\n",
    "cust_coventry_50m.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "5d8dcdfa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>outward_code_x</th>\n",
       "      <th>customerID</th>\n",
       "      <th>dist_centres</th>\n",
       "      <th>distance</th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Status</th>\n",
       "      <th>PaymentOption</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>country</th>\n",
       "      <th>outward_code_y</th>\n",
       "      <th>Weight_per_line</th>\n",
       "      <th>Volume_per_line_m3</th>\n",
       "      <th>Pallet_per_line</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DY6</td>\n",
       "      <td>7700</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>26.84</td>\n",
       "      <td>2295440</td>\n",
       "      <td>7700</td>\n",
       "      <td>2023-04-18 15:16:50.030</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>MFS</td>\n",
       "      <td>375.40</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>34.46</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>DY6</td>\n",
       "      <td>110.00</td>\n",
       "      <td>0.225000</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>OX18</td>\n",
       "      <td>9759</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>43.04</td>\n",
       "      <td>2292996</td>\n",
       "      <td>9759</td>\n",
       "      <td>2023-04-16 20:47:47.493</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>148.41</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-17</td>\n",
       "      <td>14.77</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>OX18</td>\n",
       "      <td>29.24</td>\n",
       "      <td>0.219678</td>\n",
       "      <td>0.200025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CV5</td>\n",
       "      <td>13038</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>2.34</td>\n",
       "      <td>2285048</td>\n",
       "      <td>13038</td>\n",
       "      <td>2023-04-05 10:58:30.303</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>170.94</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-05</td>\n",
       "      <td>14.45</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>CV5</td>\n",
       "      <td>28.50</td>\n",
       "      <td>0.044060</td>\n",
       "      <td>0.044323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>WS15</td>\n",
       "      <td>15160</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>29.80</td>\n",
       "      <td>2297608</td>\n",
       "      <td>15160</td>\n",
       "      <td>2023-04-20 11:31:32.320</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>42.26</td>\n",
       "      <td>7.17</td>\n",
       "      <td>2023-04-20</td>\n",
       "      <td>6.76</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>WS15</td>\n",
       "      <td>8.56</td>\n",
       "      <td>0.053674</td>\n",
       "      <td>0.028439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>MK1</td>\n",
       "      <td>16152</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>44.21</td>\n",
       "      <td>2281052</td>\n",
       "      <td>16152</td>\n",
       "      <td>2023-03-31 14:07:41.883</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>124.36</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-31</td>\n",
       "      <td>22.28</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>MK1</td>\n",
       "      <td>48.74</td>\n",
       "      <td>0.090629</td>\n",
       "      <td>0.059524</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  outward_code_x customerID dist_centres  distance  OrderID WebsiteID  \\\n",
       "0            DY6       7700     Midlands     26.84  2295440      7700   \n",
       "1           OX18       9759     Midlands     43.04  2292996      9759   \n",
       "2            CV5      13038     Midlands      2.34  2285048     13038   \n",
       "3           WS15      15160     Midlands     29.80  2297608     15160   \n",
       "4            MK1      16152     Midlands     44.21  2281052     16152   \n",
       "\n",
       "                OrderDate      Status    PaymentOption     Courier  \\\n",
       "0 2023-04-18 15:16:50.030  Dispatched       On Account         MFS   \n",
       "1 2023-04-16 20:47:47.493  Dispatched  Payment Gateway  DX Freight   \n",
       "2 2023-04-05 10:58:30.303  Dispatched  Payment Gateway  DX Freight   \n",
       "3 2023-04-20 11:31:32.320  Dispatched       On Account  DX Express   \n",
       "4 2023-03-31 14:07:41.883  Dispatched       On Account  DX Freight   \n",
       "\n",
       "   ProductsExVAT  DeliveryExVAT DateDespatched  DeliveryCost         country  \\\n",
       "0         375.40           0.00     2023-04-18         34.46  United Kingdom   \n",
       "1         148.41           0.00     2023-04-17         14.77  United Kingdom   \n",
       "2         170.94           0.00     2023-04-05         14.45  United Kingdom   \n",
       "3          42.26           7.17     2023-04-20          6.76  United Kingdom   \n",
       "4         124.36           0.00     2023-03-31         22.28  United Kingdom   \n",
       "\n",
       "  outward_code_y  Weight_per_line  Volume_per_line_m3  Pallet_per_line  \n",
       "0            DY6           110.00            0.225000         0.200000  \n",
       "1           OX18            29.24            0.219678         0.200025  \n",
       "2            CV5            28.50            0.044060         0.044323  \n",
       "3           WS15             8.56            0.053674         0.028439  \n",
       "4            MK1            48.74            0.090629         0.059524  "
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merging the identified customers within 50 mile radius of Coventry to all_joined \n",
    "merged_50 = pd.merge(cust_coventry_50m, all_joined,\n",
    "                     left_on = 'customerID', \n",
    "                     right_on = 'WebsiteID', \n",
    "                     how = 'inner')\n",
    "\n",
    "# View this DataFrame\n",
    "merged_50.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "ee78f144",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>outward_code_x</th>\n",
       "      <th>dist_centres</th>\n",
       "      <th>distance</th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Status</th>\n",
       "      <th>PaymentOption</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>country</th>\n",
       "      <th>Weight_per_line</th>\n",
       "      <th>Volume_per_line_m3</th>\n",
       "      <th>Pallet_per_line</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DY6</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>26.84</td>\n",
       "      <td>2295440</td>\n",
       "      <td>7700</td>\n",
       "      <td>2023-04-18 15:16:50.030</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>MFS</td>\n",
       "      <td>375.40</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>34.46</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>110.00</td>\n",
       "      <td>0.225000</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>OX18</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>43.04</td>\n",
       "      <td>2292996</td>\n",
       "      <td>9759</td>\n",
       "      <td>2023-04-16 20:47:47.493</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>148.41</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-17</td>\n",
       "      <td>14.77</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>29.24</td>\n",
       "      <td>0.219678</td>\n",
       "      <td>0.200025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CV5</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>2.34</td>\n",
       "      <td>2285048</td>\n",
       "      <td>13038</td>\n",
       "      <td>2023-04-05 10:58:30.303</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>170.94</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-05</td>\n",
       "      <td>14.45</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>28.50</td>\n",
       "      <td>0.044060</td>\n",
       "      <td>0.044323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>WS15</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>29.80</td>\n",
       "      <td>2297608</td>\n",
       "      <td>15160</td>\n",
       "      <td>2023-04-20 11:31:32.320</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>42.26</td>\n",
       "      <td>7.17</td>\n",
       "      <td>2023-04-20</td>\n",
       "      <td>6.76</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>8.56</td>\n",
       "      <td>0.053674</td>\n",
       "      <td>0.028439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>MK1</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>44.21</td>\n",
       "      <td>2281052</td>\n",
       "      <td>16152</td>\n",
       "      <td>2023-03-31 14:07:41.883</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>124.36</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-31</td>\n",
       "      <td>22.28</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>48.74</td>\n",
       "      <td>0.090629</td>\n",
       "      <td>0.059524</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  outward_code_x dist_centres  distance  OrderID WebsiteID  \\\n",
       "0            DY6     Midlands     26.84  2295440      7700   \n",
       "1           OX18     Midlands     43.04  2292996      9759   \n",
       "2            CV5     Midlands      2.34  2285048     13038   \n",
       "3           WS15     Midlands     29.80  2297608     15160   \n",
       "4            MK1     Midlands     44.21  2281052     16152   \n",
       "\n",
       "                OrderDate      Status    PaymentOption     Courier  \\\n",
       "0 2023-04-18 15:16:50.030  Dispatched       On Account         MFS   \n",
       "1 2023-04-16 20:47:47.493  Dispatched  Payment Gateway  DX Freight   \n",
       "2 2023-04-05 10:58:30.303  Dispatched  Payment Gateway  DX Freight   \n",
       "3 2023-04-20 11:31:32.320  Dispatched       On Account  DX Express   \n",
       "4 2023-03-31 14:07:41.883  Dispatched       On Account  DX Freight   \n",
       "\n",
       "   ProductsExVAT  DeliveryExVAT DateDespatched  DeliveryCost         country  \\\n",
       "0         375.40           0.00     2023-04-18         34.46  United Kingdom   \n",
       "1         148.41           0.00     2023-04-17         14.77  United Kingdom   \n",
       "2         170.94           0.00     2023-04-05         14.45  United Kingdom   \n",
       "3          42.26           7.17     2023-04-20          6.76  United Kingdom   \n",
       "4         124.36           0.00     2023-03-31         22.28  United Kingdom   \n",
       "\n",
       "   Weight_per_line  Volume_per_line_m3  Pallet_per_line  \n",
       "0           110.00            0.225000         0.200000  \n",
       "1            29.24            0.219678         0.200025  \n",
       "2            28.50            0.044060         0.044323  \n",
       "3             8.56            0.053674         0.028439  \n",
       "4            48.74            0.090629         0.059524  "
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop irrelevant columns\n",
    "merged_50.drop(columns =['customerID', 'outward_code_y'], inplace = True)\n",
    "\n",
    "# Viewing this DataFrame\n",
    "merged_50.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "8795aa22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 4126 entries, 0 to 4125\n",
      "Data columns (total 17 columns):\n",
      " #   Column              Non-Null Count  Dtype         \n",
      "---  ------              --------------  -----         \n",
      " 0   outward_code_x      4126 non-null   object        \n",
      " 1   dist_centres        4126 non-null   object        \n",
      " 2   distance            4126 non-null   float64       \n",
      " 3   OrderID             4126 non-null   object        \n",
      " 4   WebsiteID           4126 non-null   object        \n",
      " 5   OrderDate           4126 non-null   datetime64[ns]\n",
      " 6   Status              4126 non-null   object        \n",
      " 7   PaymentOption       4126 non-null   object        \n",
      " 8   Courier             4126 non-null   object        \n",
      " 9   ProductsExVAT       4126 non-null   float64       \n",
      " 10  DeliveryExVAT       4126 non-null   float64       \n",
      " 11  DateDespatched      4126 non-null   datetime64[ns]\n",
      " 12  DeliveryCost        4126 non-null   float64       \n",
      " 13  country             4126 non-null   object        \n",
      " 14  Weight_per_line     4126 non-null   float64       \n",
      " 15  Volume_per_line_m3  4126 non-null   float64       \n",
      " 16  Pallet_per_line     4126 non-null   float64       \n",
      "dtypes: datetime64[ns](2), float64(7), object(8)\n",
      "memory usage: 580.2+ KB\n"
     ]
    }
   ],
   "source": [
    "# Checking the DataFrame\n",
    "merged_50.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a77b43e",
   "metadata": {},
   "source": [
    "### Removing the 'Direct' Courier from the DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "960d82f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['MFS', 'DX Freight', 'DX Express', 'Split', 'Direct'], dtype=object)"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List of unique couriers in the DataFrame\n",
    "merged_50['Courier'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "67ffb907",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>outward_code_x</th>\n",
       "      <th>dist_centres</th>\n",
       "      <th>distance</th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Status</th>\n",
       "      <th>PaymentOption</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>country</th>\n",
       "      <th>Weight_per_line</th>\n",
       "      <th>Volume_per_line_m3</th>\n",
       "      <th>Pallet_per_line</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DY6</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>26.84</td>\n",
       "      <td>2295440</td>\n",
       "      <td>7700</td>\n",
       "      <td>2023-04-18 15:16:50.030</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>MFS</td>\n",
       "      <td>375.40</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>34.46</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>110.00</td>\n",
       "      <td>0.225000</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>OX18</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>43.04</td>\n",
       "      <td>2292996</td>\n",
       "      <td>9759</td>\n",
       "      <td>2023-04-16 20:47:47.493</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>148.41</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-17</td>\n",
       "      <td>14.77</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>29.24</td>\n",
       "      <td>0.219678</td>\n",
       "      <td>0.200025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CV5</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>2.34</td>\n",
       "      <td>2285048</td>\n",
       "      <td>13038</td>\n",
       "      <td>2023-04-05 10:58:30.303</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>170.94</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-05</td>\n",
       "      <td>14.45</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>28.50</td>\n",
       "      <td>0.044060</td>\n",
       "      <td>0.044323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>WS15</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>29.80</td>\n",
       "      <td>2297608</td>\n",
       "      <td>15160</td>\n",
       "      <td>2023-04-20 11:31:32.320</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>42.26</td>\n",
       "      <td>7.17</td>\n",
       "      <td>2023-04-20</td>\n",
       "      <td>6.76</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>8.56</td>\n",
       "      <td>0.053674</td>\n",
       "      <td>0.028439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>MK1</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>44.21</td>\n",
       "      <td>2281052</td>\n",
       "      <td>16152</td>\n",
       "      <td>2023-03-31 14:07:41.883</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>124.36</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-31</td>\n",
       "      <td>22.28</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>48.74</td>\n",
       "      <td>0.090629</td>\n",
       "      <td>0.059524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4121</th>\n",
       "      <td>NG8</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>42.25</td>\n",
       "      <td>2286675</td>\n",
       "      <td>847974</td>\n",
       "      <td>2023-04-06 14:29:14.100</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>120.50</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-06</td>\n",
       "      <td>11.36</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>21.00</td>\n",
       "      <td>1.250000</td>\n",
       "      <td>1.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4122</th>\n",
       "      <td>MK43</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>46.14</td>\n",
       "      <td>2299291</td>\n",
       "      <td>848793</td>\n",
       "      <td>2023-04-21 17:10:04.240</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>57.78</td>\n",
       "      <td>7.17</td>\n",
       "      <td>2023-04-24</td>\n",
       "      <td>6.76</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>7.20</td>\n",
       "      <td>0.019250</td>\n",
       "      <td>0.061473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4123</th>\n",
       "      <td>GL1</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>47.05</td>\n",
       "      <td>2286559</td>\n",
       "      <td>851414</td>\n",
       "      <td>2023-04-06 13:29:21.527</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>42.42</td>\n",
       "      <td>7.20</td>\n",
       "      <td>2023-04-06</td>\n",
       "      <td>6.79</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>13.14</td>\n",
       "      <td>0.140650</td>\n",
       "      <td>0.082143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4124</th>\n",
       "      <td>NN11</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>19.77</td>\n",
       "      <td>2288157</td>\n",
       "      <td>858296</td>\n",
       "      <td>2023-04-11 11:41:11.387</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>31.44</td>\n",
       "      <td>12.23</td>\n",
       "      <td>2023-04-11</td>\n",
       "      <td>10.92</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>13.20</td>\n",
       "      <td>0.144000</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4125</th>\n",
       "      <td>DY10</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>26.73</td>\n",
       "      <td>2294631</td>\n",
       "      <td>858733</td>\n",
       "      <td>2023-04-18 09:46:17.907</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>289.44</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>21.32</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>46.56</td>\n",
       "      <td>0.124356</td>\n",
       "      <td>0.090278</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4119 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     outward_code_x dist_centres  distance  OrderID WebsiteID  \\\n",
       "0               DY6     Midlands     26.84  2295440      7700   \n",
       "1              OX18     Midlands     43.04  2292996      9759   \n",
       "2               CV5     Midlands      2.34  2285048     13038   \n",
       "3              WS15     Midlands     29.80  2297608     15160   \n",
       "4               MK1     Midlands     44.21  2281052     16152   \n",
       "...             ...          ...       ...      ...       ...   \n",
       "4121            NG8     Midlands     42.25  2286675    847974   \n",
       "4122           MK43     Midlands     46.14  2299291    848793   \n",
       "4123            GL1     Midlands     47.05  2286559    851414   \n",
       "4124           NN11     Midlands     19.77  2288157    858296   \n",
       "4125           DY10     Midlands     26.73  2294631    858733   \n",
       "\n",
       "                   OrderDate      Status    PaymentOption     Courier  \\\n",
       "0    2023-04-18 15:16:50.030  Dispatched       On Account         MFS   \n",
       "1    2023-04-16 20:47:47.493  Dispatched  Payment Gateway  DX Freight   \n",
       "2    2023-04-05 10:58:30.303  Dispatched  Payment Gateway  DX Freight   \n",
       "3    2023-04-20 11:31:32.320  Dispatched       On Account  DX Express   \n",
       "4    2023-03-31 14:07:41.883  Dispatched       On Account  DX Freight   \n",
       "...                      ...         ...              ...         ...   \n",
       "4121 2023-04-06 14:29:14.100  Dispatched  Payment Gateway  DX Freight   \n",
       "4122 2023-04-21 17:10:04.240  Dispatched  Payment Gateway  DX Express   \n",
       "4123 2023-04-06 13:29:21.527  Dispatched  Payment Gateway  DX Express   \n",
       "4124 2023-04-11 11:41:11.387  Dispatched           Paypal  DX Freight   \n",
       "4125 2023-04-18 09:46:17.907  Dispatched       On Account  DX Freight   \n",
       "\n",
       "      ProductsExVAT  DeliveryExVAT DateDespatched  DeliveryCost  \\\n",
       "0            375.40           0.00     2023-04-18         34.46   \n",
       "1            148.41           0.00     2023-04-17         14.77   \n",
       "2            170.94           0.00     2023-04-05         14.45   \n",
       "3             42.26           7.17     2023-04-20          6.76   \n",
       "4            124.36           0.00     2023-03-31         22.28   \n",
       "...             ...            ...            ...           ...   \n",
       "4121         120.50           0.00     2023-04-06         11.36   \n",
       "4122          57.78           7.17     2023-04-24          6.76   \n",
       "4123          42.42           7.20     2023-04-06          6.79   \n",
       "4124          31.44          12.23     2023-04-11         10.92   \n",
       "4125         289.44           0.00     2023-04-18         21.32   \n",
       "\n",
       "             country  Weight_per_line  Volume_per_line_m3  Pallet_per_line  \n",
       "0     United Kingdom           110.00            0.225000         0.200000  \n",
       "1     United Kingdom            29.24            0.219678         0.200025  \n",
       "2     United Kingdom            28.50            0.044060         0.044323  \n",
       "3     United Kingdom             8.56            0.053674         0.028439  \n",
       "4     United Kingdom            48.74            0.090629         0.059524  \n",
       "...              ...              ...                 ...              ...  \n",
       "4121  United Kingdom            21.00            1.250000         1.250000  \n",
       "4122  United Kingdom             7.20            0.019250         0.061473  \n",
       "4123  United Kingdom            13.14            0.140650         0.082143  \n",
       "4124  United Kingdom            13.20            0.144000         0.100000  \n",
       "4125  United Kingdom            46.56            0.124356         0.090278  \n",
       "\n",
       "[4119 rows x 17 columns]"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filtering merged_50 to exclude the 'Direct' Courier\n",
    "miles50_coventry = merged_50[merged_50['Courier'].isin({'MFS', 'DX Freight', 'DX Express', 'Split'})]\n",
    "\n",
    "# View DataFrame\n",
    "miles50_coventry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "5d4ff70f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3200\n",
      "4119\n",
      "1083490.0499999998\n",
      "105183.05000000002\n"
     ]
    }
   ],
   "source": [
    "# Sense checking the DataFrame\n",
    "\n",
    "print(miles50_coventry['WebsiteID'].nunique())\n",
    "print(miles50_coventry['OrderID'].nunique())\n",
    "print(miles50_coventry['ProductsExVAT'].sum())\n",
    "print(miles50_coventry['DeliveryCost'].sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "87489dab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18223\n",
      "22991\n",
      "5355757.16\n",
      "580368.72\n"
     ]
    }
   ],
   "source": [
    "# Comparing this DataFrame to all_joined\n",
    "print(all_joined['WebsiteID'].nunique())\n",
    "print(all_joined['OrderID'].nunique())\n",
    "print(all_joined['ProductsExVAT'].sum())\n",
    "print(all_joined['DeliveryCost'].sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "630d56b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17.560226087910884\n",
      "17.915706145883174\n",
      "20.230380460341856\n",
      "18.12348708248784\n"
     ]
    }
   ],
   "source": [
    "# Comparing this DataFrame to all_joined\n",
    "print(miles50_coventry['WebsiteID'].nunique()/all_joined['WebsiteID'].nunique()*100)\n",
    "print(miles50_coventry['OrderID'].nunique()/all_joined['OrderID'].nunique()*100)\n",
    "print(miles50_coventry['ProductsExVAT'].sum()/all_joined['ProductsExVAT'].sum()*100)\n",
    "print(miles50_coventry['DeliveryCost'].sum()/all_joined['DeliveryCost'].sum()*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95e7e17c",
   "metadata": {},
   "source": [
    "### Exporting this DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "18c0e956",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exporting the miles50_coventry DataFrame to an XLSX file\n",
    "miles50_coventry.to_excel('miles50_coventry.xlsx')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32bcbf10",
   "metadata": {},
   "source": [
    "## CLUSTERING based on Outercodes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "f645f767",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "import seaborn as sns; sns.set()\n",
    "from sklearn.metrics import silhouette_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "d538c016",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  outward_code_x dist_centres  distance  OrderID WebsiteID  \\\n",
      "0            DY6     Midlands     26.84  2295440      7700   \n",
      "1           OX18     Midlands     43.04  2292996      9759   \n",
      "2            CV5     Midlands      2.34  2285048     13038   \n",
      "3           WS15     Midlands     29.80  2297608     15160   \n",
      "4            MK1     Midlands     44.21  2281052     16152   \n",
      "\n",
      "                OrderDate      Status    PaymentOption     Courier  \\\n",
      "0 2023-04-18 15:16:50.030  Dispatched       On Account         MFS   \n",
      "1 2023-04-16 20:47:47.493  Dispatched  Payment Gateway  DX Freight   \n",
      "2 2023-04-05 10:58:30.303  Dispatched  Payment Gateway  DX Freight   \n",
      "3 2023-04-20 11:31:32.320  Dispatched       On Account  DX Express   \n",
      "4 2023-03-31 14:07:41.883  Dispatched       On Account  DX Freight   \n",
      "\n",
      "   ProductsExVAT  DeliveryExVAT DateDespatched  DeliveryCost         country  \\\n",
      "0         375.40           0.00     2023-04-18         34.46  United Kingdom   \n",
      "1         148.41           0.00     2023-04-17         14.77  United Kingdom   \n",
      "2         170.94           0.00     2023-04-05         14.45  United Kingdom   \n",
      "3          42.26           7.17     2023-04-20          6.76  United Kingdom   \n",
      "4         124.36           0.00     2023-03-31         22.28  United Kingdom   \n",
      "\n",
      "   Weight_per_line  Volume_per_line_m3  Pallet_per_line  \n",
      "0           110.00            0.225000         0.200000  \n",
      "1            29.24            0.219678         0.200025  \n",
      "2            28.50            0.044060         0.044323  \n",
      "3             8.56            0.053674         0.028439  \n",
      "4            48.74            0.090629         0.059524  \n",
      "4119\n"
     ]
    }
   ],
   "source": [
    "# Create a new DataFrame\n",
    "df = pd.DataFrame(miles50_coventry)\n",
    "\n",
    "# View DataFrame\n",
    "print(df.head())\n",
    "print(len(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "f4409f98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>outward_code_x</th>\n",
       "      <th>dist_centres</th>\n",
       "      <th>distance</th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Status</th>\n",
       "      <th>PaymentOption</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>country</th>\n",
       "      <th>Weight_per_line</th>\n",
       "      <th>Volume_per_line_m3</th>\n",
       "      <th>Pallet_per_line</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>B1</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>15.96</td>\n",
       "      <td>2277454</td>\n",
       "      <td>715930</td>\n",
       "      <td>2023-03-28 14:57:23.563</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>151.20</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-28</td>\n",
       "      <td>21.89</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>48.00</td>\n",
       "      <td>0.270000</td>\n",
       "      <td>0.277778</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B1</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>15.96</td>\n",
       "      <td>2280166</td>\n",
       "      <td>839891</td>\n",
       "      <td>2023-03-30 15:40:55.240</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Cheque, BACS or pro-forma</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>135.12</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-30</td>\n",
       "      <td>14.90</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>29.91</td>\n",
       "      <td>0.334815</td>\n",
       "      <td>0.187500</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>B1</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>15.96</td>\n",
       "      <td>2280841</td>\n",
       "      <td>898278</td>\n",
       "      <td>2023-03-31 12:02:31.487</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>57.15</td>\n",
       "      <td>7.21</td>\n",
       "      <td>2023-03-31</td>\n",
       "      <td>6.80</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>16.00</td>\n",
       "      <td>0.062500</td>\n",
       "      <td>0.050505</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>B1</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>15.96</td>\n",
       "      <td>2282341</td>\n",
       "      <td>692921</td>\n",
       "      <td>2023-04-03 11:55:14.213</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Paypal</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>101.01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-03</td>\n",
       "      <td>17.62</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>36.67</td>\n",
       "      <td>0.264710</td>\n",
       "      <td>0.267698</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>B10</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>13.46</td>\n",
       "      <td>2279447</td>\n",
       "      <td>670813</td>\n",
       "      <td>2023-03-30 10:32:54.213</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>MFS</td>\n",
       "      <td>362.79</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-30</td>\n",
       "      <td>34.46</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>89.07</td>\n",
       "      <td>0.996801</td>\n",
       "      <td>0.952560</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4114</th>\n",
       "      <td>WV7</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>34.22</td>\n",
       "      <td>2294508</td>\n",
       "      <td>896767</td>\n",
       "      <td>2023-04-18 08:53:50.233</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>Payment Gateway</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>90.09</td>\n",
       "      <td>32.22</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>10.92</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>18.90</td>\n",
       "      <td>1.411200</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4115</th>\n",
       "      <td>WV8</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>31.68</td>\n",
       "      <td>2284862</td>\n",
       "      <td>506826</td>\n",
       "      <td>2023-04-05 09:35:57.953</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>103.36</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-05</td>\n",
       "      <td>9.59</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>28.98</td>\n",
       "      <td>0.073536</td>\n",
       "      <td>0.035000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4116</th>\n",
       "      <td>WV8</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>31.68</td>\n",
       "      <td>2290749</td>\n",
       "      <td>506826</td>\n",
       "      <td>2023-04-13 10:47:06.773</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>170.64</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-13</td>\n",
       "      <td>20.17</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>43.44</td>\n",
       "      <td>0.158652</td>\n",
       "      <td>0.076190</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4117</th>\n",
       "      <td>WV8</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>31.68</td>\n",
       "      <td>2295159</td>\n",
       "      <td>506826</td>\n",
       "      <td>2023-04-18 13:20:02.547</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>317.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-19</td>\n",
       "      <td>32.10</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>74.58</td>\n",
       "      <td>2.493096</td>\n",
       "      <td>1.338889</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4118</th>\n",
       "      <td>WV9</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>29.72</td>\n",
       "      <td>2299208</td>\n",
       "      <td>392458</td>\n",
       "      <td>2023-04-21 16:00:09.777</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>80.49</td>\n",
       "      <td>7.17</td>\n",
       "      <td>2023-04-21</td>\n",
       "      <td>6.76</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>10.50</td>\n",
       "      <td>0.018876</td>\n",
       "      <td>0.011335</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4119 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     outward_code_x dist_centres  distance  OrderID WebsiteID  \\\n",
       "0                B1     Midlands     15.96  2277454    715930   \n",
       "1                B1     Midlands     15.96  2280166    839891   \n",
       "2                B1     Midlands     15.96  2280841    898278   \n",
       "3                B1     Midlands     15.96  2282341    692921   \n",
       "4               B10     Midlands     13.46  2279447    670813   \n",
       "...             ...          ...       ...      ...       ...   \n",
       "4114            WV7     Midlands     34.22  2294508    896767   \n",
       "4115            WV8     Midlands     31.68  2284862    506826   \n",
       "4116            WV8     Midlands     31.68  2290749    506826   \n",
       "4117            WV8     Midlands     31.68  2295159    506826   \n",
       "4118            WV9     Midlands     29.72  2299208    392458   \n",
       "\n",
       "                   OrderDate      Status              PaymentOption  \\\n",
       "0    2023-03-28 14:57:23.563  Dispatched                 On Account   \n",
       "1    2023-03-30 15:40:55.240  Dispatched  Cheque, BACS or pro-forma   \n",
       "2    2023-03-31 12:02:31.487  Dispatched            Payment Gateway   \n",
       "3    2023-04-03 11:55:14.213  Dispatched                     Paypal   \n",
       "4    2023-03-30 10:32:54.213  Dispatched            Payment Gateway   \n",
       "...                      ...         ...                        ...   \n",
       "4114 2023-04-18 08:53:50.233  Dispatched            Payment Gateway   \n",
       "4115 2023-04-05 09:35:57.953  Dispatched                 On Account   \n",
       "4116 2023-04-13 10:47:06.773  Dispatched                 On Account   \n",
       "4117 2023-04-18 13:20:02.547  Dispatched                 On Account   \n",
       "4118 2023-04-21 16:00:09.777  Dispatched                 On Account   \n",
       "\n",
       "         Courier  ProductsExVAT  DeliveryExVAT DateDespatched  DeliveryCost  \\\n",
       "0     DX Freight         151.20           0.00     2023-03-28         21.89   \n",
       "1     DX Freight         135.12           0.00     2023-03-30         14.90   \n",
       "2     DX Express          57.15           7.21     2023-03-31          6.80   \n",
       "3     DX Freight         101.01           0.00     2023-04-03         17.62   \n",
       "4            MFS         362.79           0.00     2023-03-30         34.46   \n",
       "...          ...            ...            ...            ...           ...   \n",
       "4114  DX Freight          90.09          32.22     2023-04-18         10.92   \n",
       "4115  DX Express         103.36           0.00     2023-04-05          9.59   \n",
       "4116  DX Freight         170.64           0.00     2023-04-13         20.17   \n",
       "4117  DX Freight         317.00           0.00     2023-04-19         32.10   \n",
       "4118  DX Express          80.49           7.17     2023-04-21          6.76   \n",
       "\n",
       "             country  Weight_per_line  Volume_per_line_m3  Pallet_per_line  \\\n",
       "0     United Kingdom            48.00            0.270000         0.277778   \n",
       "1     United Kingdom            29.91            0.334815         0.187500   \n",
       "2     United Kingdom            16.00            0.062500         0.050505   \n",
       "3     United Kingdom            36.67            0.264710         0.267698   \n",
       "4     United Kingdom            89.07            0.996801         0.952560   \n",
       "...              ...              ...                 ...              ...   \n",
       "4114  United Kingdom            18.90            1.411200         0.750000   \n",
       "4115  United Kingdom            28.98            0.073536         0.035000   \n",
       "4116  United Kingdom            43.44            0.158652         0.076190   \n",
       "4117  United Kingdom            74.58            2.493096         1.338889   \n",
       "4118  United Kingdom            10.50            0.018876         0.011335   \n",
       "\n",
       "      size  \n",
       "0        1  \n",
       "1        1  \n",
       "2        1  \n",
       "3        1  \n",
       "4        1  \n",
       "...    ...  \n",
       "4114     1  \n",
       "4115     1  \n",
       "4116     1  \n",
       "4117     1  \n",
       "4118     1  \n",
       "\n",
       "[4119 rows x 18 columns]"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(df.columns.tolist(),as_index=False).size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "7d6b4b32",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create new DF with relevant details \n",
    "df1 = df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "8a029e54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "outward_code_x                object\n",
       "dist_centres                  object\n",
       "distance                     float64\n",
       "OrderID                       object\n",
       "WebsiteID                     object\n",
       "OrderDate             datetime64[ns]\n",
       "Status                        object\n",
       "PaymentOption                 object\n",
       "Courier                       object\n",
       "ProductsExVAT                float64\n",
       "DeliveryExVAT                float64\n",
       "DateDespatched        datetime64[ns]\n",
       "DeliveryCost                 float64\n",
       "country                       object\n",
       "Weight_per_line              float64\n",
       "Volume_per_line_m3           float64\n",
       "Pallet_per_line              float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check dates are correctly formatted \n",
    "df1.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "1b41d1cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Update Dateformat \n",
    "df1['OrderDate'] = pd.to_datetime(df1['OrderDate']) \n",
    "df1['OrderDate'] = df1['OrderDate'].dt.strftime('%d/%m/%Y')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "38087806",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>outcode</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>AB10</td>\n",
       "      <td>57.131086</td>\n",
       "      <td>-2.122482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>AB11</td>\n",
       "      <td>57.131210</td>\n",
       "      <td>-2.082261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>AB12</td>\n",
       "      <td>57.098381</td>\n",
       "      <td>-2.172400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>AB13</td>\n",
       "      <td>57.108000</td>\n",
       "      <td>-2.237000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>AB14</td>\n",
       "      <td>57.101000</td>\n",
       "      <td>-2.270000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id outcode   latitude  longitude\n",
       "0   1    AB10  57.131086  -2.122482\n",
       "1   2    AB11  57.131210  -2.082261\n",
       "2   3    AB12  57.098381  -2.172400\n",
       "3   4    AB13  57.108000  -2.237000\n",
       "4   5    AB14  57.101000  -2.270000"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reading the Excel file of coordinate information into a Pandas DataFrame\n",
    "long_lat = pd.read_csv('UK-Postcodes.csv')\n",
    "\n",
    "# Viewing the DataFrame\n",
    "long_lat.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "d64c2d86",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merging the long-lat and customers_cleaned DataFrames into a new one\n",
    "# Carrying out a left join to get a latitude and longitiude for each of our postcodes\n",
    "data = pd.merge(df1, long_lat, \n",
    "                    left_on = 'outward_code_x',\n",
    "                    right_on = 'outcode',\n",
    "                    how = 'left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "131e2fa5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4119"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['outward_code_x'].nunique()\n",
    "data['OrderID'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "afc8c704",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='longitude', ylabel='latitude'>"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a scatterplot with Seaborn.\n",
    "sns.scatterplot(x='longitude',\n",
    "                y='latitude',\n",
    "                data=data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "ab522148",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>id</th>\n",
       "      <th>OrderID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-2.173682</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>766</td>\n",
       "      <td>2295440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.582311</td>\n",
       "      <td>51.767526</td>\n",
       "      <td>1934</td>\n",
       "      <td>2292996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.562449</td>\n",
       "      <td>52.424186</td>\n",
       "      <td>597</td>\n",
       "      <td>2285048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.911238</td>\n",
       "      <td>52.765303</td>\n",
       "      <td>2915</td>\n",
       "      <td>2297608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.726102</td>\n",
       "      <td>52.006042</td>\n",
       "      <td>1664</td>\n",
       "      <td>2281052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4114</th>\n",
       "      <td>-1.213406</td>\n",
       "      <td>52.964498</td>\n",
       "      <td>1820</td>\n",
       "      <td>2286675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4115</th>\n",
       "      <td>-0.566550</td>\n",
       "      <td>52.115500</td>\n",
       "      <td>1681</td>\n",
       "      <td>2299291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4116</th>\n",
       "      <td>-2.242429</td>\n",
       "      <td>51.853212</td>\n",
       "      <td>1009</td>\n",
       "      <td>2286559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4117</th>\n",
       "      <td>-1.187850</td>\n",
       "      <td>52.217508</td>\n",
       "      <td>1826</td>\n",
       "      <td>2288157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4118</th>\n",
       "      <td>-2.194016</td>\n",
       "      <td>52.374841</td>\n",
       "      <td>757</td>\n",
       "      <td>2294631</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4119 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      longitude   latitude    id  OrderID\n",
       "0     -2.173682  52.496759   766  2295440\n",
       "1     -1.582311  51.767526  1934  2292996\n",
       "2     -1.562449  52.424186   597  2285048\n",
       "3     -1.911238  52.765303  2915  2297608\n",
       "4     -0.726102  52.006042  1664  2281052\n",
       "...         ...        ...   ...      ...\n",
       "4114  -1.213406  52.964498  1820  2286675\n",
       "4115  -0.566550  52.115500  1681  2299291\n",
       "4116  -2.242429  51.853212  1009  2286559\n",
       "4117  -1.187850  52.217508  1826  2288157\n",
       "4118  -2.194016  52.374841   757  2294631\n",
       "\n",
       "[4119 rows x 4 columns]"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a pairplot with Seaborn.\n",
    "x = data[['longitude', 'latitude','id','OrderID']]\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "9e29fd6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = x[['longitude','latitude']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "4a00c52c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Determine the number of clusters: Elbow method.\n",
    "# Elbow chart for us to decide on the number of optimal clusters.\n",
    "ss = []\n",
    "for i in range(1, 11):\n",
    "    kmeans = KMeans(n_clusters = i,\n",
    "                    init = 'k-means++', \n",
    "                    max_iter = 500,\n",
    "                    n_init = 10,\n",
    "                    random_state = 42)\n",
    "    kmeans.fit(a)\n",
    "    ss.append(kmeans.inertia_)\n",
    "\n",
    "plt.plot(range(1, 11),\n",
    "         ss,\n",
    "         marker='o')\n",
    "\n",
    "plt.title(\"The Elbow Method\")\n",
    "plt.xlabel(\"Number of clusters\")\n",
    "plt.ylabel(\"SS\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "1a20830d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\cluster\\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "C:\\Users\\christina.hudaja\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\cluster\\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "C:\\Users\\christina.hudaja\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\cluster\\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "C:\\Users\\christina.hudaja\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\cluster\\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "C:\\Users\\christina.hudaja\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\cluster\\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "C:\\Users\\christina.hudaja\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\cluster\\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "C:\\Users\\christina.hudaja\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\cluster\\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "C:\\Users\\christina.hudaja\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\cluster\\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "C:\\Users\\christina.hudaja\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\cluster\\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Determine the number of clusters: Silhouette method.\n",
    "# Find the range of clusters to be used using silhouette method.\n",
    "sil = []\n",
    "kmax = 10\n",
    "\n",
    "\n",
    "for k in range(2, kmax+1):\n",
    "    kmeans_s = KMeans(n_clusters = k).fit(a)\n",
    "    labels = kmeans_s.labels_\n",
    "    sil.append(silhouette_score(a,\n",
    "                                labels,\n",
    "                                metric = 'euclidean'))\n",
    "\n",
    "# Plot the silhouette method.\n",
    "plt.plot(range(2, kmax+1),\n",
    "         sil,\n",
    "         marker='o')\n",
    "\n",
    "plt.title(\"The Silhouette Method\")\n",
    "plt.xlabel(\"Number of clusters\")\n",
    "plt.ylabel(\"Sil\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3202cd40",
   "metadata": {},
   "source": [
    "### Elbow method indicates 4 clusters\n",
    "### Silhouette Method indicates 5 clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "8b855aee",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\cluster\\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\3747191018.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  a['K-Means Predicted'] = clusters4\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x18c64772ad0>"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 653.972x500 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use 4 clusters:\n",
    "kmeans1 = KMeans(n_clusters = 4,\n",
    "                max_iter = 15000,\n",
    "                init='k-means++',\n",
    "                random_state=42).fit(a)\n",
    "\n",
    "clusters4 = kmeans1.labels_\n",
    "a['K-Means Predicted'] = clusters4\n",
    "\n",
    "# Plot the predicted.\n",
    "sns.pairplot(a,\n",
    "             hue='K-Means Predicted',\n",
    "             diag_kind= 'kde')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "6f5a09bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Clusters based on Langitude & Latitude - 4 clusters')"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualising the clusters.\n",
    "# Set plot size.\n",
    "sns.set(rc = {'figure.figsize':(12, 8)})\n",
    "\n",
    "sns.scatterplot(x='longitude', \n",
    "                y ='latitude',\n",
    "                data=a ,\n",
    "                hue='K-Means Predicted',palette=\"deep\")\n",
    "plt.legend(title='Cluster type', fontsize=14)\n",
    "plt.xlabel('longitude', fontsize=16);\n",
    "plt.ylabel('latitude', fontsize=16);\n",
    "plt.title('Clusters based on Langitude & Latitude - 4 clusters', fontsize=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "94ba7d89",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\cluster\\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\111323446.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  a['K-Means Predicted'] = clusters5\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x18c5da6f5e0>"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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JK699lp+8IMf8Otf/5p58+Zx4oknkkql0DSN+++/n0MPPZRZs2Zx+OGH89hjj/XZ3xNPPMHhhx/O7Nmz+f73v09DQ0PW+lxu6A8++IAzzjiD3XffnYULF/KrX/2KQCDAkiVLOOusswA466yzssIMXn/9dU466SR222039ttvP377298SjWa/l5YuXcopp5zCnDlzOPzww/nwww+3+Tp1M+rNbJMnT+b++++ntLQ0a7mu6wQCuXvixmIxNm/ezKRJk4ZjisNKy+YWfCXenOuKKotY/8U6lISCySyDEkc356iDputEAhFKxpb2XdcPKQ00PS0W44P44A/XNGH2ubCV+oi3+Amtrcc9sXKLqehENjdRMdlDrFfBYJvTRtgf2qr5DTUmuwU1mUJNKkjm3CLAHwxT5HIQ1PUh7qTdQ9XYCp5/6kuSSQVz17xWrViD2+PKxE7KskxRcSG1NYOLlzEYHJGIQs8nTY6HQpKQbI6crmiT2wuixGCzmbcHkViKCGB3FiJLAvFEimSeJBuv18q7by4jGcvtfnzlH68xbuZYMFsRdI0v3v0KAKfPweFnHsYz9zzbZ5s9D96dFR+vpH59Pef//sesXb6ecGeYcTPGYnfa2LKLjMHg6W1RfPDBB5k3b95Wbe92u9lvv/146aWXOO200zLLX3nlFcrLy5k9e3bW+I6ODk499VRsNhu//OUvsdlsPPLII5xxxhk8+eSTTJw4kVgsxllnnYXP5+PXv/41LpeLTz/9lLvuuguLxcKNN96Y2d+jjz7Knnvuye9//3sCgQC/+93vuPbaazNxlFdddRXt7e1cf/31OBwOnn32Wa655hrKy8uZP3/+Vl+vbiE6ZsyYzLJly5YhCAJ33nknkUgEWZb51a9+xVNPPcX555/P7rvvzieffMJNN91EMBjk4osvBuAf//gHN954I2eeeSaLFy/mo48+4pe//GW/x3/nnXe44IILOOigg7j99tsJBALccsst1NTUcNddd/GrX/2KG264gV/96leZ83vuuee48sorOfbYY7n00kupr6/n9ttvZ926dfz9739HEARWrFjB2Wefzfz58/nLX/6SEfTfllEvFouLi1m0aFHWskcffZREIsF+++2Xc5u1a9eiaRovv/wyN9xwA8lkkr333psrr7xy0PECo5WWzc2UjMl9DoWVxeiaTuPGBsZMqkDQVLQc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ysr47W9/SzgcZsyYMXz99de88847nH/++YPez9YyZcoUjjvuOH75y19SX1/PrFmz2LhxI7fffjtVVVWMGzcOQRC48sorueKKK/jFL37BEUccwfLly3n88cf73fdPf/pTLrzwQi699FJOOukkOjo6+NOf/sSBBx7I9OnTWb063XHr7bffxuPxMG3aNC677DJ+9atfIUkSBx54IMFgkLvvvpvm5uZMOMDFF1/M66+/zjnnnMOPf/xj/H4/t99+OybTtws9GvXRvc8//zwAjz32GAsXLsz676GHHgLg888/Z+HChXz++ecAzJw5kwceeICVK1dy0kkn8ZOf/ITp06dz7733jooei9tK86amPp1btsRiszBj7ljC4URXWY4t0HUCbZ04emUkby2JlIBZAknI/bJKdKQFnpxDkNqrSxBkiYZX0yUKXJVFCOhoQt+5Wh02wsEIw1eEZmBMDitKONbH7Q7Q2tyOzWZBsKfP25wY3vZkx518FOFQhMnTJjJ7j1l91ouiSGGRj3pDLI5+BBGzJ/+zbnJ6MlnRuiAi2fJ//JkcLuKDqXW1laTiCo//6T9ZQhHA39LJA7/6O7FA/g89TaMr0SX/sz1oMWyQk7Fjx3LttddSX1+fydIdLEcddRSKovQb319aWsoTTzxBZWUlv/nNb7jgggv48ssv+d3vfscPf/hDAE488UQuvvhiXnrpJc4991zuuOMO5s2bxw033EBnZyfr1q0b9Jz++te/sv/++/OXv/yFs88+m8cff5yf/OQnmfI1Q8Xvf/97fvSjH/HEE0/w4x//mHvvvZejjjqKhx56KGP9O+aYY7j99ttZvnw5F154IW+99RY33HBDv/s98MADue+++6irq+Piiy/mtttu48gjj+RPf/oTkM6zOOaYY/jnP//JlVdeCcB3v/td/vSnP/HZZ59xwQUX8Jvf/Iaqqioee+yxjKgfN24c//jHP5Akicsuu4y77rqLa665ZqvEeS4E3XgiB4WqakiSmPmyHm5ioSi3nH0zC086gAmz+4vx1Km0x9i4pokpi/bpU5A73BniqT//H7sfsifFVdtWRkhAp9yl0h6TESxOQuFYllu247M1OMwa3imVBAIptvTGpmIJ4s1+rMVebGZwR/0EbR70LcStv7mD9cvXsfh7B2G2bVuA/vYm1tZJ/SermfHdRVhc2TEsTzz6JPU19Zx4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9cDJ8f5YrVaKi4spLi4mEolw5513cs8995CVlRXV3mC/P4IwFIlg8TA6nY78/Py4j1dXV7Nlyxbmzp3btc1kMpGdnU1DQ8OJOMUT7mivyUGPPfYYzz//PFdddRX333//13ZYvrevx6nObDZ32zZy5EiWL19+TO3pdDp0Ol239rxeLy6Xa8DnDB/tehoaGpg/fz779+/n+eef7zbf7XAJCQmYzeZufzMaGhq6DX0OlP68Hhja78/atWsxGAyUlpZ2PVZYWAh0XueRweJQeH8EYagRC1z6YPv27dx2221UVlZ2bWtvb2fv3r2ndADx6KOP8vzzz7NgwQL+93//92sbKAq9s2PHDiZMmNBtMcCWLVt6XPQSTyQSYc6cOTz77LNR2zdv3kxycvKAByJHux6Xy8U111xDS0sLL7/88lEDK0mSmDhxIqtXr47avmrVKiZNmtTv53+k/r6eof7+/OUvf+Hhhx+OemzTpk1otVqGDRvWrb3Bfn8EYSgSPYt9cMYZZ1BUVMSCBQv46U9/iqqqPProozidTr797W8P9ukNilWrVvHCCy9w1VVXcfHFF9PY2Nj1mNlsxmKxDOLZCYNh5MiRFBYW8vOf/5wHHngAp9PJa6+9xsaNG3njjTd61UZHRwehUIjExERkWWbu3Lm88MILDBs2jJKSElasWMELL7zA/fffP8BXc/Trefjhh6mqquKFF14gMTEx6juQmJiIRqOJuh6A6667jhtuuIHi4mLOOOMMFi1axPbt23nooYdOuusZ6u9PR0cHV199NU8++STf/OY32bp1K48++ihXX311VyA7lN4fQRiKJFU9Shp7IUpDQwO//vWv+eKLLwgGg8yaNYv77rvva7m4pTd++tOf8tprr8V87JZbbuHWW289wWc0tFx11VVkZWXxyCOPDPapnFAtLS089thjLF26lPb2doqLi7n77ruZPHly1H4HFwy99NJLTJs2rWv7woULWb16dVeuTkVReP7551m0aBF1dXVkZ2dz/fXX853vfGdQr2fixImMHz8+7sKHTz/9lOzs7G7XA/DWW2/xzDPPUFdXR0FBAffcc88xzeccCtczVN+fg5+3ZcuW8fvf/57du3eTmJjI9773PebPn981l3KovT+CMNSIYFEQBEEQBEGIS8xZFARBEARBEOISwaIgCIIgCIIQlwgWBUEQBEEQhLhEsCgIgiAIgiDEJYJFQRAEQRAEIS4RLAqCIAiCIAhxiWBROOmIbE+CEK033wnxvREE4ViJYFHolTlz5rBw4cIT/rxvvvkmRUVF7N+/H4Ddu3fz/e9/v1/a3r9/P0VFRbz55pv90p4g9Ie+ftc+/fRT7r333q5/r1q1iqKiIlatWgVAXV0dN954I9XV1f1yfkVFRTz11FP90pYgCCcHESwKQ9qZZ57Jq6++SmpqKgAffvghGzZsGOSzEoSh469//Su1tbVd/y4pKeHVV1+lpKQEgC+//JLPP/98kM5OEISvA1EbWhjSEhMTu+q1CoJwdFarlfHjxw/2aQiC8DUiehaFPuvo6ODhhx/mnHPOobS0lIsuuog33ngjap85c+bw5JNP8utf/5qZM2cyduxYfvjDH7J3796o/f79739zwQUXUFpaysUXX8yKFSsoLi7uGho+fBj6qaee4g9/+AMQPRQWa1jsqaeeoqioKGrb4sWLufjiixk7diyXXnopO3bs6HZtbW1t/OxnP2PmzJmUlpbyne98hxUrVhzfCyYIx2j//v0sWLCAWbNmUVJSwowZM1iwYAGtra1AZ+3x1atXs3r16q6h58OHod98803uu+8+AM4+++yu4e1YQ91HTvkAWL16Nd/97ncZN24cc+fO5csvv+x2joFAgN/85jfMnj2bMWPGMG/ePD744IOBekkEQRgEomdR6BO/388VV1xBU1MTt956Kzk5OXzyySfcf//9NDU18aMf/ahr35deeolJkybx8MMP43K5eOihh1i4cCGvvvoqAG+99RYLFy7k8ssv57777uOrr77ipptuIhwOx3zuyy+/nLq6Ot544w1effVV0tPTe33eS5Ys4bbbbuPCCy/k7rvvZseOHdxzzz1R+wQCAa655hqampq48847SU1NZdGiRfy///f/eOGFF5gxY8YxvGKCcGx8Ph9XX301TqeTBx54AJvNxrp163j66acxGAz84he/4IEHHuj6HD/wwAMUFBSwdevWrjbOPPNMfvzjH/Pss8/yhz/8odsNVE+2bt3K9ddfz7Rp03jiiSeoqanhrrvuitpHVVVuvvlm1q9fz2233UZ+fj4ff/wxd955J8FgkEsuuaRfXgtBEAaXCBaFPnnzzTcpKyvj5ZdfZtKkSQCcfvrpKIrCM888w/e+9z0SEhIAsNvtPPPMM2g0GgAqKyt56qmn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\n",
      "text/plain": [
       "<Figure size 653.972x500 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use 5 clusters:\n",
    "kmeans2 = KMeans(n_clusters = 5,\n",
    "                max_iter = 15000,\n",
    "                init='k-means++',\n",
    "                random_state=42).fit(a)\n",
    "\n",
    "clusters5 = kmeans2.labels_\n",
    "a['K-Means Predicted'] = clusters5\n",
    "\n",
    "# Plot the predicted.\n",
    "sns.pairplot(a,\n",
    "             hue='K-Means Predicted',\n",
    "             diag_kind= 'kde')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "33a69834",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Clusters based on Langitude & Latitude - 5 clusters')"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualising the clusters.\n",
    "# Set plot size.\n",
    "sns.set(rc = {'figure.figsize':(12, 8)})\n",
    "\n",
    "sns.scatterplot(x='longitude', \n",
    "                y ='latitude',\n",
    "                data=a ,\n",
    "                hue='K-Means Predicted',palette=\"deep\")\n",
    "plt.legend(title='Cluster type', fontsize=14)\n",
    "plt.xlabel('longitude', fontsize=16);\n",
    "plt.ylabel('latitude', fontsize=16);\n",
    "plt.title('Clusters based on Langitude & Latitude - 5 clusters', fontsize=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88eb6dbf",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "d51925f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\anaconda3\\lib\\site-packages\\sklearn\\cluster\\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\4050732956.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['cluster5_label'] = kmeans2.fit_predict(a[a.columns[1:5]])\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>id</th>\n",
       "      <th>OrderID</th>\n",
       "      <th>cluster5_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-2.173682</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>766</td>\n",
       "      <td>2295440</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.582311</td>\n",
       "      <td>51.767526</td>\n",
       "      <td>1934</td>\n",
       "      <td>2292996</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.562449</td>\n",
       "      <td>52.424186</td>\n",
       "      <td>597</td>\n",
       "      <td>2285048</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.911238</td>\n",
       "      <td>52.765303</td>\n",
       "      <td>2915</td>\n",
       "      <td>2297608</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.726102</td>\n",
       "      <td>52.006042</td>\n",
       "      <td>1664</td>\n",
       "      <td>2281052</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   longitude   latitude    id  OrderID  cluster5_label\n",
       "0  -2.173682  52.496759   766  2295440               1\n",
       "1  -1.582311  51.767526  1934  2292996               3\n",
       "2  -1.562449  52.424186   597  2285048               3\n",
       "3  -1.911238  52.765303  2915  2297608               1\n",
       "4  -0.726102  52.006042  1664  2281052               4"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Labels of each point\n",
    "x['cluster5_label'] = kmeans2.fit_predict(a[a.columns[1:5]])\n",
    "\n",
    "x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "639839bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>cluster5_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>766</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1934</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>597</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2915</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1664</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     id  cluster5_label\n",
       "0   766               1\n",
       "1  1934               3\n",
       "2   597               3\n",
       "3  2915               1\n",
       "4  1664               4"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Remove Longitute and Latitude from X \n",
    "x = x[['id','cluster5_label']].copy()\n",
    "x.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "eb276092",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4119"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sense Check\n",
    "x['cluster5_label'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "520bb316",
   "metadata": {},
   "outputs": [],
   "source": [
    "clustered_data = pd.merge(data, x, on=['id'], how='outer')\n",
    "clustered_data.drop_duplicates(keep='first', inplace=True, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "53c9c877",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>outward_code_x</th>\n",
       "      <th>dist_centres</th>\n",
       "      <th>distance</th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Status</th>\n",
       "      <th>PaymentOption</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>...</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>country</th>\n",
       "      <th>Weight_per_line</th>\n",
       "      <th>Volume_per_line_m3</th>\n",
       "      <th>Pallet_per_line</th>\n",
       "      <th>id</th>\n",
       "      <th>outcode</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>cluster5_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DY6</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>26.84</td>\n",
       "      <td>2295440</td>\n",
       "      <td>7700</td>\n",
       "      <td>18/04/2023</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>MFS</td>\n",
       "      <td>375.40</td>\n",
       "      <td>...</td>\n",
       "      <td>34.46</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>110.00</td>\n",
       "      <td>0.225000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DY6</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>26.84</td>\n",
       "      <td>2277415</td>\n",
       "      <td>67940</td>\n",
       "      <td>28/03/2023</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>236.61</td>\n",
       "      <td>...</td>\n",
       "      <td>16.45</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>33.30</td>\n",
       "      <td>0.959000</td>\n",
       "      <td>0.473039</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DY6</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>26.84</td>\n",
       "      <td>2279524</td>\n",
       "      <td>67940</td>\n",
       "      <td>30/03/2023</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>70.58</td>\n",
       "      <td>...</td>\n",
       "      <td>11.79</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>21.80</td>\n",
       "      <td>0.209100</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>DY6</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>26.84</td>\n",
       "      <td>2275231</td>\n",
       "      <td>483789</td>\n",
       "      <td>27/03/2023</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>76.95</td>\n",
       "      <td>...</td>\n",
       "      <td>6.81</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>17.77</td>\n",
       "      <td>0.040200</td>\n",
       "      <td>0.030342</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>DY6</td>\n",
       "      <td>Midlands</td>\n",
       "      <td>26.84</td>\n",
       "      <td>2285334</td>\n",
       "      <td>483789</td>\n",
       "      <td>05/04/2023</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>On Account</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>147.30</td>\n",
       "      <td>...</td>\n",
       "      <td>11.46</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>34.70</td>\n",
       "      <td>0.100552</td>\n",
       "      <td>0.052361</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  outward_code_x dist_centres  distance  OrderID WebsiteID   OrderDate  \\\n",
       "0            DY6     Midlands     26.84  2295440      7700  18/04/2023   \n",
       "1            DY6     Midlands     26.84  2277415     67940  28/03/2023   \n",
       "2            DY6     Midlands     26.84  2279524     67940  30/03/2023   \n",
       "3            DY6     Midlands     26.84  2275231    483789  27/03/2023   \n",
       "4            DY6     Midlands     26.84  2285334    483789  05/04/2023   \n",
       "\n",
       "       Status PaymentOption     Courier  ProductsExVAT  ...  DeliveryCost  \\\n",
       "0  Dispatched    On Account         MFS         375.40  ...         34.46   \n",
       "1  Dispatched    On Account  DX Freight         236.61  ...         16.45   \n",
       "2  Dispatched    On Account  DX Freight          70.58  ...         11.79   \n",
       "3  Dispatched    On Account  DX Express          76.95  ...          6.81   \n",
       "4  Dispatched    On Account  DX Express         147.30  ...         11.46   \n",
       "\n",
       "          country  Weight_per_line Volume_per_line_m3  Pallet_per_line   id  \\\n",
       "0  United Kingdom           110.00           0.225000         0.200000  766   \n",
       "1  United Kingdom            33.30           0.959000         0.473039  766   \n",
       "2  United Kingdom            21.80           0.209100         0.222222  766   \n",
       "3  United Kingdom            17.77           0.040200         0.030342  766   \n",
       "4  United Kingdom            34.70           0.100552         0.052361  766   \n",
       "\n",
       "   outcode   latitude longitude  cluster5_label  \n",
       "0      DY6  52.496759 -2.173682               1  \n",
       "1      DY6  52.496759 -2.173682               1  \n",
       "2      DY6  52.496759 -2.173682               1  \n",
       "3      DY6  52.496759 -2.173682               1  \n",
       "4      DY6  52.496759 -2.173682               1  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clustered_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "0237d7ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "outward_code_x                object\n",
       "dist_centres                  object\n",
       "distance                     float64\n",
       "OrderID                       object\n",
       "WebsiteID                     object\n",
       "OrderDate                     object\n",
       "Status                        object\n",
       "PaymentOption                 object\n",
       "Courier                       object\n",
       "ProductsExVAT                float64\n",
       "DeliveryExVAT                float64\n",
       "DateDespatched        datetime64[ns]\n",
       "DeliveryCost                 float64\n",
       "country                       object\n",
       "Weight_per_line              float64\n",
       "Volume_per_line_m3           float64\n",
       "Pallet_per_line              float64\n",
       "id                             int64\n",
       "outcode                       object\n",
       "latitude                     float64\n",
       "longitude                    float64\n",
       "cluster5_label                 int32\n",
       "dtype: object"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clustered_data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "19a2d23c",
   "metadata": {},
   "outputs": [],
   "source": [
    "clustered_data = clustered_data[['distance', 'OrderID', 'WebsiteID', 'OrderDate',\n",
    "                                'Courier', 'ProductsExVAT', 'DeliveryExVAT',\n",
    "                                'DateDespatched', 'DeliveryCost', 'Weight_per_line',\n",
    "                                'Volume_per_line_m3', 'Pallet_per_line', 'id',\n",
    "                                'outcode', 'latitude', 'longitude', 'cluster5_label']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "dfae6530",
   "metadata": {},
   "outputs": [],
   "source": [
    "clustered_data = clustered_data.rename(columns={\"outcode\": \"Outward Code\", \"cluster5_label\": \"Cluster Label\",\n",
    "                              \"Weight_per_line\": \"Weight\", \"Volume_per_line_m3\": \"Volume (m3)\",\n",
    "                              \"Pallet_per_line\": \"Pallets\",})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "b8e1cbb1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\2174830773.py:1: UserWarning: Parsing dates in DD/MM/YYYY format when dayfirst=False (the default) was specified. This may lead to inconsistently parsed dates! Specify a format to ensure consistent parsing.\n",
      "  clustered_data['OrderDate']=pd.to_datetime(clustered_data['OrderDate'])\n"
     ]
    }
   ],
   "source": [
    "clustered_data['OrderDate']=pd.to_datetime(clustered_data['OrderDate'])\n",
    "clustered_data['DateDespatched']=pd.to_datetime(clustered_data['DateDespatched'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "d86a7858",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>distance</th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Volume (m3)</th>\n",
       "      <th>Pallets</th>\n",
       "      <th>id</th>\n",
       "      <th>Outward Code</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>Cluster Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2295440</td>\n",
       "      <td>7700</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>MFS</td>\n",
       "      <td>375.40</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>34.46</td>\n",
       "      <td>110.00</td>\n",
       "      <td>0.225000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2277415</td>\n",
       "      <td>67940</td>\n",
       "      <td>2023-03-28</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>236.61</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-28</td>\n",
       "      <td>16.45</td>\n",
       "      <td>33.30</td>\n",
       "      <td>0.959000</td>\n",
       "      <td>0.473039</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2279524</td>\n",
       "      <td>67940</td>\n",
       "      <td>2023-03-30</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>70.58</td>\n",
       "      <td>13.20</td>\n",
       "      <td>2023-03-30</td>\n",
       "      <td>11.79</td>\n",
       "      <td>21.80</td>\n",
       "      <td>0.209100</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2275231</td>\n",
       "      <td>483789</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>76.95</td>\n",
       "      <td>7.22</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>6.81</td>\n",
       "      <td>17.77</td>\n",
       "      <td>0.040200</td>\n",
       "      <td>0.030342</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2285334</td>\n",
       "      <td>483789</td>\n",
       "      <td>2023-05-04</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>147.30</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-05</td>\n",
       "      <td>11.46</td>\n",
       "      <td>34.70</td>\n",
       "      <td>0.100552</td>\n",
       "      <td>0.052361</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   distance  OrderID WebsiteID  OrderDate     Courier  ProductsExVAT  \\\n",
       "0     26.84  2295440      7700 2023-04-18         MFS         375.40   \n",
       "1     26.84  2277415     67940 2023-03-28  DX Freight         236.61   \n",
       "2     26.84  2279524     67940 2023-03-30  DX Freight          70.58   \n",
       "3     26.84  2275231    483789 2023-03-27  DX Express          76.95   \n",
       "4     26.84  2285334    483789 2023-05-04  DX Express         147.30   \n",
       "\n",
       "   DeliveryExVAT DateDespatched  DeliveryCost  Weight  Volume (m3)   Pallets  \\\n",
       "0           0.00     2023-04-18         34.46  110.00     0.225000  0.200000   \n",
       "1           0.00     2023-03-28         16.45   33.30     0.959000  0.473039   \n",
       "2          13.20     2023-03-30         11.79   21.80     0.209100  0.222222   \n",
       "3           7.22     2023-03-27          6.81   17.77     0.040200  0.030342   \n",
       "4           0.00     2023-04-05         11.46   34.70     0.100552  0.052361   \n",
       "\n",
       "    id Outward Code   latitude  longitude  Cluster Label  \n",
       "0  766          DY6  52.496759  -2.173682              1  \n",
       "1  766          DY6  52.496759  -2.173682              1  \n",
       "2  766          DY6  52.496759  -2.173682              1  \n",
       "3  766          DY6  52.496759  -2.173682              1  \n",
       "4  766          DY6  52.496759  -2.173682              1  "
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clustered_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "d94e2561",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4119 entries, 0 to 4118\n",
      "Data columns (total 17 columns):\n",
      " #   Column          Non-Null Count  Dtype         \n",
      "---  ------          --------------  -----         \n",
      " 0   distance        4119 non-null   float64       \n",
      " 1   OrderID         4119 non-null   object        \n",
      " 2   WebsiteID       4119 non-null   object        \n",
      " 3   OrderDate       4119 non-null   datetime64[ns]\n",
      " 4   Courier         4119 non-null   object        \n",
      " 5   ProductsExVAT   4119 non-null   float64       \n",
      " 6   DeliveryExVAT   4119 non-null   float64       \n",
      " 7   DateDespatched  4119 non-null   datetime64[ns]\n",
      " 8   DeliveryCost    4119 non-null   float64       \n",
      " 9   Weight          4119 non-null   float64       \n",
      " 10  Volume (m3)     4119 non-null   float64       \n",
      " 11  Pallets         4119 non-null   float64       \n",
      " 12  id              4119 non-null   int64         \n",
      " 13  Outward Code    4119 non-null   object        \n",
      " 14  latitude        4119 non-null   float64       \n",
      " 15  longitude       4119 non-null   float64       \n",
      " 16  Cluster Label   4119 non-null   int32         \n",
      "dtypes: datetime64[ns](2), float64(9), int32(1), int64(1), object(4)\n",
      "memory usage: 531.1+ KB\n"
     ]
    }
   ],
   "source": [
    "clustered_data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4355e190",
   "metadata": {},
   "source": [
    "## Truck and Cost Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "66024d0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4119, 17)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>distance</th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Volume (m3)</th>\n",
       "      <th>Pallets</th>\n",
       "      <th>id</th>\n",
       "      <th>Outward Code</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>Cluster Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2295440</td>\n",
       "      <td>7700</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>MFS</td>\n",
       "      <td>375.40</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>34.46</td>\n",
       "      <td>110.00</td>\n",
       "      <td>0.225000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2277415</td>\n",
       "      <td>67940</td>\n",
       "      <td>2023-03-28</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>236.61</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-28</td>\n",
       "      <td>16.45</td>\n",
       "      <td>33.30</td>\n",
       "      <td>0.959000</td>\n",
       "      <td>0.473039</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2279524</td>\n",
       "      <td>67940</td>\n",
       "      <td>2023-03-30</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>70.58</td>\n",
       "      <td>13.20</td>\n",
       "      <td>2023-03-30</td>\n",
       "      <td>11.79</td>\n",
       "      <td>21.80</td>\n",
       "      <td>0.209100</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2275231</td>\n",
       "      <td>483789</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>76.95</td>\n",
       "      <td>7.22</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>6.81</td>\n",
       "      <td>17.77</td>\n",
       "      <td>0.040200</td>\n",
       "      <td>0.030342</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2285334</td>\n",
       "      <td>483789</td>\n",
       "      <td>2023-05-04</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>147.30</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-05</td>\n",
       "      <td>11.46</td>\n",
       "      <td>34.70</td>\n",
       "      <td>0.100552</td>\n",
       "      <td>0.052361</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   distance  OrderID WebsiteID  OrderDate     Courier  ProductsExVAT  \\\n",
       "0     26.84  2295440      7700 2023-04-18         MFS         375.40   \n",
       "1     26.84  2277415     67940 2023-03-28  DX Freight         236.61   \n",
       "2     26.84  2279524     67940 2023-03-30  DX Freight          70.58   \n",
       "3     26.84  2275231    483789 2023-03-27  DX Express          76.95   \n",
       "4     26.84  2285334    483789 2023-05-04  DX Express         147.30   \n",
       "\n",
       "   DeliveryExVAT DateDespatched  DeliveryCost  Weight  Volume (m3)   Pallets  \\\n",
       "0           0.00     2023-04-18         34.46  110.00     0.225000  0.200000   \n",
       "1           0.00     2023-03-28         16.45   33.30     0.959000  0.473039   \n",
       "2          13.20     2023-03-30         11.79   21.80     0.209100  0.222222   \n",
       "3           7.22     2023-03-27          6.81   17.77     0.040200  0.030342   \n",
       "4           0.00     2023-04-05         11.46   34.70     0.100552  0.052361   \n",
       "\n",
       "    id Outward Code   latitude  longitude  Cluster Label  \n",
       "0  766          DY6  52.496759  -2.173682              1  \n",
       "1  766          DY6  52.496759  -2.173682              1  \n",
       "2  766          DY6  52.496759  -2.173682              1  \n",
       "3  766          DY6  52.496759  -2.173682              1  \n",
       "4  766          DY6  52.496759  -2.173682              1  "
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kite = pd.DataFrame(clustered_data)\n",
    "\n",
    "# View the DataFrame.\n",
    "print(kite.shape)\n",
    "kite.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "76c1c11f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4119 entries, 0 to 4118\n",
      "Data columns (total 17 columns):\n",
      " #   Column          Non-Null Count  Dtype         \n",
      "---  ------          --------------  -----         \n",
      " 0   distance        4119 non-null   float64       \n",
      " 1   OrderID         4119 non-null   object        \n",
      " 2   WebsiteID       4119 non-null   object        \n",
      " 3   OrderDate       4119 non-null   datetime64[ns]\n",
      " 4   Courier         4119 non-null   object        \n",
      " 5   ProductsExVAT   4119 non-null   float64       \n",
      " 6   DeliveryExVAT   4119 non-null   float64       \n",
      " 7   DateDespatched  4119 non-null   datetime64[ns]\n",
      " 8   DeliveryCost    4119 non-null   float64       \n",
      " 9   Weight          4119 non-null   float64       \n",
      " 10  Volume (m3)     4119 non-null   float64       \n",
      " 11  Pallets         4119 non-null   float64       \n",
      " 12  id              4119 non-null   int64         \n",
      " 13  Outward Code    4119 non-null   object        \n",
      " 14  latitude        4119 non-null   float64       \n",
      " 15  longitude       4119 non-null   float64       \n",
      " 16  Cluster Label   4119 non-null   int32         \n",
      "dtypes: datetime64[ns](2), float64(9), int32(1), int64(1), object(4)\n",
      "memory usage: 531.1+ KB\n"
     ]
    }
   ],
   "source": [
    "# Explore the metadata.\n",
    "kite.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "280abd2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "kite['OrderDate']=pd.to_datetime(kite['OrderDate'],format='%Y-%m-%d')\n",
    "kite['DateDespatched']=pd.to_datetime(kite['DateDespatched'],format='%Y-%m-%d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "10e596f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4119 entries, 0 to 4118\n",
      "Data columns (total 17 columns):\n",
      " #   Column          Non-Null Count  Dtype         \n",
      "---  ------          --------------  -----         \n",
      " 0   distance        4119 non-null   float64       \n",
      " 1   OrderID         4119 non-null   object        \n",
      " 2   WebsiteID       4119 non-null   object        \n",
      " 3   OrderDate       4119 non-null   datetime64[ns]\n",
      " 4   Courier         4119 non-null   object        \n",
      " 5   ProductsExVAT   4119 non-null   float64       \n",
      " 6   DeliveryExVAT   4119 non-null   float64       \n",
      " 7   DateDespatched  4119 non-null   datetime64[ns]\n",
      " 8   DeliveryCost    4119 non-null   float64       \n",
      " 9   Weight          4119 non-null   float64       \n",
      " 10  Volume (m3)     4119 non-null   float64       \n",
      " 11  Pallets         4119 non-null   float64       \n",
      " 12  id              4119 non-null   int64         \n",
      " 13  Outward Code    4119 non-null   object        \n",
      " 14  latitude        4119 non-null   float64       \n",
      " 15  longitude       4119 non-null   float64       \n",
      " 16  Cluster Label   4119 non-null   int32         \n",
      "dtypes: datetime64[ns](2), float64(9), int32(1), int64(1), object(4)\n",
      "memory usage: 531.1+ KB\n"
     ]
    }
   ],
   "source": [
    "# Explore the metadata.\n",
    "kite.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "a649ea71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 3, 0, 2, 4], dtype=int64)"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating a column to identify the day of the week that the order was dispatched\n",
    "kite['weekday'] = kite['DateDespatched'].apply(lambda x: x.weekday())\n",
    "\n",
    "# Removing orders from the DataFrame that were dispatched on a Saturday (5) or Sunday (6)    \n",
    "kite_wd = kite.loc[~((kite['weekday'] == 5) | (kite['weekday'] == 6))]\n",
    "\n",
    "# Checking this has worked\n",
    "kite_wd['weekday'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "2a787227",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing the Easter bank holidays and the outliner date 24/4 which we found through earlier data exploraton\n",
    "kite_wd = kite_wd[~kite_wd.DateDespatched.isin(['2023-07-04','2023-04-10','2023-04-24'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "04312252",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>distance</th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Volume (m3)</th>\n",
       "      <th>Pallets</th>\n",
       "      <th>id</th>\n",
       "      <th>Outward Code</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>Cluster Label</th>\n",
       "      <th>weekday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2295440</td>\n",
       "      <td>7700</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>MFS</td>\n",
       "      <td>375.40</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>34.46</td>\n",
       "      <td>110.00</td>\n",
       "      <td>0.225000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2277415</td>\n",
       "      <td>67940</td>\n",
       "      <td>2023-03-28</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>236.61</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-28</td>\n",
       "      <td>16.45</td>\n",
       "      <td>33.30</td>\n",
       "      <td>0.959000</td>\n",
       "      <td>0.473039</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2279524</td>\n",
       "      <td>67940</td>\n",
       "      <td>2023-03-30</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>70.58</td>\n",
       "      <td>13.20</td>\n",
       "      <td>2023-03-30</td>\n",
       "      <td>11.79</td>\n",
       "      <td>21.80</td>\n",
       "      <td>0.209100</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2275231</td>\n",
       "      <td>483789</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>76.95</td>\n",
       "      <td>7.22</td>\n",
       "      <td>2023-03-27</td>\n",
       "      <td>6.81</td>\n",
       "      <td>17.77</td>\n",
       "      <td>0.040200</td>\n",
       "      <td>0.030342</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2285334</td>\n",
       "      <td>483789</td>\n",
       "      <td>2023-05-04</td>\n",
       "      <td>DX Express</td>\n",
       "      <td>147.30</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-05</td>\n",
       "      <td>11.46</td>\n",
       "      <td>34.70</td>\n",
       "      <td>0.100552</td>\n",
       "      <td>0.052361</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   distance  OrderID WebsiteID  OrderDate     Courier  ProductsExVAT  \\\n",
       "0     26.84  2295440      7700 2023-04-18         MFS         375.40   \n",
       "1     26.84  2277415     67940 2023-03-28  DX Freight         236.61   \n",
       "2     26.84  2279524     67940 2023-03-30  DX Freight          70.58   \n",
       "3     26.84  2275231    483789 2023-03-27  DX Express          76.95   \n",
       "4     26.84  2285334    483789 2023-05-04  DX Express         147.30   \n",
       "\n",
       "   DeliveryExVAT DateDespatched  DeliveryCost  Weight  Volume (m3)   Pallets  \\\n",
       "0           0.00     2023-04-18         34.46  110.00     0.225000  0.200000   \n",
       "1           0.00     2023-03-28         16.45   33.30     0.959000  0.473039   \n",
       "2          13.20     2023-03-30         11.79   21.80     0.209100  0.222222   \n",
       "3           7.22     2023-03-27          6.81   17.77     0.040200  0.030342   \n",
       "4           0.00     2023-04-05         11.46   34.70     0.100552  0.052361   \n",
       "\n",
       "    id Outward Code   latitude  longitude  Cluster Label  weekday  \n",
       "0  766          DY6  52.496759  -2.173682              1        1  \n",
       "1  766          DY6  52.496759  -2.173682              1        1  \n",
       "2  766          DY6  52.496759  -2.173682              1        3  \n",
       "3  766          DY6  52.496759  -2.173682              1        0  \n",
       "4  766          DY6  52.496759  -2.173682              1        2  "
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Viewing the DataFrame\n",
    "kite_wd.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "1469c0a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>distance</th>\n",
       "      <th>OrderID</th>\n",
       "      <th>WebsiteID</th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Courier</th>\n",
       "      <th>ProductsExVAT</th>\n",
       "      <th>DeliveryExVAT</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Volume (m3)</th>\n",
       "      <th>Pallets</th>\n",
       "      <th>id</th>\n",
       "      <th>Outward Code</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>Cluster Label</th>\n",
       "      <th>weekday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2295440</td>\n",
       "      <td>7700</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>MFS</td>\n",
       "      <td>375.40</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>34.46</td>\n",
       "      <td>110.00</td>\n",
       "      <td>0.225000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2277415</td>\n",
       "      <td>67940</td>\n",
       "      <td>2023-03-28</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>236.61</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-03-28</td>\n",
       "      <td>16.45</td>\n",
       "      <td>33.30</td>\n",
       "      <td>0.959000</td>\n",
       "      <td>0.473039</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2279524</td>\n",
       "      <td>67940</td>\n",
       "      <td>2023-03-30</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>70.58</td>\n",
       "      <td>13.20</td>\n",
       "      <td>2023-03-30</td>\n",
       "      <td>11.79</td>\n",
       "      <td>21.80</td>\n",
       "      <td>0.209100</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2292112</td>\n",
       "      <td>778040</td>\n",
       "      <td>2023-04-14</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>104.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-14</td>\n",
       "      <td>20.55</td>\n",
       "      <td>44.20</td>\n",
       "      <td>0.123500</td>\n",
       "      <td>0.054167</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>26.84</td>\n",
       "      <td>2298627</td>\n",
       "      <td>846996</td>\n",
       "      <td>2023-04-21</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>111.36</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-21</td>\n",
       "      <td>23.25</td>\n",
       "      <td>51.12</td>\n",
       "      <td>0.129600</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>766</td>\n",
       "      <td>DY6</td>\n",
       "      <td>52.496759</td>\n",
       "      <td>-2.173682</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4105</th>\n",
       "      <td>42.67</td>\n",
       "      <td>2283291</td>\n",
       "      <td>827222</td>\n",
       "      <td>2023-04-04</td>\n",
       "      <td>MFS</td>\n",
       "      <td>772.80</td>\n",
       "      <td>19.99</td>\n",
       "      <td>2023-04-04</td>\n",
       "      <td>42.65</td>\n",
       "      <td>406.56</td>\n",
       "      <td>0.739200</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>1670</td>\n",
       "      <td>MK15</td>\n",
       "      <td>52.051214</td>\n",
       "      <td>-0.718167</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4107</th>\n",
       "      <td>19.60</td>\n",
       "      <td>2292974</td>\n",
       "      <td>893554</td>\n",
       "      <td>2023-04-16</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>109.80</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-17</td>\n",
       "      <td>34.03</td>\n",
       "      <td>80.00</td>\n",
       "      <td>0.132400</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>96</td>\n",
       "      <td>B68</td>\n",
       "      <td>52.482799</td>\n",
       "      <td>-2.000643</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4116</th>\n",
       "      <td>34.22</td>\n",
       "      <td>2294508</td>\n",
       "      <td>896767</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>90.09</td>\n",
       "      <td>32.22</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>10.92</td>\n",
       "      <td>18.90</td>\n",
       "      <td>1.411200</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>2937</td>\n",
       "      <td>WV7</td>\n",
       "      <td>52.633048</td>\n",
       "      <td>-2.270047</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4117</th>\n",
       "      <td>38.17</td>\n",
       "      <td>2294964</td>\n",
       "      <td>901125</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>278.64</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2023-04-18</td>\n",
       "      <td>14.77</td>\n",
       "      <td>29.88</td>\n",
       "      <td>4.070664</td>\n",
       "      <td>1.511111</td>\n",
       "      <td>1456</td>\n",
       "      <td>LE13</td>\n",
       "      <td>52.763672</td>\n",
       "      <td>-0.890501</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4118</th>\n",
       "      <td>38.17</td>\n",
       "      <td>2280824</td>\n",
       "      <td>278349</td>\n",
       "      <td>2023-03-31</td>\n",
       "      <td>DX Freight</td>\n",
       "      <td>60.06</td>\n",
       "      <td>12.34</td>\n",
       "      <td>2023-03-31</td>\n",
       "      <td>11.02</td>\n",
       "      <td>12.60</td>\n",
       "      <td>0.940800</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1456</td>\n",
       "      <td>LE13</td>\n",
       "      <td>52.763672</td>\n",
       "      <td>-0.890501</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2537 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      distance  OrderID WebsiteID  OrderDate     Courier  ProductsExVAT  \\\n",
       "0        26.84  2295440      7700 2023-04-18         MFS         375.40   \n",
       "1        26.84  2277415     67940 2023-03-28  DX Freight         236.61   \n",
       "2        26.84  2279524     67940 2023-03-30  DX Freight          70.58   \n",
       "5        26.84  2292112    778040 2023-04-14  DX Freight         104.00   \n",
       "6        26.84  2298627    846996 2023-04-21  DX Freight         111.36   \n",
       "...        ...      ...       ...        ...         ...            ...   \n",
       "4105     42.67  2283291    827222 2023-04-04         MFS         772.80   \n",
       "4107     19.60  2292974    893554 2023-04-16  DX Freight         109.80   \n",
       "4116     34.22  2294508    896767 2023-04-18  DX Freight          90.09   \n",
       "4117     38.17  2294964    901125 2023-04-18  DX Freight         278.64   \n",
       "4118     38.17  2280824    278349 2023-03-31  DX Freight          60.06   \n",
       "\n",
       "      DeliveryExVAT DateDespatched  DeliveryCost  Weight  Volume (m3)  \\\n",
       "0              0.00     2023-04-18         34.46  110.00     0.225000   \n",
       "1              0.00     2023-03-28         16.45   33.30     0.959000   \n",
       "2             13.20     2023-03-30         11.79   21.80     0.209100   \n",
       "5              0.00     2023-04-14         20.55   44.20     0.123500   \n",
       "6              0.00     2023-04-21         23.25   51.12     0.129600   \n",
       "...             ...            ...           ...     ...          ...   \n",
       "4105          19.99     2023-04-04         42.65  406.56     0.739200   \n",
       "4107           0.00     2023-04-17         34.03   80.00     0.132400   \n",
       "4116          32.22     2023-04-18         10.92   18.90     1.411200   \n",
       "4117           0.00     2023-04-18         14.77   29.88     4.070664   \n",
       "4118          12.34     2023-03-31         11.02   12.60     0.940800   \n",
       "\n",
       "       Pallets    id Outward Code   latitude  longitude  Cluster Label  \\\n",
       "0     0.200000   766          DY6  52.496759  -2.173682              1   \n",
       "1     0.473039   766          DY6  52.496759  -2.173682              1   \n",
       "2     0.222222   766          DY6  52.496759  -2.173682              1   \n",
       "5     0.054167   766          DY6  52.496759  -2.173682              1   \n",
       "6     0.100000   766          DY6  52.496759  -2.173682              1   \n",
       "...        ...   ...          ...        ...        ...            ...   \n",
       "4105  0.466667  1670         MK15  52.051214  -0.718167              4   \n",
       "4107  0.111111    96          B68  52.482799  -2.000643              1   \n",
       "4116  0.750000  2937          WV7  52.633048  -2.270047              1   \n",
       "4117  1.511111  1456         LE13  52.763672  -0.890501              2   \n",
       "4118  0.500000  1456         LE13  52.763672  -0.890501              2   \n",
       "\n",
       "      weekday  \n",
       "0           1  \n",
       "1           1  \n",
       "2           3  \n",
       "5           4  \n",
       "6           4  \n",
       "...       ...  \n",
       "4105        1  \n",
       "4107        0  \n",
       "4116        1  \n",
       "4117        1  \n",
       "4118        4  \n",
       "\n",
       "[2537 rows x 18 columns]"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Excluding orders delivered by DX Express\n",
    "kite_nonDX = kite_wd[kite_wd['Courier'] != 'DX Express']\n",
    "kite_nonDX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "81a28a08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2537, 18)"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kite_nonDX.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "23aef569",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>DateDespatched</th>\n",
       "      <th>2023-03-27</th>\n",
       "      <th>2023-03-28</th>\n",
       "      <th>2023-03-29</th>\n",
       "      <th>2023-03-30</th>\n",
       "      <th>2023-03-31</th>\n",
       "      <th>2023-04-03</th>\n",
       "      <th>2023-04-04</th>\n",
       "      <th>2023-04-05</th>\n",
       "      <th>2023-04-06</th>\n",
       "      <th>2023-04-11</th>\n",
       "      <th>2023-04-12</th>\n",
       "      <th>2023-04-13</th>\n",
       "      <th>2023-04-14</th>\n",
       "      <th>2023-04-17</th>\n",
       "      <th>2023-04-18</th>\n",
       "      <th>2023-04-19</th>\n",
       "      <th>2023-04-20</th>\n",
       "      <th>2023-04-21</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster Label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.626825</td>\n",
       "      <td>5.520840</td>\n",
       "      <td>15.878389</td>\n",
       "      <td>4.072352</td>\n",
       "      <td>8.579204</td>\n",
       "      <td>8.750306</td>\n",
       "      <td>11.926882</td>\n",
       "      <td>16.514156</td>\n",
       "      <td>9.632256</td>\n",
       "      <td>6.564483</td>\n",
       "      <td>6.806422</td>\n",
       "      <td>10.289356</td>\n",
       "      <td>10.948243</td>\n",
       "      <td>5.453371</td>\n",
       "      <td>8.497022</td>\n",
       "      <td>14.055280</td>\n",
       "      <td>7.252378</td>\n",
       "      <td>7.704178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38.252106</td>\n",
       "      <td>30.097933</td>\n",
       "      <td>25.875409</td>\n",
       "      <td>30.604619</td>\n",
       "      <td>34.749950</td>\n",
       "      <td>52.090649</td>\n",
       "      <td>59.073879</td>\n",
       "      <td>37.945566</td>\n",
       "      <td>35.859555</td>\n",
       "      <td>64.183745</td>\n",
       "      <td>38.207957</td>\n",
       "      <td>61.017147</td>\n",
       "      <td>40.610650</td>\n",
       "      <td>26.565372</td>\n",
       "      <td>60.519807</td>\n",
       "      <td>29.744151</td>\n",
       "      <td>19.234192</td>\n",
       "      <td>34.790947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25.430281</td>\n",
       "      <td>26.711982</td>\n",
       "      <td>28.232383</td>\n",
       "      <td>20.638080</td>\n",
       "      <td>59.148193</td>\n",
       "      <td>25.695971</td>\n",
       "      <td>37.088422</td>\n",
       "      <td>27.698291</td>\n",
       "      <td>22.694177</td>\n",
       "      <td>30.436707</td>\n",
       "      <td>30.523396</td>\n",
       "      <td>34.703450</td>\n",
       "      <td>18.132844</td>\n",
       "      <td>31.487958</td>\n",
       "      <td>22.920581</td>\n",
       "      <td>27.114326</td>\n",
       "      <td>35.655519</td>\n",
       "      <td>21.307101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.528200</td>\n",
       "      <td>12.985316</td>\n",
       "      <td>36.069616</td>\n",
       "      <td>30.100167</td>\n",
       "      <td>9.401686</td>\n",
       "      <td>23.829074</td>\n",
       "      <td>21.668728</td>\n",
       "      <td>27.415797</td>\n",
       "      <td>25.247212</td>\n",
       "      <td>20.095868</td>\n",
       "      <td>33.847965</td>\n",
       "      <td>17.274826</td>\n",
       "      <td>12.430367</td>\n",
       "      <td>26.191024</td>\n",
       "      <td>23.686885</td>\n",
       "      <td>16.836916</td>\n",
       "      <td>18.823916</td>\n",
       "      <td>18.991872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>15.194340</td>\n",
       "      <td>22.966426</td>\n",
       "      <td>18.886072</td>\n",
       "      <td>14.503915</td>\n",
       "      <td>26.996616</td>\n",
       "      <td>15.696868</td>\n",
       "      <td>10.335742</td>\n",
       "      <td>11.650372</td>\n",
       "      <td>10.634615</td>\n",
       "      <td>17.970220</td>\n",
       "      <td>18.110261</td>\n",
       "      <td>13.856994</td>\n",
       "      <td>23.396730</td>\n",
       "      <td>17.558513</td>\n",
       "      <td>25.580183</td>\n",
       "      <td>14.777550</td>\n",
       "      <td>8.970153</td>\n",
       "      <td>16.775009</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "DateDespatched  2023-03-27  2023-03-28  2023-03-29  2023-03-30  2023-03-31  \\\n",
       "Cluster Label                                                                \n",
       "0                 4.626825    5.520840   15.878389    4.072352    8.579204   \n",
       "1                38.252106   30.097933   25.875409   30.604619   34.749950   \n",
       "2                25.430281   26.711982   28.232383   20.638080   59.148193   \n",
       "3                11.528200   12.985316   36.069616   30.100167    9.401686   \n",
       "4                15.194340   22.966426   18.886072   14.503915   26.996616   \n",
       "\n",
       "DateDespatched  2023-04-03  2023-04-04  2023-04-05  2023-04-06  2023-04-11  \\\n",
       "Cluster Label                                                                \n",
       "0                 8.750306   11.926882   16.514156    9.632256    6.564483   \n",
       "1                52.090649   59.073879   37.945566   35.859555   64.183745   \n",
       "2                25.695971   37.088422   27.698291   22.694177   30.436707   \n",
       "3                23.829074   21.668728   27.415797   25.247212   20.095868   \n",
       "4                15.696868   10.335742   11.650372   10.634615   17.970220   \n",
       "\n",
       "DateDespatched  2023-04-12  2023-04-13  2023-04-14  2023-04-17  2023-04-18  \\\n",
       "Cluster Label                                                                \n",
       "0                 6.806422   10.289356   10.948243    5.453371    8.497022   \n",
       "1                38.207957   61.017147   40.610650   26.565372   60.519807   \n",
       "2                30.523396   34.703450   18.132844   31.487958   22.920581   \n",
       "3                33.847965   17.274826   12.430367   26.191024   23.686885   \n",
       "4                18.110261   13.856994   23.396730   17.558513   25.580183   \n",
       "\n",
       "DateDespatched  2023-04-19  2023-04-20  2023-04-21  \n",
       "Cluster Label                                       \n",
       "0                14.055280    7.252378    7.704178  \n",
       "1                29.744151   19.234192   34.790947  \n",
       "2                27.114326   35.655519   21.307101  \n",
       "3                16.836916   18.823916   18.991872  \n",
       "4                14.777550    8.970153   16.775009  "
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Pivot the data to see orders by day by courier. \n",
    "df_pallets_by_day = kite_nonDX.pivot_table(index='Cluster Label', columns='DateDespatched', values='Pallets', aggfunc='sum')\n",
    "\n",
    "# Display the DataFrame\n",
    "df_pallets_by_day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "565645c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cluster Label\n",
       "0     4.072352\n",
       "1    19.234192\n",
       "2    18.132844\n",
       "3     9.401686\n",
       "4     8.970153\n",
       "dtype: float64"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the minimum pallets per day for each cluster\n",
    "min_pallets_per_day = df_pallets_by_day.min(axis=1)  \n",
    "\n",
    "min_pallets_per_day "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "f7e70f16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster Label</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9.059552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>39.967980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>29.201092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>21.468080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16.881143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       0\n",
       "Cluster Label           \n",
       "0               9.059552\n",
       "1              39.967980\n",
       "2              29.201092\n",
       "3              21.468080\n",
       "4              16.881143"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the average (mean) pallets per day for each cluster\n",
    "avg_pallets_per_day = pd.DataFrame(df_pallets_by_day.mean(axis=1) )\n",
    "\n",
    "avg_pallets_per_day "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "6d413963",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster Label</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8.538113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>36.902561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>27.406309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20.882298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16.235939</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       0\n",
       "Cluster Label           \n",
       "0               8.538113\n",
       "1              36.902561\n",
       "2              27.406309\n",
       "3              20.882298\n",
       "4              16.235939"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the median pallets per day for each cluster\n",
    "median_pallets_per_day = pd.DataFrame(df_pallets_by_day.median(axis=1)) \n",
    "\n",
    "median_pallets_per_day "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "e4694418",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster Label</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16.514156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>64.183745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>59.148193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>36.069616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>26.996616</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       0\n",
       "Cluster Label           \n",
       "0              16.514156\n",
       "1              64.183745\n",
       "2              59.148193\n",
       "3              36.069616\n",
       "4              26.996616"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the maximum pallets per day for each cluster\n",
    "max_pallets_per_day = pd.DataFrame(df_pallets_by_day.max(axis=1))\n",
    "\n",
    "max_pallets_per_day "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "821a6ae9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>DateDespatched</th>\n",
       "      <th>2023-03-27</th>\n",
       "      <th>2023-03-28</th>\n",
       "      <th>2023-03-29</th>\n",
       "      <th>2023-03-30</th>\n",
       "      <th>2023-03-31</th>\n",
       "      <th>2023-04-03</th>\n",
       "      <th>2023-04-04</th>\n",
       "      <th>2023-04-05</th>\n",
       "      <th>2023-04-06</th>\n",
       "      <th>2023-04-11</th>\n",
       "      <th>2023-04-12</th>\n",
       "      <th>2023-04-13</th>\n",
       "      <th>2023-04-14</th>\n",
       "      <th>2023-04-17</th>\n",
       "      <th>2023-04-18</th>\n",
       "      <th>2023-04-19</th>\n",
       "      <th>2023-04-20</th>\n",
       "      <th>2023-04-21</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster Label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>17</td>\n",
       "      <td>8</td>\n",
       "      <td>15</td>\n",
       "      <td>13</td>\n",
       "      <td>17</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>16</td>\n",
       "      <td>17</td>\n",
       "      <td>13</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>32</td>\n",
       "      <td>54</td>\n",
       "      <td>37</td>\n",
       "      <td>40</td>\n",
       "      <td>30</td>\n",
       "      <td>53</td>\n",
       "      <td>49</td>\n",
       "      <td>39</td>\n",
       "      <td>37</td>\n",
       "      <td>51</td>\n",
       "      <td>54</td>\n",
       "      <td>46</td>\n",
       "      <td>36</td>\n",
       "      <td>44</td>\n",
       "      <td>61</td>\n",
       "      <td>54</td>\n",
       "      <td>42</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>42</td>\n",
       "      <td>35</td>\n",
       "      <td>26</td>\n",
       "      <td>23</td>\n",
       "      <td>36</td>\n",
       "      <td>37</td>\n",
       "      <td>39</td>\n",
       "      <td>42</td>\n",
       "      <td>26</td>\n",
       "      <td>34</td>\n",
       "      <td>46</td>\n",
       "      <td>40</td>\n",
       "      <td>23</td>\n",
       "      <td>51</td>\n",
       "      <td>38</td>\n",
       "      <td>48</td>\n",
       "      <td>36</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>29</td>\n",
       "      <td>28</td>\n",
       "      <td>17</td>\n",
       "      <td>36</td>\n",
       "      <td>28</td>\n",
       "      <td>30</td>\n",
       "      <td>31</td>\n",
       "      <td>27</td>\n",
       "      <td>37</td>\n",
       "      <td>19</td>\n",
       "      <td>14</td>\n",
       "      <td>42</td>\n",
       "      <td>35</td>\n",
       "      <td>27</td>\n",
       "      <td>25</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>21</td>\n",
       "      <td>24</td>\n",
       "      <td>22</td>\n",
       "      <td>23</td>\n",
       "      <td>21</td>\n",
       "      <td>23</td>\n",
       "      <td>18</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "      <td>32</td>\n",
       "      <td>23</td>\n",
       "      <td>18</td>\n",
       "      <td>13</td>\n",
       "      <td>26</td>\n",
       "      <td>29</td>\n",
       "      <td>20</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "DateDespatched  2023-03-27  2023-03-28  2023-03-29  2023-03-30  2023-03-31  \\\n",
       "Cluster Label                                                                \n",
       "0                        9           9          17           8          15   \n",
       "1                       32          54          37          40          30   \n",
       "2                       42          35          26          23          36   \n",
       "3                       18          18          29          28          17   \n",
       "4                       21          24          22          23          21   \n",
       "\n",
       "DateDespatched  2023-04-03  2023-04-04  2023-04-05  2023-04-06  2023-04-11  \\\n",
       "Cluster Label                                                                \n",
       "0                       13          17          14          14           9   \n",
       "1                       53          49          39          37          51   \n",
       "2                       37          39          42          26          34   \n",
       "3                       36          28          30          31          27   \n",
       "4                       23          18          16          18          32   \n",
       "\n",
       "DateDespatched  2023-04-12  2023-04-13  2023-04-14  2023-04-17  2023-04-18  \\\n",
       "Cluster Label                                                                \n",
       "0                       12          13          11          13          16   \n",
       "1                       54          46          36          44          61   \n",
       "2                       46          40          23          51          38   \n",
       "3                       37          19          14          42          35   \n",
       "4                       23          18          13          26          29   \n",
       "\n",
       "DateDespatched  2023-04-19  2023-04-20  2023-04-21  \n",
       "Cluster Label                                       \n",
       "0                       17          13          11  \n",
       "1                       54          42          41  \n",
       "2                       48          36          25  \n",
       "3                       27          25          19  \n",
       "4                       20          16          16  "
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Pivot the data to see number of orders by day by clusters. \n",
    "df_orders_by_day = kite_nonDX.pivot_table(index='Cluster Label', columns='DateDespatched', values='OrderID', aggfunc='count')\n",
    "\n",
    "# Display the DataFrame\n",
    "df_orders_by_day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "915f5096",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cluster Label\n",
       "0     8\n",
       "1    30\n",
       "2    23\n",
       "3    14\n",
       "4    13\n",
       "dtype: int64"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the minimum orders per day for each courier\n",
    "min_order_per_day = df_orders_by_day.min(axis=1)  \n",
    "\n",
    "min_order_per_day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "54216d07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cluster Label\n",
       "0    12.833333\n",
       "1    44.444444\n",
       "2    35.944444\n",
       "3    26.666667\n",
       "4    21.055556\n",
       "dtype: float64"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the average (mean) orders per day for each courier\n",
    "avg_order_per_day = df_orders_by_day.mean(axis=1)  \n",
    "\n",
    "avg_order_per_day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "e1d09500",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cluster Label\n",
       "0    13.0\n",
       "1    43.0\n",
       "2    36.5\n",
       "3    27.5\n",
       "4    21.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the median orders per day for each courier\n",
    "median_order_per_day = df_orders_by_day.median(axis=1)  \n",
    "\n",
    "median_order_per_day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "dba6543c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cluster Label\n",
       "0    17\n",
       "1    61\n",
       "2    51\n",
       "3    42\n",
       "4    32\n",
       "dtype: int64"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the maximum orders per day for each courier\n",
    "max_order_per_day = df_orders_by_day.max(axis=1)  \n",
    "\n",
    "max_order_per_day"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d2c2622",
   "metadata": {},
   "source": [
    "### Work out optimal truck capacity for daily minimum of pallets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "b094243c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Minimum_Pallets_Day</th>\n",
       "      <th>3.5-tonne Van (2)</th>\n",
       "      <th>7.5-tonne LGV (14)</th>\n",
       "      <th>18-tonne HGV (24)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster Label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.072352</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19.234192</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18.132844</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9.401686</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.970153</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Minimum_Pallets_Day  3.5-tonne Van (2)  7.5-tonne LGV (14)  \\\n",
       "Cluster Label                                                               \n",
       "0                         4.072352                  0                   0   \n",
       "1                        19.234192                  0                   0   \n",
       "2                        18.132844                  0                   0   \n",
       "3                         9.401686                  0                   0   \n",
       "4                         8.970153                  0                   0   \n",
       "\n",
       "               18-tonne HGV (24)  \n",
       "Cluster Label                     \n",
       "0                              0  \n",
       "1                              0  \n",
       "2                              0  \n",
       "3                              0  \n",
       "4                              0  "
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We will be focusing on number of pallets to determine the truck capacity\n",
    "\n",
    "import math\n",
    "\n",
    "# Maximum pallet capacity of each type of vehicle\n",
    "pallet_capacity_3_5_tonne_van = 2\n",
    "pallet_capacity_7_5_tonne_LGV = 14\n",
    "pallet_capacity_18_tonne_HGV = 24\n",
    "fill_capacity_percent = 1\n",
    "\n",
    "# Create a new DataFrame to store the truck type and number of trucks needed for each cluster.\n",
    "df_trucks_needed_min = pd.DataFrame(index= min_pallets_per_day.index)\n",
    "\n",
    "# Add columns for average pallet count, and number of each truck size required\n",
    "df_trucks_needed_min['Minimum_Pallets_Day'] = min_pallets_per_day\n",
    "df_trucks_needed_min['3.5-tonne Van (2)'] = 0\n",
    "df_trucks_needed_min['7.5-tonne LGV (14)'] = 0\n",
    "df_trucks_needed_min['18-tonne HGV (24)'] = 0\n",
    "\n",
    "df_trucks_needed_min"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "3aafef4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Minimum_Pallets_Day</th>\n",
       "      <th>3.5-tonne Van (2)</th>\n",
       "      <th>7.5-tonne LGV (14)</th>\n",
       "      <th>18-tonne HGV (24)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster Label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.072352</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19.234192</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18.132844</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9.401686</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.970153</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>59.811228</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Minimum_Pallets_Day  3.5-tonne Van (2)  7.5-tonne LGV (14)  \\\n",
       "Cluster Label                                                               \n",
       "0                         4.072352                0.0                 1.0   \n",
       "1                        19.234192                0.0                 0.0   \n",
       "2                        18.132844                0.0                 0.0   \n",
       "3                         9.401686                0.0                 1.0   \n",
       "4                         8.970153                0.0                 1.0   \n",
       "Total                    59.811228                0.0                 3.0   \n",
       "\n",
       "               18-tonne HGV (24)  \n",
       "Cluster Label                     \n",
       "0                            0.0  \n",
       "1                            1.0  \n",
       "2                            1.0  \n",
       "3                            0.0  \n",
       "4                            0.0  \n",
       "Total                        2.0  "
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use a for loop to determine the truck type and number of trucks needed for the minimum pallets\n",
    "for cluster in df_trucks_needed_min.index:\n",
    "    \n",
    "    # Identifying the pallets needed in each truck for each cluster \n",
    "    pallets_needed = df_trucks_needed_min.loc[cluster, 'Minimum_Pallets_Day']\n",
    "\n",
    "    # Checking if the pallets needed can fit into a 3.5-tonne van\n",
    "    if pallets_needed <= pallet_capacity_3_5_tonne_van:        \n",
    "        df_trucks_needed_min.loc[cluster, '3.5-tonne Van (2)'] = 1\n",
    "        \n",
    "    # If not, can it fit into a 7.5-tonne LGV\n",
    "    elif pallet_capacity_3_5_tonne_van < pallets_needed <= pallet_capacity_7_5_tonne_LGV:\n",
    "        df_trucks_needed_min.loc[cluster, '7.5-tonne LGV (14)'] = 1\n",
    "    \n",
    "    # Again, if not, can it fit into an 18-tonne HGV\n",
    "    elif pallet_capacity_7_5_tonne_LGV < pallets_needed <= pallet_capacity_18_tonne_HGV:\n",
    "        df_trucks_needed_min.loc[cluster, '18-tonne HGV (24)'] = 1\n",
    "\n",
    "# Add a total row that sums the number of trucks needed for each truck type\n",
    "df_trucks_needed_min.loc['Total'] = df_trucks_needed_min.sum()\n",
    "\n",
    "# Display the DataFrame with the minimum pallets per cluster, and the number of trucks needed to fit in the pallets per each truck type \n",
    "df_trucks_needed_min"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f04011f",
   "metadata": {},
   "source": [
    "## Cost Analysis based on the daily min. of pallets in each cluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "908dedb5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Minimum_Pallets_Day</th>\n",
       "      <th>3.5-tonne Van (2)</th>\n",
       "      <th>7.5-tonne LGV (14)</th>\n",
       "      <th>18-tonne HGV (24)</th>\n",
       "      <th>3.5_tonne_standing_costs</th>\n",
       "      <th>7.5_tonne_standing_costs</th>\n",
       "      <th>18_tonne_standing_costs</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster Label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.072352</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19.234192</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18.132844</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9.401686</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.970153</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>59.811228</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Minimum_Pallets_Day  3.5-tonne Van (2)  7.5-tonne LGV (14)  \\\n",
       "Cluster Label                                                               \n",
       "0                         4.072352                0.0                 1.0   \n",
       "1                        19.234192                0.0                 0.0   \n",
       "2                        18.132844                0.0                 0.0   \n",
       "3                         9.401686                0.0                 1.0   \n",
       "4                         8.970153                0.0                 1.0   \n",
       "Total                    59.811228                0.0                 3.0   \n",
       "\n",
       "               18-tonne HGV (24)  3.5_tonne_standing_costs  \\\n",
       "Cluster Label                                                \n",
       "0                            0.0                         0   \n",
       "1                            1.0                         0   \n",
       "2                            1.0                         0   \n",
       "3                            0.0                         0   \n",
       "4                            0.0                         0   \n",
       "Total                        2.0                         0   \n",
       "\n",
       "               7.5_tonne_standing_costs  18_tonne_standing_costs  \n",
       "Cluster Label                                                     \n",
       "0                                     0                        0  \n",
       "1                                     0                        0  \n",
       "2                                     0                        0  \n",
       "3                                     0                        0  \n",
       "4                                     0                        0  \n",
       "Total                                 0                        0  "
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating a new DataFrame to calculate the costs of using in-house trucks\n",
    "\n",
    "# Copying the datafrane above and add standing cost columns for each truck type\n",
    "standing_costs = df_trucks_needed_min\n",
    "standing_costs['3.5_tonne_standing_costs'] = 0\n",
    "standing_costs['7.5_tonne_standing_costs'] = 0\n",
    "standing_costs['18_tonne_standing_costs'] = 0\n",
    "standing_costs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "43a475ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# List of standing Costs per vehicle type, provided by Kite.\n",
    "standing_costs_3_5_tonne_van = 600\n",
    "standing_costs_7_5_tonne_LGV = 1250\n",
    "standing_costs_18_tonne_HGV = 1800"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "76108c70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Minimum_Pallets_Day</th>\n",
       "      <th>3.5-tonne Van (2)</th>\n",
       "      <th>7.5-tonne LGV (14)</th>\n",
       "      <th>18-tonne HGV (24)</th>\n",
       "      <th>3.5_tonne_standing_costs</th>\n",
       "      <th>7.5_tonne_standing_costs</th>\n",
       "      <th>18_tonne_standing_costs</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster Label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.072352</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19.234192</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18.132844</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9.401686</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.970153</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>59.811228</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3750.0</td>\n",
       "      <td>3600.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Minimum_Pallets_Day  3.5-tonne Van (2)  7.5-tonne LGV (14)  \\\n",
       "Cluster Label                                                               \n",
       "0                         4.072352                0.0                 1.0   \n",
       "1                        19.234192                0.0                 0.0   \n",
       "2                        18.132844                0.0                 0.0   \n",
       "3                         9.401686                0.0                 1.0   \n",
       "4                         8.970153                0.0                 1.0   \n",
       "Total                    59.811228                0.0                 3.0   \n",
       "\n",
       "               18-tonne HGV (24)  3.5_tonne_standing_costs  \\\n",
       "Cluster Label                                                \n",
       "0                            0.0                       0.0   \n",
       "1                            1.0                       0.0   \n",
       "2                            1.0                       0.0   \n",
       "3                            0.0                       0.0   \n",
       "4                            0.0                       0.0   \n",
       "Total                        2.0                       0.0   \n",
       "\n",
       "               7.5_tonne_standing_costs  18_tonne_standing_costs  \n",
       "Cluster Label                                                     \n",
       "0                                1250.0                      0.0  \n",
       "1                                   0.0                   1800.0  \n",
       "2                                   0.0                   1800.0  \n",
       "3                                1250.0                      0.0  \n",
       "4                                1250.0                      0.0  \n",
       "Total                            3750.0                   3600.0  "
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating standing costs for each cluster based on the vehicle type and quantity\n",
    "standing_costs['3.5_tonne_standing_costs'] = standing_costs['3.5-tonne Van (2)']*standing_costs_3_5_tonne_van\n",
    "standing_costs['7.5_tonne_standing_costs'] = standing_costs['7.5-tonne LGV (14)']*standing_costs_7_5_tonne_LGV\n",
    "standing_costs['18_tonne_standing_costs'] = standing_costs['18-tonne HGV (24)']*standing_costs_18_tonne_HGV\n",
    "\n",
    "# View DataFrame\n",
    "standing_costs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "d781afbd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Minimum_Pallets_Day</th>\n",
       "      <th>3.5-tonne Van (2)</th>\n",
       "      <th>7.5-tonne LGV (14)</th>\n",
       "      <th>18-tonne HGV (24)</th>\n",
       "      <th>3.5_tonne_standing_costs</th>\n",
       "      <th>7.5_tonne_standing_costs</th>\n",
       "      <th>18_tonne_standing_costs</th>\n",
       "      <th>3.5_tonne_running_costs</th>\n",
       "      <th>7.5_tonne_running_costs</th>\n",
       "      <th>18_tonne_running_costs</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster Label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.072352</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19.234192</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18.132844</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9.401686</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.970153</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>59.811228</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3750.0</td>\n",
       "      <td>3600.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Minimum_Pallets_Day  3.5-tonne Van (2)  7.5-tonne LGV (14)  \\\n",
       "Cluster Label                                                               \n",
       "0                         4.072352                0.0                 1.0   \n",
       "1                        19.234192                0.0                 0.0   \n",
       "2                        18.132844                0.0                 0.0   \n",
       "3                         9.401686                0.0                 1.0   \n",
       "4                         8.970153                0.0                 1.0   \n",
       "Total                    59.811228                0.0                 3.0   \n",
       "\n",
       "               18-tonne HGV (24)  3.5_tonne_standing_costs  \\\n",
       "Cluster Label                                                \n",
       "0                            0.0                       0.0   \n",
       "1                            1.0                       0.0   \n",
       "2                            1.0                       0.0   \n",
       "3                            0.0                       0.0   \n",
       "4                            0.0                       0.0   \n",
       "Total                        2.0                       0.0   \n",
       "\n",
       "               7.5_tonne_standing_costs  18_tonne_standing_costs  \\\n",
       "Cluster Label                                                      \n",
       "0                                1250.0                      0.0   \n",
       "1                                   0.0                   1800.0   \n",
       "2                                   0.0                   1800.0   \n",
       "3                                1250.0                      0.0   \n",
       "4                                1250.0                      0.0   \n",
       "Total                            3750.0                   3600.0   \n",
       "\n",
       "               3.5_tonne_running_costs  7.5_tonne_running_costs  \\\n",
       "Cluster Label                                                     \n",
       "0                                    0                        0   \n",
       "1                                    0                        0   \n",
       "2                                    0                        0   \n",
       "3                                    0                        0   \n",
       "4                                    0                        0   \n",
       "Total                                0                        0   \n",
       "\n",
       "               18_tonne_running_costs  \n",
       "Cluster Label                          \n",
       "0                                   0  \n",
       "1                                   0  \n",
       "2                                   0  \n",
       "3                                   0  \n",
       "4                                   0  \n",
       "Total                               0  "
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Copying the datafrane above and add running cost columns for each truck type\n",
    "running_costs = standing_costs\n",
    "running_costs['3.5_tonne_running_costs'] = 0\n",
    "running_costs['7.5_tonne_running_costs'] = 0\n",
    "running_costs['18_tonne_running_costs'] = 0\n",
    "\n",
    "# View DataFrame\n",
    "running_costs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "39b588c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Running costs per vehicle type provided by Kite\n",
    "running_costs_3_5_tonne_van = 2800\n",
    "running_costs_7_5_tonne_LGV = 3200\n",
    "running_costs_18_tonne_HGV = 3600"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "dd84c11c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Minimum_Pallets_Day</th>\n",
       "      <th>3.5-tonne Van (2)</th>\n",
       "      <th>7.5-tonne LGV (14)</th>\n",
       "      <th>18-tonne HGV (24)</th>\n",
       "      <th>3.5_tonne_standing_costs</th>\n",
       "      <th>7.5_tonne_standing_costs</th>\n",
       "      <th>18_tonne_standing_costs</th>\n",
       "      <th>3.5_tonne_running_costs</th>\n",
       "      <th>7.5_tonne_running_costs</th>\n",
       "      <th>18_tonne_running_costs</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster Label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.072352</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3200.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19.234192</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18.132844</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9.401686</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3200.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.970153</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3200.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>59.811228</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3750.0</td>\n",
       "      <td>3600.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9600.0</td>\n",
       "      <td>7200.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Minimum_Pallets_Day  3.5-tonne Van (2)  7.5-tonne LGV (14)  \\\n",
       "Cluster Label                                                               \n",
       "0                         4.072352                0.0                 1.0   \n",
       "1                        19.234192                0.0                 0.0   \n",
       "2                        18.132844                0.0                 0.0   \n",
       "3                         9.401686                0.0                 1.0   \n",
       "4                         8.970153                0.0                 1.0   \n",
       "Total                    59.811228                0.0                 3.0   \n",
       "\n",
       "               18-tonne HGV (24)  3.5_tonne_standing_costs  \\\n",
       "Cluster Label                                                \n",
       "0                            0.0                       0.0   \n",
       "1                            1.0                       0.0   \n",
       "2                            1.0                       0.0   \n",
       "3                            0.0                       0.0   \n",
       "4                            0.0                       0.0   \n",
       "Total                        2.0                       0.0   \n",
       "\n",
       "               7.5_tonne_standing_costs  18_tonne_standing_costs  \\\n",
       "Cluster Label                                                      \n",
       "0                                1250.0                      0.0   \n",
       "1                                   0.0                   1800.0   \n",
       "2                                   0.0                   1800.0   \n",
       "3                                1250.0                      0.0   \n",
       "4                                1250.0                      0.0   \n",
       "Total                            3750.0                   3600.0   \n",
       "\n",
       "               3.5_tonne_running_costs  7.5_tonne_running_costs  \\\n",
       "Cluster Label                                                     \n",
       "0                                  0.0                   3200.0   \n",
       "1                                  0.0                      0.0   \n",
       "2                                  0.0                      0.0   \n",
       "3                                  0.0                   3200.0   \n",
       "4                                  0.0                   3200.0   \n",
       "Total                              0.0                   9600.0   \n",
       "\n",
       "               18_tonne_running_costs  \n",
       "Cluster Label                          \n",
       "0                                 0.0  \n",
       "1                              3600.0  \n",
       "2                              3600.0  \n",
       "3                                 0.0  \n",
       "4                                 0.0  \n",
       "Total                          7200.0  "
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating running costs for each cluster based on the vehicle type and quantity\n",
    "running_costs['3.5_tonne_running_costs'] = running_costs['3.5-tonne Van (2)']*running_costs_3_5_tonne_van\n",
    "running_costs['7.5_tonne_running_costs'] = running_costs['7.5-tonne LGV (14)']*running_costs_7_5_tonne_LGV\n",
    "running_costs['18_tonne_running_costs'] = running_costs['18-tonne HGV (24)']*running_costs_18_tonne_HGV\n",
    "\n",
    "# View DataFrame\n",
    "running_costs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "88dbe6b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6, 10)"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "running_costs.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "e19a64e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Minimum_Pallets_Day</th>\n",
       "      <th>3.5-tonne Van (2)</th>\n",
       "      <th>7.5-tonne LGV (14)</th>\n",
       "      <th>18-tonne HGV (24)</th>\n",
       "      <th>3.5_tonne_standing_costs</th>\n",
       "      <th>7.5_tonne_standing_costs</th>\n",
       "      <th>18_tonne_standing_costs</th>\n",
       "      <th>3.5_tonne_running_costs</th>\n",
       "      <th>7.5_tonne_running_costs</th>\n",
       "      <th>18_tonne_running_costs</th>\n",
       "      <th>Total_costs_month</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster Label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.072352</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3200.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4450.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19.234192</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3600.0</td>\n",
       "      <td>5400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18.132844</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3600.0</td>\n",
       "      <td>5400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9.401686</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3200.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4450.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.970153</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3200.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4450.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>59.811228</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3750.0</td>\n",
       "      <td>3600.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9600.0</td>\n",
       "      <td>7200.0</td>\n",
       "      <td>24150.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Minimum_Pallets_Day  3.5-tonne Van (2)  7.5-tonne LGV (14)  \\\n",
       "Cluster Label                                                               \n",
       "0                         4.072352                0.0                 1.0   \n",
       "1                        19.234192                0.0                 0.0   \n",
       "2                        18.132844                0.0                 0.0   \n",
       "3                         9.401686                0.0                 1.0   \n",
       "4                         8.970153                0.0                 1.0   \n",
       "Total                    59.811228                0.0                 3.0   \n",
       "\n",
       "               18-tonne HGV (24)  3.5_tonne_standing_costs  \\\n",
       "Cluster Label                                                \n",
       "0                            0.0                       0.0   \n",
       "1                            1.0                       0.0   \n",
       "2                            1.0                       0.0   \n",
       "3                            0.0                       0.0   \n",
       "4                            0.0                       0.0   \n",
       "Total                        2.0                       0.0   \n",
       "\n",
       "               7.5_tonne_standing_costs  18_tonne_standing_costs  \\\n",
       "Cluster Label                                                      \n",
       "0                                1250.0                      0.0   \n",
       "1                                   0.0                   1800.0   \n",
       "2                                   0.0                   1800.0   \n",
       "3                                1250.0                      0.0   \n",
       "4                                1250.0                      0.0   \n",
       "Total                            3750.0                   3600.0   \n",
       "\n",
       "               3.5_tonne_running_costs  7.5_tonne_running_costs  \\\n",
       "Cluster Label                                                     \n",
       "0                                  0.0                   3200.0   \n",
       "1                                  0.0                      0.0   \n",
       "2                                  0.0                      0.0   \n",
       "3                                  0.0                   3200.0   \n",
       "4                                  0.0                   3200.0   \n",
       "Total                              0.0                   9600.0   \n",
       "\n",
       "               18_tonne_running_costs  Total_costs_month  \n",
       "Cluster Label                                             \n",
       "0                                 0.0             4450.0  \n",
       "1                              3600.0             5400.0  \n",
       "2                              3600.0             5400.0  \n",
       "3                                 0.0             4450.0  \n",
       "4                                 0.0             4450.0  \n",
       "Total                          7200.0            24150.0  "
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Add additional column to calculate total cost of getting the in-house trucks per cluster\n",
    "running_costs['Total_costs_month'] = running_costs.iloc[:,5:10].sum(axis=1)\n",
    "running_costs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "06eca164",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6, 11)"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "running_costs.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "51873b97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster Label</th>\n",
       "      <th>Pallets</th>\n",
       "      <th>DeliveryCost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>199.3</td>\n",
       "      <td>9456.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>879.3</td>\n",
       "      <td>37954.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>642.4</td>\n",
       "      <td>30323.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>472.3</td>\n",
       "      <td>19891.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>371.4</td>\n",
       "      <td>15854.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cluster Label  Pallets  DeliveryCost\n",
       "0              0    199.3        9456.3\n",
       "1              1    879.3       37954.8\n",
       "2              2    642.4       30323.9\n",
       "3              3    472.3       19891.9\n",
       "4              4    371.4       15854.0"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the total number of pallets delivered currently and delivery costs spent, per cluster\n",
    "pallet_cost_now = kite_nonDX.groupby('Cluster Label',as_index=False)[['Pallets','DeliveryCost']].sum()\n",
    "\n",
    "# We need to scale the pallet and cost numbers to a calendar month\n",
    "# Divide the cost numbers by 18 (number of working days in the data) and multiply by 22 (number of working days in a month)\n",
    "pallet_cost_now['Pallets']=pallet_cost_now['Pallets']/18*22\n",
    "pallet_cost_now['DeliveryCost']=pallet_cost_now['DeliveryCost']/18*22\n",
    "pallet_cost_now.round(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "a0bb3880",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Minimum_Pallets_Day</th>\n",
       "      <th>Total_costs_month</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster Label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.1</td>\n",
       "      <td>4450.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19.2</td>\n",
       "      <td>5400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18.1</td>\n",
       "      <td>5400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9.4</td>\n",
       "      <td>4450.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9.0</td>\n",
       "      <td>4450.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>59.8</td>\n",
       "      <td>24150.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Minimum_Pallets_Day  Total_costs_month\n",
       "Cluster Label                                        \n",
       "0                              4.1             4450.0\n",
       "1                             19.2             5400.0\n",
       "2                             18.1             5400.0\n",
       "3                              9.4             4450.0\n",
       "4                              9.0             4450.0\n",
       "Total                         59.8            24150.0"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Extracted the minimum amount of pallet per day per cluster which were used for the analysis\n",
    "pallet_minimum = running_costs[['Minimum_Pallets_Day','Total_costs_month']]\n",
    "pallet_minimum.round(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "884615e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\608370383.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  pallet_minimum['Minimum_Pallets_Month'] = pallet_minimum['Minimum_Pallets_Day']*22\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Minimum_Pallets_Day</th>\n",
       "      <th>Total_costs_month</th>\n",
       "      <th>Minimum_Pallets_Month</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster Label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.1</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>89.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19.2</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>423.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18.1</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>398.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9.4</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>206.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9.0</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>197.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>59.8</td>\n",
       "      <td>24150.0</td>\n",
       "      <td>1315.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Minimum_Pallets_Day  Total_costs_month  Minimum_Pallets_Month\n",
       "Cluster Label                                                               \n",
       "0                              4.1             4450.0                   89.6\n",
       "1                             19.2             5400.0                  423.2\n",
       "2                             18.1             5400.0                  398.9\n",
       "3                              9.4             4450.0                  206.8\n",
       "4                              9.0             4450.0                  197.3\n",
       "Total                         59.8            24150.0                 1315.8"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Multiply minimum amount of pallet per day per cluster by the average number of working days (22) in a month\n",
    "pallet_minimum['Minimum_Pallets_Month'] = pallet_minimum['Minimum_Pallets_Day']*22\n",
    "pallet_minimum.round(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "7fd1a1c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster Label</th>\n",
       "      <th>Pallets</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>Total_costs_month</th>\n",
       "      <th>Minimum_Pallets_Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>199.310151</td>\n",
       "      <td>9456.296667</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>89.591754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>879.295555</td>\n",
       "      <td>37954.766667</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>423.152231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>642.424033</td>\n",
       "      <td>30323.883333</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>398.922576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>472.297753</td>\n",
       "      <td>19891.886667</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>206.837085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>371.385153</td>\n",
       "      <td>15854.018889</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>197.343372</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Cluster Label     Pallets  DeliveryCost  Total_costs_month  \\\n",
       "0             0  199.310151   9456.296667             4450.0   \n",
       "1             1  879.295555  37954.766667             5400.0   \n",
       "2             2  642.424033  30323.883333             5400.0   \n",
       "3             3  472.297753  19891.886667             4450.0   \n",
       "4             4  371.385153  15854.018889             4450.0   \n",
       "\n",
       "   Minimum_Pallets_Month  \n",
       "0              89.591754  \n",
       "1             423.152231  \n",
       "2             398.922576  \n",
       "3             206.837085  \n",
       "4             197.343372  "
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We now need to compare the total cost of this partial replacement model (in-house trucks + couriers to deliver remaining) \n",
    "# vs. the current delivery cost.\n",
    "\n",
    "# Create a comparison dataframe\n",
    "comp=pallet_cost_now.join(pallet_minimum, on=['Cluster Label'], how='inner')\n",
    "comp=comp.drop(columns='Minimum_Pallets_Day')\n",
    "comp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "ef605789",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster Label</th>\n",
       "      <th>Pallets</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>Total_costs_month</th>\n",
       "      <th>Minimum_Pallets_Month</th>\n",
       "      <th>Courier Cost per Pallet (Current)</th>\n",
       "      <th>Remaining Pallets (Model)</th>\n",
       "      <th>Courier Cost Remaining Pallets (Model)</th>\n",
       "      <th>Partial Replacement Model Total Cost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>199.0</td>\n",
       "      <td>9456.0</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>5206.0</td>\n",
       "      <td>9656.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>879.0</td>\n",
       "      <td>37955.0</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>423.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>456.0</td>\n",
       "      <td>19689.0</td>\n",
       "      <td>25089.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>642.0</td>\n",
       "      <td>30324.0</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>399.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>244.0</td>\n",
       "      <td>11494.0</td>\n",
       "      <td>16894.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>472.0</td>\n",
       "      <td>19892.0</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>207.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>265.0</td>\n",
       "      <td>11180.0</td>\n",
       "      <td>15630.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>371.0</td>\n",
       "      <td>15854.0</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>197.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>174.0</td>\n",
       "      <td>7430.0</td>\n",
       "      <td>11880.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Cluster Label  Pallets  DeliveryCost  Total_costs_month  \\\n",
       "0             0    199.0        9456.0             4450.0   \n",
       "1             1    879.0       37955.0             5400.0   \n",
       "2             2    642.0       30324.0             5400.0   \n",
       "3             3    472.0       19892.0             4450.0   \n",
       "4             4    371.0       15854.0             4450.0   \n",
       "\n",
       "   Minimum_Pallets_Month  Courier Cost per Pallet (Current)  \\\n",
       "0                   90.0                               47.0   \n",
       "1                  423.0                               43.0   \n",
       "2                  399.0                               47.0   \n",
       "3                  207.0                               42.0   \n",
       "4                  197.0                               43.0   \n",
       "\n",
       "   Remaining Pallets (Model)  Courier Cost Remaining Pallets (Model)  \\\n",
       "0                      110.0                                  5206.0   \n",
       "1                      456.0                                 19689.0   \n",
       "2                      244.0                                 11494.0   \n",
       "3                      265.0                                 11180.0   \n",
       "4                      174.0                                  7430.0   \n",
       "\n",
       "   Partial Replacement Model Total Cost  \n",
       "0                                9656.0  \n",
       "1                               25089.0  \n",
       "2                               16894.0  \n",
       "3                               15630.0  \n",
       "4                               11880.0  "
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate:\n",
    "# Pallets left to deliver after the in-house trucks have covered the minimum pallets ('Remaining Pallets')\n",
    "# The cost of delivering the remaining pallets,assuming the existing couriers would be used to deliver them\n",
    "comp['Courier Cost per Pallet (Current)']=comp['DeliveryCost']/comp['Pallets']\n",
    "comp['Remaining Pallets (Model)']=comp['Pallets']-comp['Minimum_Pallets_Month']\n",
    "comp['Courier Cost Remaining Pallets (Model)']=comp['Courier Cost per Pallet (Current)']*comp['Remaining Pallets (Model)']\n",
    "comp['Partial Replacement Model Total Cost']=comp['Total_costs_month']+comp['Courier Cost Remaining Pallets (Model)']\n",
    "comp.round()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "fa84f5e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster Label</th>\n",
       "      <th>Pallets</th>\n",
       "      <th>Courier Cost (Current)</th>\n",
       "      <th>in-house trucks cost (Model)</th>\n",
       "      <th>Pallets delivered by in-house trucks (Model)</th>\n",
       "      <th>Courier Cost per Pallet (Current)</th>\n",
       "      <th>Remaining Pallets (Model)</th>\n",
       "      <th>Courier Cost Remaining Pallets (Model)</th>\n",
       "      <th>Partial Replacement Model Total Cost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>199.0</td>\n",
       "      <td>9456.0</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>5206.0</td>\n",
       "      <td>9656.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>879.0</td>\n",
       "      <td>37955.0</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>423.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>456.0</td>\n",
       "      <td>19689.0</td>\n",
       "      <td>25089.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>642.0</td>\n",
       "      <td>30324.0</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>399.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>244.0</td>\n",
       "      <td>11494.0</td>\n",
       "      <td>16894.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>472.0</td>\n",
       "      <td>19892.0</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>207.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>265.0</td>\n",
       "      <td>11180.0</td>\n",
       "      <td>15630.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>371.0</td>\n",
       "      <td>15854.0</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>197.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>174.0</td>\n",
       "      <td>7430.0</td>\n",
       "      <td>11880.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Cluster Label  Pallets  Courier Cost (Current)  \\\n",
       "0             0    199.0                  9456.0   \n",
       "1             1    879.0                 37955.0   \n",
       "2             2    642.0                 30324.0   \n",
       "3             3    472.0                 19892.0   \n",
       "4             4    371.0                 15854.0   \n",
       "\n",
       "   in-house trucks cost (Model)  Pallets delivered by in-house trucks (Model)  \\\n",
       "0                        4450.0                                          90.0   \n",
       "1                        5400.0                                         423.0   \n",
       "2                        5400.0                                         399.0   \n",
       "3                        4450.0                                         207.0   \n",
       "4                        4450.0                                         197.0   \n",
       "\n",
       "   Courier Cost per Pallet (Current)  Remaining Pallets (Model)  \\\n",
       "0                               47.0                      110.0   \n",
       "1                               43.0                      456.0   \n",
       "2                               47.0                      244.0   \n",
       "3                               42.0                      265.0   \n",
       "4                               43.0                      174.0   \n",
       "\n",
       "   Courier Cost Remaining Pallets (Model)  \\\n",
       "0                                  5206.0   \n",
       "1                                 19689.0   \n",
       "2                                 11494.0   \n",
       "3                                 11180.0   \n",
       "4                                  7430.0   \n",
       "\n",
       "   Partial Replacement Model Total Cost  \n",
       "0                                9656.0  \n",
       "1                               25089.0  \n",
       "2                               16894.0  \n",
       "3                               15630.0  \n",
       "4                               11880.0  "
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rename some columns to make it clearer\n",
    "comp.rename(columns={'DeliveryCost': 'Courier Cost (Current)', \n",
    "                     'Total_costs_month': 'in-house trucks cost (Model)',\n",
    "                     'Minimum_Pallets_Month':'Pallets delivered by in-house trucks (Model)'}, inplace=True)\n",
    "comp.round()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "e2c0cd8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calcuate the % of total pallets delivered using in-house trucks\n",
    "comp['Pallets delivered by in-house trucks, % total']=comp['Pallets delivered by in-house trucks (Model)']/comp['Pallets']*100\n",
    "\n",
    "# Calculate cost saving £, note this is for the calendar month\n",
    "comp['cost saving £']=comp['Courier Cost (Current)']-comp['Partial Replacement Model Total Cost']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "a761d7d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\1105374361.py:2: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  comp.append(comp.sum(numeric_only=True), ignore_index=True).round(1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster Label</th>\n",
       "      <th>Pallets</th>\n",
       "      <th>Courier Cost (Current)</th>\n",
       "      <th>in-house trucks cost (Model)</th>\n",
       "      <th>Pallets delivered by in-house trucks (Model)</th>\n",
       "      <th>Courier Cost per Pallet (Current)</th>\n",
       "      <th>Remaining Pallets (Model)</th>\n",
       "      <th>Courier Cost Remaining Pallets (Model)</th>\n",
       "      <th>Partial Replacement Model Total Cost</th>\n",
       "      <th>Pallets delivered by in-house trucks, % total</th>\n",
       "      <th>cost saving £</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>199.3</td>\n",
       "      <td>9456.3</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>89.6</td>\n",
       "      <td>47.4</td>\n",
       "      <td>109.7</td>\n",
       "      <td>5205.6</td>\n",
       "      <td>9655.6</td>\n",
       "      <td>45.0</td>\n",
       "      <td>-199.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>879.3</td>\n",
       "      <td>37954.8</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>423.2</td>\n",
       "      <td>43.2</td>\n",
       "      <td>456.1</td>\n",
       "      <td>19689.4</td>\n",
       "      <td>25089.4</td>\n",
       "      <td>48.1</td>\n",
       "      <td>12865.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>642.4</td>\n",
       "      <td>30323.9</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>398.9</td>\n",
       "      <td>47.2</td>\n",
       "      <td>243.5</td>\n",
       "      <td>11493.8</td>\n",
       "      <td>16893.8</td>\n",
       "      <td>62.1</td>\n",
       "      <td>13430.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>472.3</td>\n",
       "      <td>19891.9</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>206.8</td>\n",
       "      <td>42.1</td>\n",
       "      <td>265.5</td>\n",
       "      <td>11180.5</td>\n",
       "      <td>15630.5</td>\n",
       "      <td>43.8</td>\n",
       "      <td>4261.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>371.4</td>\n",
       "      <td>15854.0</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>197.3</td>\n",
       "      <td>42.7</td>\n",
       "      <td>174.0</td>\n",
       "      <td>7429.6</td>\n",
       "      <td>11879.6</td>\n",
       "      <td>53.1</td>\n",
       "      <td>3974.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2564.7</td>\n",
       "      <td>113480.9</td>\n",
       "      <td>24150.0</td>\n",
       "      <td>1315.8</td>\n",
       "      <td>222.6</td>\n",
       "      <td>1248.9</td>\n",
       "      <td>54999.0</td>\n",
       "      <td>79149.0</td>\n",
       "      <td>252.1</td>\n",
       "      <td>34331.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Cluster Label  Pallets  Courier Cost (Current)  \\\n",
       "0             0    199.3                  9456.3   \n",
       "1             1    879.3                 37954.8   \n",
       "2             2    642.4                 30323.9   \n",
       "3             3    472.3                 19891.9   \n",
       "4             4    371.4                 15854.0   \n",
       "5           NaN   2564.7                113480.9   \n",
       "\n",
       "   in-house trucks cost (Model)  Pallets delivered by in-house trucks (Model)  \\\n",
       "0                        4450.0                                          89.6   \n",
       "1                        5400.0                                         423.2   \n",
       "2                        5400.0                                         398.9   \n",
       "3                        4450.0                                         206.8   \n",
       "4                        4450.0                                         197.3   \n",
       "5                       24150.0                                        1315.8   \n",
       "\n",
       "   Courier Cost per Pallet (Current)  Remaining Pallets (Model)  \\\n",
       "0                               47.4                      109.7   \n",
       "1                               43.2                      456.1   \n",
       "2                               47.2                      243.5   \n",
       "3                               42.1                      265.5   \n",
       "4                               42.7                      174.0   \n",
       "5                              222.6                     1248.9   \n",
       "\n",
       "   Courier Cost Remaining Pallets (Model)  \\\n",
       "0                                  5205.6   \n",
       "1                                 19689.4   \n",
       "2                                 11493.8   \n",
       "3                                 11180.5   \n",
       "4                                  7429.6   \n",
       "5                                 54999.0   \n",
       "\n",
       "   Partial Replacement Model Total Cost  \\\n",
       "0                                9655.6   \n",
       "1                               25089.4   \n",
       "2                               16893.8   \n",
       "3                               15630.5   \n",
       "4                               11879.6   \n",
       "5                               79149.0   \n",
       "\n",
       "   Pallets delivered by in-house trucks, % total  cost saving £  \n",
       "0                                           45.0         -199.3  \n",
       "1                                           48.1        12865.4  \n",
       "2                                           62.1        13430.1  \n",
       "3                                           43.8         4261.4  \n",
       "4                                           53.1         3974.4  \n",
       "5                                          252.1        34331.9  "
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Add a total row\n",
    "comp.append(comp.sum(numeric_only=True), ignore_index=True).round(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "bda60b6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster Label</th>\n",
       "      <th>Pallets</th>\n",
       "      <th>Courier Cost (Current)</th>\n",
       "      <th>in-house trucks cost (Model)</th>\n",
       "      <th>Pallets delivered by in-house trucks (Model)</th>\n",
       "      <th>Courier Cost per Pallet (Current)</th>\n",
       "      <th>Remaining Pallets (Model)</th>\n",
       "      <th>Courier Cost Remaining Pallets (Model)</th>\n",
       "      <th>Partial Replacement Model Total Cost</th>\n",
       "      <th>Pallets delivered by in-house trucks, % total</th>\n",
       "      <th>cost saving £</th>\n",
       "      <th>cost saving %</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>199.3</td>\n",
       "      <td>9456.3</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>89.6</td>\n",
       "      <td>47.4</td>\n",
       "      <td>109.7</td>\n",
       "      <td>5205.6</td>\n",
       "      <td>9655.6</td>\n",
       "      <td>45.0</td>\n",
       "      <td>-199.3</td>\n",
       "      <td>-2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>879.3</td>\n",
       "      <td>37954.8</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>423.2</td>\n",
       "      <td>43.2</td>\n",
       "      <td>456.1</td>\n",
       "      <td>19689.4</td>\n",
       "      <td>25089.4</td>\n",
       "      <td>48.1</td>\n",
       "      <td>12865.4</td>\n",
       "      <td>33.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>642.4</td>\n",
       "      <td>30323.9</td>\n",
       "      <td>5400.0</td>\n",
       "      <td>398.9</td>\n",
       "      <td>47.2</td>\n",
       "      <td>243.5</td>\n",
       "      <td>11493.8</td>\n",
       "      <td>16893.8</td>\n",
       "      <td>62.1</td>\n",
       "      <td>13430.1</td>\n",
       "      <td>44.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>472.3</td>\n",
       "      <td>19891.9</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>206.8</td>\n",
       "      <td>42.1</td>\n",
       "      <td>265.5</td>\n",
       "      <td>11180.5</td>\n",
       "      <td>15630.5</td>\n",
       "      <td>43.8</td>\n",
       "      <td>4261.4</td>\n",
       "      <td>21.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>371.4</td>\n",
       "      <td>15854.0</td>\n",
       "      <td>4450.0</td>\n",
       "      <td>197.3</td>\n",
       "      <td>42.7</td>\n",
       "      <td>174.0</td>\n",
       "      <td>7429.6</td>\n",
       "      <td>11879.6</td>\n",
       "      <td>53.1</td>\n",
       "      <td>3974.4</td>\n",
       "      <td>25.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Cluster Label  Pallets  Courier Cost (Current)  \\\n",
       "0             0    199.3                  9456.3   \n",
       "1             1    879.3                 37954.8   \n",
       "2             2    642.4                 30323.9   \n",
       "3             3    472.3                 19891.9   \n",
       "4             4    371.4                 15854.0   \n",
       "\n",
       "   in-house trucks cost (Model)  Pallets delivered by in-house trucks (Model)  \\\n",
       "0                        4450.0                                          89.6   \n",
       "1                        5400.0                                         423.2   \n",
       "2                        5400.0                                         398.9   \n",
       "3                        4450.0                                         206.8   \n",
       "4                        4450.0                                         197.3   \n",
       "\n",
       "   Courier Cost per Pallet (Current)  Remaining Pallets (Model)  \\\n",
       "0                               47.4                      109.7   \n",
       "1                               43.2                      456.1   \n",
       "2                               47.2                      243.5   \n",
       "3                               42.1                      265.5   \n",
       "4                               42.7                      174.0   \n",
       "\n",
       "   Courier Cost Remaining Pallets (Model)  \\\n",
       "0                                  5205.6   \n",
       "1                                 19689.4   \n",
       "2                                 11493.8   \n",
       "3                                 11180.5   \n",
       "4                                  7429.6   \n",
       "\n",
       "   Partial Replacement Model Total Cost  \\\n",
       "0                                9655.6   \n",
       "1                               25089.4   \n",
       "2                               16893.8   \n",
       "3                               15630.5   \n",
       "4                               11879.6   \n",
       "\n",
       "   Pallets delivered by in-house trucks, % total  cost saving £  cost saving %  \n",
       "0                                           45.0         -199.3           -2.1  \n",
       "1                                           48.1        12865.4           33.9  \n",
       "2                                           62.1        13430.1           44.3  \n",
       "3                                           43.8         4261.4           21.4  \n",
       "4                                           53.1         3974.4           25.1  "
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate cost saving %\n",
    "comp['cost saving %']=comp['cost saving £']/comp['Courier Cost (Current)']*100\n",
    "comp.round(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "520d38c8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d265432a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9641a02",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a20f26e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d978e66",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0aac624",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52011c70",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a7e979e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "afc09c77",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab8e3d38",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed743a38",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c7eafb6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "737356e8",
   "metadata": {},
   "source": [
    "# "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78db5a24",
   "metadata": {},
   "source": [
    "## ANALYSIS IDEAS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "2d660f8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\153615408.py:2: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
      "  correlation = all_joined.corr()\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View Correlation amount the columns using 'Pearson' method.\n",
    "correlation = all_joined.corr()\n",
    "\n",
    "# Heatmap of the correlation.\n",
    "sns.heatmap(data=correlation, annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "e8266ec9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py:2095: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
      "  warnings.warn(msg, UserWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x18c622f2b30>"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2000x500 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize the relationship between potential independent variables \n",
    "##(ProductEXVAT,Weight_per_line, Volume_per_line_m3 & Pallet_per_line) \n",
    "# and the dependent variable(deliverycost)\n",
    "sns.pairplot(data=all_joined, x_vars=['ProductsExVAT',\n",
    "                                      'Weight_per_line',\n",
    "                                      'Volume_per_line_m3',\n",
    "                                      'Pallet_per_line'],y_vars='DeliveryCost',size=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "e2cccbfa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Courier</th>\n",
       "      <th>Status</th>\n",
       "      <th>OrderID</th>\n",
       "      <th>%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DX Freight</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>9531</td>\n",
       "      <td>41.455352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DX Express</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>9252</td>\n",
       "      <td>40.241834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MFS</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>3862</td>\n",
       "      <td>16.797877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Split</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>306</td>\n",
       "      <td>1.330956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Direct</td>\n",
       "      <td>Dispatched</td>\n",
       "      <td>40</td>\n",
       "      <td>0.173981</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Courier      Status  OrderID          %\n",
       "1  DX Freight  Dispatched     9531  41.455352\n",
       "0  DX Express  Dispatched     9252  40.241834\n",
       "3         MFS  Dispatched     3862  16.797877\n",
       "4       Split  Dispatched      306   1.330956\n",
       "2      Direct  Dispatched       40   0.173981"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Groupby data based on Courier and Status for the count of orderID.\n",
    "order_courier = pd.DataFrame(all_joined.groupby(['Courier','Status'],as_index=False)['OrderID'].count())\n",
    "\n",
    "# Add an additional column to calculate percentage of number of orders.\n",
    "order_courier['%'] = order_courier['OrderID']/order_courier['OrderID'].sum()*100\n",
    "\n",
    "# Sort DataFrame.\n",
    "order_courier.sort_values(by='%',ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "c51e2189",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1600x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set figure size.\n",
    "c = sns.set(rc={'figure.figsize':(16, 8)})\n",
    "\n",
    "# Create barplot.\n",
    "c = sns.barplot(data=order_courier,x='Courier',y='%')\n",
    "for container in c.containers:\n",
    "    c.bar_label(container,fontsize=18,color='darkblue',fontweight='bold')\n",
    "\n",
    "# Set Title.\n",
    "c.set_title(\"% of number of delivery based on Couriers\",fontsize=20,fontweight='bold')\n",
    "plt.xticks(size=15,fontweight='bold')\n",
    "plt.yticks(size=15,fontweight='bold')\n",
    "\n",
    "# displaying chart.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "92779317",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\3924465476.py:2: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  courier_dimension = pd.DataFrame(all_joined.groupby('Courier',as_index=False)['Weight_per_line',\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Courier</th>\n",
       "      <th>Weight_per_line</th>\n",
       "      <th>Volume_per_line_m3</th>\n",
       "      <th>Pallet_per_line</th>\n",
       "      <th>DeliveryCost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DX Express</td>\n",
       "      <td>131816.32</td>\n",
       "      <td>636.723322</td>\n",
       "      <td>560.127807</td>\n",
       "      <td>69477.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DX Freight</td>\n",
       "      <td>438320.69</td>\n",
       "      <td>6975.530599</td>\n",
       "      <td>4410.621255</td>\n",
       "      <td>212284.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Direct</td>\n",
       "      <td>1885.78</td>\n",
       "      <td>10.237059</td>\n",
       "      <td>11.245167</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MFS</td>\n",
       "      <td>1039580.82</td>\n",
       "      <td>7359.647458</td>\n",
       "      <td>5151.402186</td>\n",
       "      <td>271516.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Split</td>\n",
       "      <td>89610.83</td>\n",
       "      <td>1243.416462</td>\n",
       "      <td>761.965298</td>\n",
       "      <td>27089.97</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Courier  Weight_per_line  Volume_per_line_m3  Pallet_per_line  \\\n",
       "0  DX Express        131816.32          636.723322       560.127807   \n",
       "1  DX Freight        438320.69         6975.530599      4410.621255   \n",
       "2      Direct          1885.78           10.237059        11.245167   \n",
       "3         MFS       1039580.82         7359.647458      5151.402186   \n",
       "4       Split         89610.83         1243.416462       761.965298   \n",
       "\n",
       "   DeliveryCost  \n",
       "0      69477.79  \n",
       "1     212284.02  \n",
       "2          0.00  \n",
       "3     271516.94  \n",
       "4      27089.97  "
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Groupby Couriers for total weight, volume, pallet and deliverycost\n",
    "courier_dimension = pd.DataFrame(all_joined.groupby('Courier',as_index=False)['Weight_per_line',\n",
    "                                                                              'Volume_per_line_m3',\n",
    "                                                                              'Pallet_per_line','DeliveryCost'].sum())\n",
    "\n",
    "courier_dimension"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "3115e30d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Courier</th>\n",
       "      <th>Weight_per_line</th>\n",
       "      <th>Volume_per_line_m3</th>\n",
       "      <th>Pallet_per_line</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>%_deliverycost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DX Express</td>\n",
       "      <td>131816.32</td>\n",
       "      <td>636.723322</td>\n",
       "      <td>560.127807</td>\n",
       "      <td>69477.79</td>\n",
       "      <td>11.971319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DX Freight</td>\n",
       "      <td>438320.69</td>\n",
       "      <td>6975.530599</td>\n",
       "      <td>4410.621255</td>\n",
       "      <td>212284.02</td>\n",
       "      <td>36.577440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Direct</td>\n",
       "      <td>1885.78</td>\n",
       "      <td>10.237059</td>\n",
       "      <td>11.245167</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MFS</td>\n",
       "      <td>1039580.82</td>\n",
       "      <td>7359.647458</td>\n",
       "      <td>5151.402186</td>\n",
       "      <td>271516.94</td>\n",
       "      <td>46.783524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Split</td>\n",
       "      <td>89610.83</td>\n",
       "      <td>1243.416462</td>\n",
       "      <td>761.965298</td>\n",
       "      <td>27089.97</td>\n",
       "      <td>4.667717</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Courier  Weight_per_line  Volume_per_line_m3  Pallet_per_line  \\\n",
       "0  DX Express        131816.32          636.723322       560.127807   \n",
       "1  DX Freight        438320.69         6975.530599      4410.621255   \n",
       "2      Direct          1885.78           10.237059        11.245167   \n",
       "3         MFS       1039580.82         7359.647458      5151.402186   \n",
       "4       Split         89610.83         1243.416462       761.965298   \n",
       "\n",
       "   DeliveryCost  %_deliverycost  \n",
       "0      69477.79       11.971319  \n",
       "1     212284.02       36.577440  \n",
       "2          0.00        0.000000  \n",
       "3     271516.94       46.783524  \n",
       "4      27089.97        4.667717  "
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Add a column to calculate the percentage of deliverycost of total deliverycost.\n",
    "courier_dimension['%_deliverycost'] = courier_dimension['DeliveryCost']/courier_dimension['DeliveryCost'].sum()*100\n",
    "courier_dimension"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "5239e722",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1600x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set figure size.\n",
    "c = sns.set(rc={'figure.figsize':(16, 8)})\n",
    "\n",
    "# Create barplot.\n",
    "c = sns.barplot(data=courier_dimension,x='Courier',y='%_deliverycost')\n",
    "for container in c.containers:\n",
    "    c.bar_label(container,fontsize=18,color='darkblue',fontweight='bold')\n",
    "\n",
    "# Set Title.\n",
    "c.set_title(\"% of delivery cost based on Couriers\",fontsize=20,fontweight='bold')\n",
    "plt.xticks(size=15,fontweight='bold')\n",
    "plt.yticks(size=15,fontweight='bold')\n",
    "\n",
    "# displaying chart.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "91232c0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Courier</th>\n",
       "      <th>Weight_per_line</th>\n",
       "      <th>Volume_per_line_m3</th>\n",
       "      <th>Pallet_per_line</th>\n",
       "      <th>DeliveryCost</th>\n",
       "      <th>%_deliverycost</th>\n",
       "      <th>cost_per_weight</th>\n",
       "      <th>cost_per_volume</th>\n",
       "      <th>cost_per_pallet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DX Express</td>\n",
       "      <td>131816.32</td>\n",
       "      <td>636.723322</td>\n",
       "      <td>560.127807</td>\n",
       "      <td>69477.79</td>\n",
       "      <td>11.971319</td>\n",
       "      <td>0.527080</td>\n",
       "      <td>109.117709</td>\n",
       "      <td>124.039173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DX Freight</td>\n",
       "      <td>438320.69</td>\n",
       "      <td>6975.530599</td>\n",
       "      <td>4410.621255</td>\n",
       "      <td>212284.02</td>\n",
       "      <td>36.577440</td>\n",
       "      <td>0.484312</td>\n",
       "      <td>30.432670</td>\n",
       "      <td>48.130186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Direct</td>\n",
       "      <td>1885.78</td>\n",
       "      <td>10.237059</td>\n",
       "      <td>11.245167</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MFS</td>\n",
       "      <td>1039580.82</td>\n",
       "      <td>7359.647458</td>\n",
       "      <td>5151.402186</td>\n",
       "      <td>271516.94</td>\n",
       "      <td>46.783524</td>\n",
       "      <td>0.261179</td>\n",
       "      <td>36.892656</td>\n",
       "      <td>52.707385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Split</td>\n",
       "      <td>89610.83</td>\n",
       "      <td>1243.416462</td>\n",
       "      <td>761.965298</td>\n",
       "      <td>27089.97</td>\n",
       "      <td>4.667717</td>\n",
       "      <td>0.302307</td>\n",
       "      <td>21.786723</td>\n",
       "      <td>35.552761</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Courier  Weight_per_line  Volume_per_line_m3  Pallet_per_line  \\\n",
       "0  DX Express        131816.32          636.723322       560.127807   \n",
       "1  DX Freight        438320.69         6975.530599      4410.621255   \n",
       "2      Direct          1885.78           10.237059        11.245167   \n",
       "3         MFS       1039580.82         7359.647458      5151.402186   \n",
       "4       Split         89610.83         1243.416462       761.965298   \n",
       "\n",
       "   DeliveryCost  %_deliverycost  cost_per_weight  cost_per_volume  \\\n",
       "0      69477.79       11.971319         0.527080       109.117709   \n",
       "1     212284.02       36.577440         0.484312        30.432670   \n",
       "2          0.00        0.000000         0.000000         0.000000   \n",
       "3     271516.94       46.783524         0.261179        36.892656   \n",
       "4      27089.97        4.667717         0.302307        21.786723   \n",
       "\n",
       "   cost_per_pallet  \n",
       "0       124.039173  \n",
       "1        48.130186  \n",
       "2         0.000000  \n",
       "3        52.707385  \n",
       "4        35.552761  "
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Add additional columns to calculate delivery cost per unit of weight, volume and pallet.\n",
    "courier_dimension['cost_per_weight'] = courier_dimension['DeliveryCost']/courier_dimension['Weight_per_line']\n",
    "courier_dimension['cost_per_volume'] = courier_dimension['DeliveryCost']/courier_dimension['Volume_per_line_m3']\n",
    "courier_dimension['cost_per_pallet'] = courier_dimension['DeliveryCost']/courier_dimension['Pallet_per_line']\n",
    "\n",
    "# View DataFrame\n",
    "courier_dimension"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "0ed3204b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Weight_per_line', ylabel='Courier'>"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1600x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Boxplot to visualize the weight_per_line based on courier\n",
    "sns.boxplot(data=all_joined, x ='Weight_per_line', y ='Courier')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "7e86c36d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Courier</th>\n",
       "      <th>Weight_per_line</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DX Express</td>\n",
       "      <td>14.247332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DX Freight</td>\n",
       "      <td>45.988951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Direct</td>\n",
       "      <td>47.144500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MFS</td>\n",
       "      <td>269.181983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Split</td>\n",
       "      <td>292.845850</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Courier  Weight_per_line\n",
       "0  DX Express        14.247332\n",
       "1  DX Freight        45.988951\n",
       "2      Direct        47.144500\n",
       "3         MFS       269.181983\n",
       "4       Split       292.845850"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "courier_avg_weight =  pd.DataFrame(all_joined.groupby('Courier',as_index=False)['Weight_per_line'].mean())\n",
    "courier_avg_weight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "8c693f74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Volume_per_line_m3', ylabel='Courier'>"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1600x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Boxplot to visualize the weight_per_line based on courier\n",
    "sns.boxplot(data=all_joined, x ='Volume_per_line_m3', y ='Courier')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "3770dbae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Courier</th>\n",
       "      <th>Volume_per_line_m3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DX Express</td>\n",
       "      <td>0.068820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DX Freight</td>\n",
       "      <td>0.731878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Direct</td>\n",
       "      <td>0.255926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MFS</td>\n",
       "      <td>1.905657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Split</td>\n",
       "      <td>4.063452</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Courier  Volume_per_line_m3\n",
       "0  DX Express            0.068820\n",
       "1  DX Freight            0.731878\n",
       "2      Direct            0.255926\n",
       "3         MFS            1.905657\n",
       "4       Split            4.063452"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "courier_avg_volume =  pd.DataFrame(all_joined.groupby('Courier',as_index=False)['Volume_per_line_m3'].mean())\n",
    "courier_avg_volume"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "372a6e5b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Pallet_per_line', ylabel='Courier'>"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1600x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Boxplot to visualize the pallet_per_line based on courier\n",
    "sns.boxplot(data=all_joined, x ='Pallet_per_line', y ='Courier')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24acf4c4",
   "metadata": {},
   "source": [
    "# Joining the data sheets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "3d0cf62e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Courier</th>\n",
       "      <th>Pallet_per_line</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DX Express</td>\n",
       "      <td>0.060541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DX Freight</td>\n",
       "      <td>0.462766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Direct</td>\n",
       "      <td>0.281129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MFS</td>\n",
       "      <td>1.333869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Split</td>\n",
       "      <td>2.490083</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Courier  Pallet_per_line\n",
       "0  DX Express         0.060541\n",
       "1  DX Freight         0.462766\n",
       "2      Direct         0.281129\n",
       "3         MFS         1.333869\n",
       "4       Split         2.490083"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "courier_pallet =  pd.DataFrame(all_joined.groupby('Courier',as_index=False)['Pallet_per_line'].mean())\n",
    "courier_pallet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "55862666",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='DeliveryCost', ylabel='Courier'>"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1600x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Boxplot to visualize the deliverycost based on courier\n",
    "sns.boxplot(data=all_joined, x ='DeliveryCost', y ='Courier')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "ed6d5af6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>OrderID</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Courier</th>\n",
       "      <th>DateDespatched</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">DX Express</th>\n",
       "      <th>2023-03-27</th>\n",
       "      <td>412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-03-28</th>\n",
       "      <td>510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-03-29</th>\n",
       "      <td>474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-03-30</th>\n",
       "      <td>498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-03-31</th>\n",
       "      <td>382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">Split</th>\n",
       "      <th>2023-04-19</th>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-04-20</th>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-04-21</th>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-04-23</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-04-24</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>95 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           OrderID\n",
       "Courier    DateDespatched         \n",
       "DX Express 2023-03-27          412\n",
       "           2023-03-28          510\n",
       "           2023-03-29          474\n",
       "           2023-03-30          498\n",
       "           2023-03-31          382\n",
       "...                            ...\n",
       "Split      2023-04-19           18\n",
       "           2023-04-20           15\n",
       "           2023-04-21           15\n",
       "           2023-04-23            1\n",
       "           2023-04-24            2\n",
       "\n",
       "[95 rows x 1 columns]"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "order_day = pd.DataFrame(all_joined.groupby(['Courier','DateDespatched'])['OrderID'].count())\n",
    "order_day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "92de7664",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\christina.hudaja\\AppData\\Local\\Temp\\ipykernel_15424\\1906241222.py:5: FutureWarning: \n",
      "\n",
      "The `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n",
      "\n",
      "  a = sns.lineplot(x='DateDespatched',y='OrderID',hue='Courier',data=order_day,ci=None, markers = True)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set figure size.\n",
    "a = sns.set(rc={'figure.figsize':(20, 6)})\n",
    "\n",
    "# Create a lineplot.\n",
    "a = sns.lineplot(x='DateDespatched',y='OrderID',hue='Courier',data=order_day,ci=None, markers = True)\n",
    "a.set_title(\"Counts of deliveries based on DateDespatched\",fontsize=24,fontweight='bold')\n",
    "a.set_ylabel(\"Number of Orders despatched\",fontweight='bold')\n",
    "plt.xticks(size=15,fontweight='bold')\n",
    "plt.yticks(size=15,fontweight='bold')\n",
    "\n",
    "# displaying chart.\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "8994a76e",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'Customers.xlsx'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[209], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Inner join Customers and Orders\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;66;03m# Note that rows with unidentified post codes had already been removed from excel\u001b[39;00m\n\u001b[1;32m----> 3\u001b[0m customers_df \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread_excel\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mCustomers.xlsx\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m      4\u001b[0m customers_df\u001b[38;5;241m.\u001b[39minfo()\n",
      "File \u001b[1;32m~\\AppData\\Local\\anaconda3\\lib\\site-packages\\pandas\\util\\_decorators.py:211\u001b[0m, in \u001b[0;36mdeprecate_kwarg.<locals>._deprecate_kwarg.<locals>.wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    209\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    210\u001b[0m         kwargs[new_arg_name] \u001b[38;5;241m=\u001b[39m new_arg_value\n\u001b[1;32m--> 211\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\AppData\\Local\\anaconda3\\lib\\site-packages\\pandas\\util\\_decorators.py:331\u001b[0m, in \u001b[0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    325\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) \u001b[38;5;241m>\u001b[39m num_allow_args:\n\u001b[0;32m    326\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[0;32m    327\u001b[0m         msg\u001b[38;5;241m.\u001b[39mformat(arguments\u001b[38;5;241m=\u001b[39m_format_argument_list(allow_args)),\n\u001b[0;32m    328\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[0;32m    329\u001b[0m         stacklevel\u001b[38;5;241m=\u001b[39mfind_stack_level(),\n\u001b[0;32m    330\u001b[0m     )\n\u001b[1;32m--> 331\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\AppData\\Local\\anaconda3\\lib\\site-packages\\pandas\\io\\excel\\_base.py:482\u001b[0m, in \u001b[0;36mread_excel\u001b[1;34m(io, sheet_name, header, names, index_col, usecols, squeeze, dtype, engine, converters, true_values, false_values, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, parse_dates, date_parser, thousands, decimal, comment, skipfooter, convert_float, mangle_dupe_cols, storage_options)\u001b[0m\n\u001b[0;32m    480\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(io, ExcelFile):\n\u001b[0;32m    481\u001b[0m     should_close \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m--> 482\u001b[0m     io \u001b[38;5;241m=\u001b[39m \u001b[43mExcelFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mio\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstorage_options\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mengine\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mengine\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    483\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m engine \u001b[38;5;129;01mand\u001b[39;00m engine \u001b[38;5;241m!=\u001b[39m io\u001b[38;5;241m.\u001b[39mengine:\n\u001b[0;32m    484\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    485\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEngine should not be specified when passing \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    486\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124man ExcelFile - ExcelFile already has the engine set\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    487\u001b[0m     )\n",
      "File \u001b[1;32m~\\AppData\\Local\\anaconda3\\lib\\site-packages\\pandas\\io\\excel\\_base.py:1652\u001b[0m, in \u001b[0;36mExcelFile.__init__\u001b[1;34m(self, path_or_buffer, engine, storage_options)\u001b[0m\n\u001b[0;32m   1650\u001b[0m     ext \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mxls\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1651\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 1652\u001b[0m     ext \u001b[38;5;241m=\u001b[39m \u001b[43minspect_excel_format\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1653\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcontent_or_path\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstorage_options\u001b[49m\n\u001b[0;32m   1654\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1655\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m ext \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   1656\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m   1657\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mExcel file format cannot be determined, you must specify \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1658\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124man engine manually.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1659\u001b[0m         )\n",
      "File \u001b[1;32m~\\AppData\\Local\\anaconda3\\lib\\site-packages\\pandas\\io\\excel\\_base.py:1525\u001b[0m, in \u001b[0;36minspect_excel_format\u001b[1;34m(content_or_path, storage_options)\u001b[0m\n\u001b[0;32m   1522\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(content_or_path, \u001b[38;5;28mbytes\u001b[39m):\n\u001b[0;32m   1523\u001b[0m     content_or_path \u001b[38;5;241m=\u001b[39m BytesIO(content_or_path)\n\u001b[1;32m-> 1525\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[43mget_handle\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1526\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcontent_or_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrb\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstorage_options\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mis_text\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\n\u001b[0;32m   1527\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mas\u001b[39;00m handle:\n\u001b[0;32m   1528\u001b[0m     stream \u001b[38;5;241m=\u001b[39m handle\u001b[38;5;241m.\u001b[39mhandle\n\u001b[0;32m   1529\u001b[0m     stream\u001b[38;5;241m.\u001b[39mseek(\u001b[38;5;241m0\u001b[39m)\n",
      "File \u001b[1;32m~\\AppData\\Local\\anaconda3\\lib\\site-packages\\pandas\\io\\common.py:865\u001b[0m, in \u001b[0;36mget_handle\u001b[1;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[0;32m    856\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(\n\u001b[0;32m    857\u001b[0m             handle,\n\u001b[0;32m    858\u001b[0m             ioargs\u001b[38;5;241m.\u001b[39mmode,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    861\u001b[0m             newline\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    862\u001b[0m         )\n\u001b[0;32m    863\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    864\u001b[0m         \u001b[38;5;66;03m# Binary mode\u001b[39;00m\n\u001b[1;32m--> 865\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mhandle\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mioargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmode\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    866\u001b[0m     handles\u001b[38;5;241m.\u001b[39mappend(handle)\n\u001b[0;32m    868\u001b[0m \u001b[38;5;66;03m# Convert BytesIO or file objects passed with an encoding\u001b[39;00m\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'Customers.xlsx'"
     ]
    }
   ],
   "source": [
    "# Inner join Customers and Orders\n",
    "# Note that rows with unidentified post codes had already been removed from excel\n",
    "customers_df = pd.read_excel(\"Customers.xlsx\")\n",
    "customers_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ad219e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check for null values in Customers\n",
    "null_counts = customers_df.isnull().sum()\n",
    "null_counts[null_counts > 0].sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a79290a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "customersnull=customers_df[customers_df.isnull().any(axis=1)]\n",
    "print(customersnull)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3dd8029",
   "metadata": {},
   "source": [
    "There are Website IDs with no customer data but we are keeping these rows/website IDs as they still contain useful information in the Orders and Order Details sheets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "afd19e81",
   "metadata": {},
   "outputs": [],
   "source": [
    "orders_cleaned.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f372684",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Inner join Customers and Orders\n",
    "df1 = pd.merge(customers_df, orders_cleaned, on='WebsiteID', how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0cd63ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "# View the joined data set\n",
    "print(df1.info())\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "784f9d12",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check for null values in the joined data set\n",
    "df1.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f0766d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1null=df1[df1.isnull().any(axis=1)]\n",
    "print(df1null)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4312172f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check for duplicates\n",
    "duplicate = df1[df1.duplicated()]\n",
    "print(\"Duplicate Rows :\")\n",
    "duplicate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2187913",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check for unique values\n",
    "df1.nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "999c0594",
   "metadata": {},
   "source": [
    "There are more OrderID than WebsiteID, which suggests that there may be multiple orders per customer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30a3e790",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Export the joined Customers and Orders data to excel\n",
    "df1.to_excel('Customers_Orders_joined.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2befb377",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import and join Orders Details\n",
    "orders_details = pd.read_excel(\"orderdetails_clean.xlsx\")\n",
    "orders_details.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52ff6f8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data_df = pd.merge(df1,orders_details, on='OrderID', how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00551196",
   "metadata": {},
   "outputs": [],
   "source": [
    "# View the joined data set\n",
    "print(all_data_df.info())\n",
    "all_data_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0407ea5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Can see from the above there are no null values.\n",
    "# Check for duplicates\n",
    "duplicate = all_data_df[all_data_df.duplicated()]\n",
    "print(\"Duplicate Rows :\")\n",
    "duplicate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f4dccb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# No duplicates either. Export to excel\n",
    "all_data_df.to_excel('all_data_joined.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9870c1a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data_df.to_csv('all_data_joined.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b1fca12",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
